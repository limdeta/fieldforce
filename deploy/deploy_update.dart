#!/usr/bin/env dart
// FieldForce Update Deployment Script in Dart
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: dart deploy_update.dart [–≤–µ—Ä—Å–∏—è] [changelog]

import 'dart:io';
import 'dart:convert';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ .env)
late String SERVER_HOST;
late String SERVER_USER;
late String SERVER_PATH;
late String UPDATE_SECRET;
String? SERVER_PASSWORD; // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
String DEFAULT_MIN_SUPPORTED_VERSION = '1.0.0';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞
Map<String, String> readEnvFile(String envPath) {
  final envVars = <String, String>{};
  
  final envFile = File(envPath);
  if (!envFile.existsSync()) {
    printError('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: $envPath');
    printInfo('üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
    exit(1);
  }
  
  final lines = envFile.readAsLinesSync();
  for (final line in lines) {
    final trimmed = line.trim();
    if (trimmed.isEmpty || trimmed.startsWith('#')) continue;
    
    final parts = trimmed.split('=');
    if (parts.length >= 2) {
      final key = parts[0].trim();
      var value = parts.sublist(1).join('=').trim();
      
      // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if ((value.startsWith('"') && value.endsWith('"')) ||
          (value.startsWith("'") && value.endsWith("'"))) {
        value = value.substring(1, value.length - 1);
      }
      
      envVars[key] = value;
    }
  }
  
  return envVars;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
void loadConfig() {
  final scriptDir = File(Platform.script.toFilePath()).parent;
  final envPath = '${scriptDir.path}/.env';
  final config = readEnvFile(envPath);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  SERVER_HOST = config['SERVER_HOST'] ?? '';
  SERVER_USER = config['SERVER_USER'] ?? '';
  SERVER_PATH = config['SERVER_PATH'] ?? '/var/www/mobile-app';
  UPDATE_SECRET = config['UPDATE_SECRET'] ?? '';
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  SERVER_PASSWORD = config['SERVER_PASSWORD']; // –º–æ–∂–µ—Ç –±—ã—Ç—å null
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (SERVER_HOST.isEmpty || SERVER_USER.isEmpty || UPDATE_SECRET.isEmpty) {
    printError('‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
    printInfo('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SERVER_HOST, SERVER_USER, UPDATE_SECRET –≤ .env');
    exit(1);
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (config['DEFAULT_MIN_SUPPORTED_VERSION']?.isNotEmpty == true) {
    DEFAULT_MIN_SUPPORTED_VERSION = config['DEFAULT_MIN_SUPPORTED_VERSION']!;
  }
}

void main(List<String> args) async {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞
  loadConfig();
  
  print('üöÄ FieldForce Update Deployment Script (Dart)');
  print('==============================================');

  final deployDir = Directory.current;
  final projectDir = deployDir.parent;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø–∞–ø–∫–µ deploy –ø—Ä–æ–µ–∫—Ç–∞ Flutter
  if (!File('${projectDir.path}/pubspec.yaml').existsSync()) {
    printError('‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ deploy –ø—Ä–æ–µ–∫—Ç–∞ Flutter');
    exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏
  bool skipBuild = args.contains('--skip-build');
  bool interactiveMode = args.contains('--interactive');
  bool showCommandsOnly = args.contains('--show-commands');

  printInfo('üîß –†–µ–∂–∏–º —Å–±–æ—Ä–∫–∏: ${skipBuild ? "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" : "—Å–æ–±—Ä–∞—Ç—å"}');
  printInfo('üîß –†–µ–∂–∏–º SSH: ${interactiveMode ? "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π" : "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"}');
  if (showCommandsOnly) printInfo('üîß –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã');

  // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
  String? version;
  String? changelog;
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —É–±–∏—Ä–∞—è —Ñ–ª–∞–≥–∏
  final filteredArgs = args.where((arg) => !arg.startsWith('--')).toList();
  
  if (filteredArgs.isNotEmpty) {
    version = filteredArgs[0];
  }
  
  if (filteredArgs.length > 1) {
    changelog = filteredArgs.skip(1).join(' ');
  }

  // –ß–∏—Ç–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ pubspec.yaml –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
  if (version == null || version.isEmpty) {
  final pubspecContent = await File('${projectDir.path}/pubspec.yaml').readAsString();
    final versionMatch = RegExp(r'version:\s*([0-9]+\.[0-9]+\.[0-9]+)').firstMatch(pubspecContent);
    
    if (versionMatch != null) {
      version = versionMatch.group(1)!;
      printInfo('üìù –í–µ—Ä—Å–∏—è –∏–∑ pubspec.yaml: $version');
    } else {
      printError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ pubspec.yaml');
      exit(1);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏
  if (!RegExp(r'^[0-9]+\.[0-9]+\.[0-9]+$').hasMatch(version)) {
    printError('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: $version (–æ–∂–∏–¥–∞–µ—Ç—Å—è x.y.z)');
    exit(1);
  }

  final apkName = 'fieldforce-v$version.apk';

  printInfo('üì± –í–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è: $version');
  printInfo('üìÅ APK —Ñ–∞–π–ª: $apkName');

  if (skipBuild) {
    printWarning('‚è≠Ô∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (--skip-build)');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ APK —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ deploy/releases
    final existingApk = File('releases/$apkName');
    if (!existingApk.existsSync()) {
      printError('‚ùå APK —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${existingApk.path}');
      printInfo('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --skip-build –¥–ª—è —Å–±–æ—Ä–∫–∏');
      exit(1);
    }
    
    printSuccess('‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ç–æ–≤—ã–π APK: releases/$apkName');
  } else {
    print('');
    printInfo('üî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...');

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏
  Directory.current = projectDir;

    // –°–æ–±–∏—Ä–∞–µ–º Android APK
    printInfo('üì± –°–æ–±–∏—Ä–∞–µ–º Android APK...');
    await runCommand('flutter', ['clean']);
    await runCommand('flutter', ['pub', 'get']);
    await runCommand('flutter', ['build', 'apk', '--release', '--dart-define=ENV=prod']);

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º APK –≤ –ø–∞–ø–∫—É deploy/releases
    final originalApk = File('build/app/outputs/flutter-apk/app-release.apk');
    final targetApk = File('deploy/releases/$apkName');
    
    if (originalApk.existsSync()) {
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await targetApk.parent.create(recursive: true);
      await originalApk.copy(targetApk.path);
      printSuccess('‚úÖ Android APK —Å–æ–±—Ä–∞–Ω: deploy/releases/$apkName');
    } else {
      printError('‚ùå APK —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${originalApk.path}');
      exit(1);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø–∞–ø–∫—É deploy –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    Directory.current = deployDir;
  }
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–Ω–æ–≤–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ deploy
  Directory.current = deployDir;

  // –°–æ–∑–¥–∞–µ–º update-info.json –≤ –ø–∞–ø–∫–µ deploy
  final updateInfo = {
    'changelog': changelog ?? 'üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ $version\n‚ú® –£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫',
    'required': false,
    'min_supported_version': DEFAULT_MIN_SUPPORTED_VERSION,
  };

  final updateInfoFile = File('update-info.json');
  await updateInfoFile.writeAsString(
    JsonEncoder.withIndent('  ').convert(updateInfo),
    encoding: utf8,
  );
  printSuccess('‚úÖ –°–æ–∑–¥–∞–Ω update-info.json –≤ –ø–∞–ø–∫–µ deploy');

  print('');
  printInfo('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

  if (showCommandsOnly) {
    printInfo('üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:');
    print('');
    printInfo('scp releases/fieldforce-v$version.apk $SERVER_USER@$SERVER_HOST:$SERVER_PATH/releases/');
    printInfo('scp update-info.json $SERVER_USER@$SERVER_HOST:$SERVER_PATH/');
    print('');
    printInfo('üì° API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏:');
    printInfo('curl -X POST -H "X-Update-Secret: $UPDATE_SECRET" https://$SERVER_HOST/v1_api/mobile-sync/app/refresh');
    print('');
    printWarning('‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    printInfo('üîó https://$SERVER_HOST/v1_api/mobile-sync/app/version');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ scp
  final scpResult = await Process.run('where', ['scp'], runInShell: true);
  if (scpResult.exitCode != 0) {
    printError('‚ùå SCP –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenSSH –∏–ª–∏ Git for Windows');
    exit(1);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  printInfo('üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
  try {
    final sshTest = await Process.run(
      'ssh',
      [
        '-o', 'ConnectTimeout=10',
        '-o', 'BatchMode=yes', // –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
        '-o', 'StrictHostKeyChecking=no', // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–ª—é—á–∏
        '-o', 'UserKnownHostsFile=/dev/null', // –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏
        '$SERVER_USER@$SERVER_HOST',
        'echo "SSH connection test successful"'
      ],
      runInShell: true,
    ).timeout(Duration(seconds: 15));

    if (sshTest.exitCode == 0) {
      printSuccess('‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      printWarning('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º (exit code: ${sshTest.exitCode})');
      printInfo('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω SSH-–∫–ª—é—á –∏–ª–∏ –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å');
      printWarning('Stderr: ${sshTest.stderr}');
    }
  } catch (e) {
    printWarning('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å SSH: $e');
    printInfo('üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π');
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
  bool uploadSuccess = true;

  for (final file in [apkName, 'update-info.json']) {
    String localFilePath;
    if (file == 'update-info.json') {
      // update-info.json –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ deploy
      localFilePath = file;
    } else {
      // APK —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ deploy/releases
      localFilePath = 'releases/$file';
    }
    
    if (File(localFilePath).existsSync()) {
      String remotePath;
      if (file == 'update-info.json') {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ tmp, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–º–µ—â–∞–µ–º
        remotePath = '/tmp/$file';
        printInfo('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ tmp: $file');
        uploadSuccess = uploadSuccess && await uploadFile(localFilePath, remotePath, interactiveMode);
        
        if (uploadSuccess) {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –º–µ—Å—Ç–æ —Å –ø–æ–º–æ—â—å—é sudo
          printInfo('üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –º–µ—Å—Ç–æ...');
          final moveResult = await Process.run('ssh', [
            '-o', 'ConnectTimeout=30',
            '-o', 'StrictHostKeyChecking=no',
            '$SERVER_USER@$SERVER_HOST',
            'sudo cp /tmp/$file $SERVER_PATH/$file && sudo chown www-data:www-data $SERVER_PATH/$file'
          ], runInShell: true);
          
          if (moveResult.exitCode != 0) {
            printError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å $file');
            printWarning('Stderr: ${moveResult.stderr}');
            uploadSuccess = false;
          } else {
            printSuccess('‚úÖ –§–∞–π–ª $file –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –º–µ—Å—Ç–æ');
          }
        }
      } else {
        // APK —Ñ–∞–π–ª—ã –≤ releases/
        remotePath = '$SERVER_PATH/releases/$file';
        uploadSuccess = uploadSuccess && await uploadFile(localFilePath, remotePath, interactiveMode);
      }
    } else {
      printError('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $localFilePath');
      uploadSuccess = false;
    }
  }

  if (!uploadSuccess) {
    printError('‚ùå –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å');
    exit(1);
  }

  print('');
  printInfo('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');

  // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è version.json
  try {
    final result = await Process.run('curl', [
      '-X', 'POST',
      '-H', 'X-Update-Secret: $UPDATE_SECRET',
      '-H', 'Content-Type: application/json',
      'https://$SERVER_HOST/v1_api/mobile-sync/app/refresh'
    ]);

    if (result.exitCode == 0) {
      printSuccess('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    } else {
      printWarning('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å version.json');
    }
  } catch (e) {
    printWarning('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ version.json: $e');
  }

  print('');
  printSuccess('üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  printInfo('üì± APK: https://$SERVER_HOST/v1_api/mobile-sync/app/download/$apkName');
  printInfo('üîó Version API: https://$SERVER_HOST/v1_api/mobile-sync/app/version');

  print('');
  printInfo('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  final filesToClean = [
    'releases/$apkName', // APK –≤ deploy/releases
    'update-info.json' // JSON –≤ –ø–∞–ø–∫–µ deploy
  ];
  
  for (final file in filesToClean) {
    final f = File(file);
    if (f.existsSync()) {
      await f.delete();
      printInfo('üóëÔ∏è –£–¥–∞–ª–µ–Ω: $file');
    }
  }

  printSuccess('‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
}

Future<void> runCommand(String command, List<String> args) async {
  final result = await Process.run(command, args, runInShell: true);
  if (result.exitCode != 0) {
    printError('‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: $command ${args.join(' ')}');
    printError('–í—ã–≤–æ–¥: ${result.stderr}');
    exit(1);
  }
}

Future<bool> uploadFile(String localPath, String remotePath, [bool interactive = false]) async {
  printInfo('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º $localPath...');
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º sshpass
  if (SERVER_PASSWORD != null && SERVER_PASSWORD!.isNotEmpty) {
    printInfo('ÔøΩ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    return await _uploadWithPassword(localPath, remotePath);
  }
  
  printInfo('ÔøΩüîó –ö–æ–º–∞–Ω–¥–∞: scp $localPath $SERVER_USER@$SERVER_HOST:$remotePath');
  
  try {
    List<String> scpArgs = [
      '-o', 'ConnectTimeout=30',
      '-o', 'ServerAliveInterval=10', 
      '-o', 'ServerAliveCountMax=3',
    ];

    if (!interactive) {
      // –í –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π
      scpArgs.addAll([
        '-o', 'StrictHostKeyChecking=no',
        '-o', 'UserKnownHostsFile=/dev/null',
        '-o', 'BatchMode=yes', // –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
      ]);
    }

    scpArgs.addAll([
      '-v', // verbose –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      localPath,
      '$SERVER_USER@$SERVER_HOST:$remotePath'
    ]);

    final result = await Process.run(
      'scp', 
      scpArgs,
      runInShell: true,
    ).timeout(Duration(minutes: 5));

    printInfo('üìã Stdout: ${result.stdout}');
    if (result.stderr.isNotEmpty) {
      printWarning('‚ö†Ô∏è Stderr: ${result.stderr}');
    }

    if (result.exitCode == 0) {
      printSuccess('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: $localPath');
      return true;
    } else {
      printError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $localPath (exit code: ${result.exitCode})');
      printError('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å --show-commands –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏');
      return false;
    }
  } catch (e) {
    printError('‚ùå –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: $localPath');
    printError('–û—à–∏–±–∫–∞: $e');
    printError('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å --show-commands –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏');
    return false;
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º (—Ç—Ä–µ–±—É–µ—Ç sshpass)
Future<bool> _uploadWithPassword(String localPath, String remotePath) async {
  try {
    final result = await Process.run(
      'sshpass',
      [
        '-p', SERVER_PASSWORD!,
        'scp',
        '-o', 'ConnectTimeout=30',
        '-o', 'StrictHostKeyChecking=no',
        '-o', 'UserKnownHostsFile=/dev/null',
        localPath,
        '$SERVER_USER@$SERVER_HOST:$remotePath'
      ],
      runInShell: true,
    ).timeout(Duration(minutes: 5));

    if (result.exitCode == 0) {
      printSuccess('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å –ø–∞—Ä–æ–ª–µ–º: $localPath');
      return true;
    } else {
      printError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–∞—Ä–æ–ª–µ–º: $localPath');
      printError('Stderr: ${result.stderr}');
      return false;
    }
  } catch (e) {
    printWarning('‚ö†Ô∏è sshpass –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞: $e');
    printInfo('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ sshpass –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --show-commands');
    return false;
  }
}

void printSuccess(String message) {
  print('\x1B[32m$message\x1B[0m'); // Green
}

void printError(String message) {
  print('\x1B[31m$message\x1B[0m'); // Red
}

void printWarning(String message) {
  print('\x1B[33m$message\x1B[0m'); // Yellow  
}

void printInfo(String message) {
  print('\x1B[36m$message\x1B[0m'); // Cyan
}