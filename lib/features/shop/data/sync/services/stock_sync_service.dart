import 'dart:io';
import 'dart:typed_data';
import 'package:http/io_client.dart';
import 'package:logging/logging.dart';

import '../generated/sync.pb.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –≤ —Ä–µ–≥–∏–æ–Ω–µ
class StockSyncService {
  static final Logger _logger = Logger('StockSyncService');
  
  final String _baseUrl;
  String? _sessionCookie;
  
  StockSyncService({
    required String baseUrl,
    String? sessionCookie,
  }) : _baseUrl = baseUrl, _sessionCookie = sessionCookie;

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞  
  /// 
  /// [regionCode] - —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, P3V, M3V, K3V)
  /// 
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –≤ —Ä–µ–≥–∏–æ–Ω–µ
  Future<RegionalStockResponse> getRegionalStock(String regionCode) async {
    _logger.info('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ $regionCode');
    
    final url = '$_baseUrl/mobile-sync/regional-stock/$regionCode';
    Uint8List? responseBytes;
    
    try {
      responseBytes = await _makeProtobufRequest(url);
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
      _logger.info('üîç –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: ${responseBytes.length} –±–∞–π—Ç');
      if (responseBytes.length < 10) {
        _logger.warning('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ç–æ–±—É—Ñ');
        _logger.info('üìã –ü–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã: ${responseBytes.take(responseBytes.length).map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')}');
      } else {
        _logger.info('üìã –ü–µ—Ä–≤—ã–µ 10 –±–∞–π—Ç: ${responseBytes.take(10).map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')}');
        _logger.info('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–∞–π—Ç: ${responseBytes.skip(responseBytes.length - 10).map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')}');
      }
      
      final stockData = RegionalStockResponse.fromBuffer(responseBytes);
      
      _logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è ${stockData.stockItems.length} —Ç–æ–≤–∞—Ä–æ–≤');
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      if (stockData.stockItems.isNotEmpty) {
        _logger.info('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ø–µ—Ä–≤—ã—Ö 3 StockItems –∏–∑ protobuf:');
        for (int i = 0; i < stockData.stockItems.take(3).length; i++) {
          final item = stockData.stockItems[i];
          _logger.info('  [$i] productCode=${item.productCode}, stock=${item.stock}, hasStock=${item.hasStock()}, publicStock="${item.publicStock}"');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å stock > 0
        final itemsWithStock = stockData.stockItems.where((item) => item.stock > 0).toList();
        _logger.info('üîç –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å stock > 0: ${itemsWithStock.length} –∏–∑ ${stockData.stockItems.length}');
        
        if (itemsWithStock.isNotEmpty) {
          _logger.info('üîç –ü—Ä–∏–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å stock > 0:');
          for (int i = 0; i < itemsWithStock.take(3).length; i++) {
            final item = itemsWithStock[i];
            _logger.info('  productCode=${item.productCode}, stock=${item.stock}, publicStock="${item.publicStock}"');
          }
        }
      }
      
      return stockData;
    } catch (e, stackTrace) {
      if (e.toString().contains('Protocol message end-group tag')) {
        _logger.severe('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ protobuf - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        _logger.info('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π RegionalStockResponse –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ /mobile-sync/regional-stock/');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (responseBytes != null) {
          try {
            final textContent = String.fromCharCodes(responseBytes.take(200));
            _logger.info('üîç –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç: "$textContent"');
          } catch (textError) {
            _logger.info('üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç');
          }
        }
      }
      
  _logger.severe('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: $e', e, stackTrace);
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  /// 
  /// [outletId] - ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  /// [productCodes] - —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
  /// 
  /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è —Ç–æ—á–∫–∏ —Ü–µ–Ω
  Future<int> getOutletSpecificPricing(
    int outletId,
    List<int> productCodes,
  ) async {
    _logger.info('üí∞ –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω –¥–ª—è ${productCodes.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–æ—á–∫–µ $outletId');
    
    final request = OutletSpecificRequest()
      ..productCodes.addAll(productCodes);
    
    final url = '$_baseUrl/v1_api/mobile-sync/outlet-pricing/$outletId';
    
    try {
      await _makeProtobufRequest(url, requestData: request.writeToBuffer());
      // TODO: –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è protobuf —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      
      _logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ—á–∫–∏ $outletId');
      
      // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω
      return productCodes.length;
    } catch (e, stackTrace) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: $e', e, stackTrace);
      rethrow;
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å protobuf –¥–∞–Ω–Ω—ã–º–∏
  Future<Uint8List> _makeProtobufRequest(
    String url, {
    Uint8List? requestData,
  }) async {
    // –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    final ioClient = HttpClient();
    ioClient.badCertificateCallback = (X509Certificate cert, String host, int port) => true;
    final client = IOClient(ioClient);
    
    try {
      final uri = Uri.parse(url);
      
      final headers = <String, String>{
        'Accept': 'application/x-protobuf',
        'Accept-Encoding': 'gzip',
        'Content-Type': 'application/x-protobuf',
        'User-Agent': 'FieldForce/1.0 (Mobile)',
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∫—É–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
      if (_sessionCookie != null && _sessionCookie!.isNotEmpty) {
        final fullCookie = _sessionCookie!.startsWith('PHPSESSID=')
            ? _sessionCookie!
            : 'PHPSESSID=$_sessionCookie';
        headers['Cookie'] = fullCookie;
        _logger.fine('üç™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏–æ–Ω–Ω–∞—è –∫—É–∫–∞');
      }
      
      _logger.fine('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ protobuf –∑–∞–ø—Ä–æ—Å–∞ –∫ $uri');
      
      final response = requestData != null
          ? await client.post(uri, headers: headers, body: requestData)
          : await client.get(uri, headers: headers);
      
      _logger.fine('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ${response.statusCode} (${response.contentLength} –±–∞–π—Ç)');
      
      if (response.statusCode != 200) {
        throw HttpException(
          'HTTP ${response.statusCode}: ${response.reasonPhrase}',
          uri: uri,
        );
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º gzip-—Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
      var responseBytes = response.bodyBytes;
      final isGzipCompressed = response.headers['content-encoding'] == 'gzip';
      
      _logger.info('üîç Content-Encoding: ${response.headers['content-encoding']}');
      _logger.info('üîç Content-Type: ${response.headers['content-type']}');
      _logger.info('üîç Content-Length: ${response.headers['content-length']}');
      _logger.info('üîç –†–∞–∑–º–µ—Ä —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${responseBytes.length} –±–∞–π—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –î–û gzip –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
      if (responseBytes.isNotEmpty) {
        _logger.info('üîç –ü–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç –°–´–†–´–• –¥–∞–Ω–Ω—ã—Ö: ${responseBytes.take(20).map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')}');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å gzip –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if (isGzipCompressed && responseBytes.length >= 2) {
          final gzipMagic = responseBytes[0] == 0x1f && responseBytes[1] == 0x8b;
          _logger.fine('üîç Gzip Magic Number –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: $gzipMagic (–æ–∂–∏–¥–∞–µ—Ç—Å—è 1f 8b)');
          
          if (!gzipMagic) {
            _logger.fine('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç gzip, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–∂–∞—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å');
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            try {
              final textContent = String.fromCharCodes(responseBytes.take(200));
              _logger.fine('üîç –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç: "$textContent"');
            } catch (textError) {
              _logger.fine('üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç');
            }
          }
        }
      }
      
      if (isGzipCompressed) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–∂–∞—Ç—ã gzip
        if (responseBytes.length >= 2 && responseBytes[0] == 0x1f && responseBytes[1] == 0x8b) {
          try {
            _logger.fine('üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ gzip –¥–∞–Ω–Ω—ã—Ö');
            responseBytes = Uint8List.fromList(gzip.decode(responseBytes));
            _logger.info('‚úÖ Gzip –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã (${responseBytes.length} –±–∞–π—Ç)');
          } catch (e) {
            _logger.severe('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ gzip: $e');
            _logger.info('üîç –ü–µ—Ä–≤—ã–µ 50 –±–∞–π—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${responseBytes.take(50).map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')}');
            rethrow;
          }
        } else {
          _logger.fine('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∫–∞–∑–∞–ª content-encoding=gzip, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–∂–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å.');
          _logger.info('ÔøΩ –í–µ—Ä–æ—è—Ç–Ω–æ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ - –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç gzip –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–∂–∞—Ç—ã');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å protobuf –¥–∞–Ω–Ω—ã—Ö
      if (responseBytes.isEmpty) {
        _logger.warning('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      } else if (responseBytes.length < 2) {
        _logger.warning('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è protobuf');
      } else {
        _logger.info('üîç –ü–µ—Ä–≤—ã–µ 10 –±–∞–π—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${responseBytes.take(10).map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ')}');
      }
      
      _logger.fine('‚úÖ Protobuf –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã (${responseBytes.length} –±–∞–π—Ç)');
      return responseBytes;
      
    } finally {
      client.close();
    }
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∫—É–∫—É –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  void setSessionCookie(String cookie) {
    _sessionCookie = cookie;
    _logger.fine('üîê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏–æ–Ω–Ω–∞—è –∫—É–∫–∞');
  }

  /// –û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∫—É–∫—É
  void clearSession() {
    _sessionCookie = null;
    _logger.fine('üö™ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞');
  }
}