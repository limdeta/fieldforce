import 'dart:io';
import 'dart:typed_data';
import 'dart:math' as math;

import 'package:http/http.dart' show Response;
import 'package:http/io_client.dart';
import 'package:logging/logging.dart';

import '../generated/sync.pb.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è —Ç–æ—á–∫–∏ —Ü–µ–Ω —á–µ—Ä–µ–∑ outlet-prices endpoint
class OutletPricingSyncService {
  static final Logger _logger = Logger('OutletPricingSyncService');
  static final GZipCodec _gzipCodec = GZipCodec();
  static final ZLibCodec _zlibCodec = ZLibCodec();
  static final ZLibCodec _zlibRawCodec = ZLibCodec(raw: true);
  
  final String _baseUrl;
  String? _sessionCookie;
  
  OutletPricingSyncService({
    required String baseUrl,
    String? sessionCookie,
  }) : _baseUrl = baseUrl, _sessionCookie = sessionCookie;

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  /// 
  /// [outletVendorId] - Vendor ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  /// 
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–æ—á–∫–∏ —Ü–µ–Ω—ã
  Future<OutletSpecificCacheResponse> getOutletPrices(String outletVendorId) async {
    _logger.info('üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ $outletVendorId');
    
    final url = '$_baseUrl/mobile-sync/outlet-prices/$outletVendorId';
    
    try {
      final payload = await _makeProtobufRequest(url, debugLabel: 'outlet:$outletVendorId');
  final priceData = _parseProtobufPayload(payload, debugLabel: 'outlet:$outletVendorId');

  final pricingCount = priceData.outletPricing.length;
  final promotionsCount = priceData.activePromotions.length;
  _logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${pricingCount} —Ü–µ–Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π (–∞–∫—Ü–∏–π: $promotionsCount) –¥–ª—è —Ç–æ—á–∫–∏ $outletVendorId');
      
      return priceData;
    } catch (e, stackTrace) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –¥–ª—è —Ç–æ—á–∫–∏ $outletVendorId: $e', e, stackTrace);
      rethrow;
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å protobuf –¥–∞–Ω–Ω—ã–º–∏
  Future<Uint8List> _makeProtobufRequest(String url, {Uint8List? requestData, required String debugLabel}) async {
    // –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  final ioClient = HttpClient()..autoUncompress = false;
    ioClient.badCertificateCallback = (X509Certificate cert, String host, int port) => true;
    final client = IOClient(ioClient);
    
    try {
      final uri = Uri.parse(url);
      
      final headers = <String, String>{
  'Accept': 'application/x-protobuf',
  'Accept-Encoding': 'gzip, deflate',
        'User-Agent': 'FieldForce-Mobile/1.0',
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∫—É–∫—É
      if (_sessionCookie != null && _sessionCookie!.isNotEmpty) {
        final fullCookie = _sessionCookie!.startsWith('PHPSESSID=')
            ? _sessionCookie!
            : 'PHPSESSID=$_sessionCookie';
        headers['Cookie'] = fullCookie;
        _logger.fine('üç™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏–æ–Ω–Ω–∞—è –∫—É–∫–∞');
      }
      
      _logger.fine('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ protobuf –∑–∞–ø—Ä–æ—Å–∞ –∫ $uri');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
      if (requestData != null) {
        _logger.info('üì§ POST –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ (${requestData.length} –±–∞–π—Ç)');
        final response = await client.post(uri, headers: headers, body: requestData);
        
        if (response.statusCode != 200) {
          throw Exception('HTTP ${response.statusCode}: ${response.reasonPhrase}');
        }
        return _processResponse(response, debugLabel: debugLabel);
        
      } else {
        _logger.info('üåê GET –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)');
        final response = await client.get(uri, headers: headers);
        
        if (response.statusCode != 200) {
          throw Exception('HTTP ${response.statusCode}: ${response.reasonPhrase}');
        }
        return _processResponse(response, debugLabel: debugLabel);
      }
      
    } finally {
      client.close();
    }
  }

  /// üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞ —Å gzip –∏ protobuf
  Uint8List _processResponse(Response response, {required String debugLabel}) {
    final Uint8List rawBytes = response.bodyBytes;
    var responseBytes = rawBytes;
    final String? contentEncoding = response.headers['content-encoding'];
    final String normalizedEncoding = contentEncoding?.toLowerCase() ?? '';

    if (normalizedEncoding == 'gzip') {
      try {
  responseBytes = Uint8List.fromList(_gzipCodec.decode(rawBytes));
        _logger.fine('üì¶ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –∏–∑ gzip');
      } catch (e, stackTrace) {
        throw ProtobufPayloadException(
          '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å gzip-–æ—Ç–≤–µ—Ç',
          _buildDebugData(
            debugLabel: debugLabel,
            stage: 'gzip-decode',
            response: response,
            rawBytes: rawBytes,
            error: e,
            stackTrace: stackTrace,
          ),
        );
      }
    } else if (normalizedEncoding == 'deflate') {
      try {
  responseBytes = Uint8List.fromList(_zlibCodec.decode(rawBytes));
        _logger.fine('üì¶ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –∏–∑ deflate (zlib)');
      } catch (zlibError, zlibStack) {
        _logger.warning('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ZLibCodec –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å deflate: $zlibError');
        try {
          responseBytes = Uint8List.fromList(_zlibRawCodec.decode(rawBytes));
          _logger.fine('üì¶ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –∏–∑ deflate (raw) –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞');
        } catch (rawError, rawStack) {
          throw ProtobufPayloadException(
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å deflate-–æ—Ç–≤–µ—Ç',
            _buildDebugData(
              debugLabel: debugLabel,
              stage: 'deflate-decode',
              response: response,
              rawBytes: rawBytes,
              error: rawError,
              stackTrace: rawStack,
            )..addAll(<String, dynamic>{
                'zlibDecodeError': zlibError.toString(),
                'zlibDecodeStack': zlibStack.toString().split('\n').take(12).join('\n'),
              }),
          );
        }
      }
    }

    _logger.fine('üì• –ü–æ–ª—É—á–µ–Ω protobuf –æ—Ç–≤–µ—Ç: ${_formatBytes(responseBytes.length)}');

    return responseBytes;
  }

  OutletSpecificCacheResponse _parseProtobufPayload(Uint8List payload, {required String debugLabel}) {
    try {
      return OutletSpecificCacheResponse.fromBuffer(payload);
    } catch (e, stackTrace) {
      throw ProtobufPayloadException(
        '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å protobuf-–æ—Ç–≤–µ—Ç',
        <String, dynamic>{
          'debugLabel': debugLabel,
          'stage': 'protobuf-parse',
          'payloadLength': payload.length,
          'previewHex': _buildHexPreview(payload),
          'previewAscii': _buildAsciiPreview(payload),
          'error': e.toString(),
          'stackTrace': stackTrace.toString().split('\n').take(12).join('\n'),
        },
      );
    }
  }

  /// üîç –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  String _formatBytes(int bytes) {
    if (bytes < 1024) return '${bytes}B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)}KB';
    return '${(bytes / (1024 * 1024)).toStringAsFixed(1)}MB';
  }

  Map<String, dynamic> _buildDebugData({
    required String debugLabel,
    required String stage,
    required Response response,
    required Uint8List rawBytes,
    required Object error,
    required StackTrace stackTrace,
  }) {
    return <String, dynamic>{
      'debugLabel': debugLabel,
      'stage': stage,
      'statusCode': response.statusCode,
      'contentEncoding': response.headers['content-encoding'],
      'contentType': response.headers['content-type'],
      'rawLength': rawBytes.length,
      'previewHex': _buildHexPreview(rawBytes),
      'previewAscii': _buildAsciiPreview(rawBytes),
      'headers': response.headers,
      'error': error.toString(),
      'stackTrace': stackTrace.toString().split('\n').take(12).join('\n'),
    };
  }

  String _buildHexPreview(Uint8List bytes, {int maxBytes = 96}) {
    final int length = math.min(maxBytes, bytes.length);
    final String preview = bytes.take(length).map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ');
    return bytes.length > maxBytes ? '$preview ‚Ä¶' : preview;
  }

  String _buildAsciiPreview(Uint8List bytes, {int maxBytes = 160}) {
    final int length = math.min(maxBytes, bytes.length);
    final StringBuffer buffer = StringBuffer();
    for (int i = 0; i < length; i++) {
      final int codeUnit = bytes[i];
      final bool isPrintable = codeUnit >= 32 && codeUnit <= 126;
      buffer.write(isPrintable ? String.fromCharCode(codeUnit) : '.');
    }
    if (bytes.length > maxBytes) {
      buffer.write(' ‚Ä¶');
    }
    return buffer.toString();
  }
}

class ProtobufPayloadException implements Exception {
  ProtobufPayloadException(this.message, this.debugData);

  final String message;
  final Map<String, dynamic> debugData;

  @override
  String toString() => message;
}