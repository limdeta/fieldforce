import 'dart:io';
import 'dart:typed_data';
import 'dart:convert';
import 'package:http/http.dart' show Response;
import 'package:http/io_client.dart';
import 'package:logging/logging.dart';

import '../generated/sync.pb.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è —Ç–æ—á–∫–∏ —Ü–µ–Ω —á–µ—Ä–µ–∑ outlet-prices endpoint
class OutletPricingSyncService {
  static final Logger _logger = Logger('OutletPricingSyncService');
  
  final String _baseUrl;
  String? _sessionCookie;
  
  OutletPricingSyncService({
    required String baseUrl,
    String? sessionCookie,
  }) : _baseUrl = baseUrl, _sessionCookie = sessionCookie;

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  /// 
  /// [outletVendorId] - Vendor ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
  /// 
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–æ—á–∫–∏ —Ü–µ–Ω—ã
  Future<RegionalCacheResponse> getOutletPrices(String outletVendorId) async {
    _logger.info('üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ $outletVendorId');
    
    final url = '$_baseUrl/mobile-sync/outlet-prices/$outletVendorId';
    
    try {
      final response = await _makeProtobufRequest(url);
      final priceData = RegionalCacheResponse.fromBuffer(response);
      
      _logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω –¥–ª—è ${priceData.products.length} —Ç–æ–≤–∞—Ä–æ–≤');
      
      return priceData;
    } catch (e, stackTrace) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –¥–ª—è —Ç–æ—á–∫–∏ $outletVendorId: $e', e, stackTrace);
      rethrow;
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å protobuf –¥–∞–Ω–Ω—ã–º–∏
  Future<Uint8List> _makeProtobufRequest(String url, {Uint8List? requestData}) async {
    // –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    final ioClient = HttpClient();
    ioClient.badCertificateCallback = (X509Certificate cert, String host, int port) => true;
    final client = IOClient(ioClient);
    
    try {
      final uri = Uri.parse(url);
      
      final headers = <String, String>{
        'Accept': 'application/x-protobuf',
        'Accept-Encoding': 'gzip',
        'User-Agent': 'FieldForce-Mobile/1.0',
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—É—é –∫—É–∫—É
      if (_sessionCookie != null && _sessionCookie!.isNotEmpty) {
        final fullCookie = _sessionCookie!.startsWith('PHPSESSID=')
            ? _sessionCookie!
            : 'PHPSESSID=$_sessionCookie';
        headers['Cookie'] = fullCookie;
        _logger.fine('üç™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Å—Å–∏–æ–Ω–Ω–∞—è –∫—É–∫–∞');
      }
      
      _logger.fine('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ protobuf –∑–∞–ø—Ä–æ—Å–∞ –∫ $uri');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
      if (requestData != null) {
        _logger.info('üì§ POST –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ (${requestData.length} –±–∞–π—Ç)');
        final response = await client.post(uri, headers: headers, body: requestData);
        
        if (response.statusCode != 200) {
          throw Exception('HTTP ${response.statusCode}: ${response.reasonPhrase}');
        }
        return _processResponse(response);
        
      } else {
        _logger.info('üåê GET –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)');
        final response = await client.get(uri, headers: headers);
        
        if (response.statusCode != 200) {
          throw Exception('HTTP ${response.statusCode}: ${response.reasonPhrase}');
        }
        return _processResponse(response);
      }
      
    } finally {
      client.close();
    }
  }

  /// üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞ —Å gzip –∏ protobuf
  Uint8List _processResponse(Response response) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º gzip —Å–∂–∞—Ç–∏–µ
    var responseBytes = response.bodyBytes;
    final contentEncoding = response.headers['content-encoding'];
    
    if (contentEncoding == 'gzip') {
      responseBytes = Uint8List.fromList(gzip.decode(responseBytes));
      _logger.fine('üì¶ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –∏–∑ gzip');
    }
    
    _logger.fine('üì• –ü–æ–ª—É—á–µ–Ω protobuf –æ—Ç–≤–µ—Ç: ${_formatBytes(responseBytes.length)}');
    
    return responseBytes;
  }

  /// üîç –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  String _formatBytes(int bytes) {
    if (bytes < 1024) return '${bytes}B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)}KB';
    return '${(bytes / (1024 * 1024)).toStringAsFixed(1)}MB';
  }
}