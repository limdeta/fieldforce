// lib/features/shop/data/sync/services/protobuf_sync_coordinator.dart

import 'package:fieldforce/app/services/category_tree_cache_service.dart';
import 'package:fieldforce/shared/failures.dart';
import 'package:logging/logging.dart';

import '../models/product_protobuf_converter.dart';
import '../models/stock_item_protobuf_converter.dart';
import '../models/warehouse_protobuf_converter.dart';
import '../repositories/protobuf_sync_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/product_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/stock_item_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/warehouse_repository.dart';
import 'regional_sync_service.dart';
import 'stock_sync_service.dart';
import 'outlet_pricing_sync_service.dart';
import 'warehouse_sync_service.dart';

/// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è protobuf —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
/// 
/// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:
/// 1. getRegionalProducts() - –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞
/// 2. getRegionalStock() - –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞  
/// 3. getOutletPrices() - –∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫
class ProtobufSyncCoordinator {
  static final Logger _logger = Logger('ProtobufSyncCoordinator');
  
  final RegionalSyncService _regionalSyncService;
  final StockSyncService _stockSyncService;
  final OutletPricingSyncService _outletPricingSyncService;
  final WarehouseSyncService _warehouseSyncService;
  final ProductRepository _productRepository;
  final StockItemRepository _stockItemRepository;
  final WarehouseRepository _warehouseRepository;
  final CategoryTreeCacheService _categoryTreeCacheService;
  
  ProtobufSyncCoordinator({
    required RegionalSyncService regionalSyncService,
    required StockSyncService stockSyncService,
    required OutletPricingSyncService outletPricingSyncService,
    required WarehouseSyncService warehouseSyncService,
    required ProtobufSyncRepository syncRepository,
    required ProductRepository productRepository,
    required StockItemRepository stockItemRepository,
    required WarehouseRepository warehouseRepository,
  required CategoryTreeCacheService categoryTreeCacheService,
  })  : _regionalSyncService = regionalSyncService,
        _stockSyncService = stockSyncService,
        _outletPricingSyncService = outletPricingSyncService,
        _warehouseSyncService = warehouseSyncService,
        _productRepository = productRepository,
    _stockItemRepository = stockItemRepository,
    _warehouseRepository = warehouseRepository,
    _categoryTreeCacheService = categoryTreeCacheService;

  /// –ü—Ä–æ—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
  Future<Map<String, dynamic>> performFullSync(
    String regionCode, {
    List<String>? outletVendorIds,
    Function(String stage, double progress)? onProgress,
  }) async {
    _logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º protobuf —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: $regionCode');
    
    final result = <String, dynamic>{
      'success': false,
      'products_synced': 0,
      'stock_synced': 0,
      'prices_synced': 0,
      'warehouses_synced': 0,
      'errors': <String>[],
    };
    
    try {
      // 0. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤
      _logger.info('üè≠ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–ª–∞–¥–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞...');
      onProgress?.call('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–ª–∞–¥–æ–≤', 0.1);

      final warehouseResponse = await _warehouseSyncService.fetchWarehouses(regionVendorId: regionCode);
      final warehouses = WarehouseProtobufConverter.fromProtoList(warehouseResponse.warehouses);

      final clearResult = await _warehouseRepository.clearWarehousesByRegion(regionCode);
      if (clearResult.isLeft()) {
        final failure = clearResult.fold((f) => f, (r) => null)!;
        _logger.warning('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∫–ª–∞–¥–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞: ${failure.message}');
        result['errors'].add(failure.message);
      }

      final saveWarehousesResult = await _warehouseRepository.saveWarehouses(warehouses);
      saveWarehousesResult.fold(
        (failure) {
          _logger.severe('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: ${failure.message}');
          result['errors'].add(failure.message);
        },
        (_) {
          result['warehouses_synced'] = warehouses.length;
          _logger.info('üè≠ –°–∫–ª–∞–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${warehouses.length}');
        },
      );

      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞
      _logger.info('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞...');
      onProgress?.call('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', 0.2);
      
  final regionalResponse = await _regionalSyncService.getRegionalProducts(regionCode);
      final products = ProductProtobufConverter.fromProtobufList(regionalResponse.products);
      
      final saveResult = await _productRepository.saveProducts(products);
      if (saveResult.isLeft()) {
        final failure = saveResult.fold((f) => f, (r) => null)!;
        _logger.warning('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${failure.message}');
        result['errors'].add(failure.message);
        result['success'] = false;
        return result;
      } else {
        result['products_synced'] = products.length;
        _logger.info('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
      }

      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      _logger.info('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤...');
      onProgress?.call('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤', 0.5);
      
  final stockResponse = await _stockSyncService.getRegionalStock(regionCode);
      _logger.info('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è ${stockResponse.stockItems.length} —Ç–æ–≤–∞—Ä–æ–≤');

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º protobuf –≤ domain entities –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      if (stockResponse.stockItems.isNotEmpty) {
        _logger.info('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        onProgress?.call('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤', 0.6);
        
        final stockItems = StockItemProtobufConverter.fromProtobufList(stockResponse.stockItems);
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        _logger.info('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:');
        _logger.info('  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${stockItems.length}');
        
        final itemsWithStock = stockItems.where((item) => item.stock > 0).toList();
        _logger.info('  –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å stock > 0: ${itemsWithStock.length}');
        
        if (stockItems.isNotEmpty) {
          final firstItem = stockItems.first;
          _logger.info('  –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: productCode=${firstItem.productCode}, stock=${firstItem.stock}, publicStock="${firstItem.publicStock}"');
        }
        
        if (itemsWithStock.isNotEmpty) {
          final firstWithStock = itemsWithStock.first;
          _logger.info('  –ü–µ—Ä–≤—ã–π —Å stock > 0: productCode=${firstWithStock.productCode}, stock=${firstWithStock.stock}, publicStock="${firstWithStock.publicStock}"');
        }
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –µ—Å—Ç—å –≤ –ë–î
        final existingProductsResult = await _productRepository.getAllProducts();
        existingProductsResult.fold(
          (failure) => _logger.warning('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏'),
          (existingProducts) {
            final existingProductCodes = existingProducts.map((p) => p.code).toSet();
            final incomingProductCodes = stockItems.map((s) => s.productCode).toSet();
            final matchingCodes = existingProductCodes.intersection(incomingProductCodes);
            
            _logger.info('üîç –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ë–î: ${existingProducts.length}');
            _logger.info('üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö: ${incomingProductCodes.length}');
            _logger.info('üîç –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∫–æ–¥–æ–≤: ${matchingCodes.length}');
            
            if (matchingCodes.isEmpty) {
              _logger.severe('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î!');
              _logger.info('üìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤ –≤ –ë–î: ${existingProductCodes.take(10).join(", ")}');
              _logger.info('üìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö: ${incomingProductCodes.take(10).join(", ")}');
            }
          },
        );
        
        final saveResult = await _stockItemRepository.saveStockItems(stockItems);

        if (saveResult.isLeft()) {
          Failure? failure;
          saveResult.fold((f) {
            failure = f;
            return null;
          }, (_) => null);

          failure ??= GeneralFailure('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤');
          _logger.severe('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: ${failure!.message}');
          throw Exception('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: ${failure!.message}');
        }

        _logger.info('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${stockItems.length} –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (stockItems.isNotEmpty) {
          final firstItem = stockItems.first;
          _logger.info('üìä –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ StockItem: –ø—Ä–æ–¥—É–∫—Ç=${firstItem.productCode}, —Å–∫–ª–∞–¥=${firstItem.warehouseId}, –æ—Å—Ç–∞—Ç–æ–∫=${firstItem.stock}, —Ü–µ–Ω–∞=${firstItem.defaultPrice}');
        }

        result['stock_synced'] = stockItems.length;

        final cacheResult = await _categoryTreeCacheService.refreshRegion(regionCode);
        if (cacheResult.isLeft()) {
          Failure? failure;
          cacheResult.fold((f) {
            failure = f;
            return null;
          }, (_) => null);

          failure ??= GeneralFailure('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
          _logger.warning('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ $regionCode: ${failure!.message}');
        } else {
          _logger.info('üå≤ –î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ $regionCode');
        }
      }

      // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
      if (outletVendorIds != null && outletVendorIds.isNotEmpty) {
        _logger.info('üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫...');
        
        int totalPrices = 0;
        for (int i = 0; i < outletVendorIds.length; i++) {
          final vendorId = outletVendorIds[i];
          onProgress?.call('–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω —Ç–æ—á–∫–∏ ${i + 1}/${outletVendorIds.length}', 0.7 + 0.2 * (i / outletVendorIds.length));
          
          try {
            final priceResponse = await _outletPricingSyncService.getOutletPrices(vendorId);
            totalPrices += priceResponse.products.length;
          } catch (e) {
            _logger.warning('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –¥–ª—è $vendorId: $e');
            result['errors'].add('–û—à–∏–±–∫–∞ —Ü–µ–Ω –¥–ª—è $vendorId: $e');
          }
        }
        
        result['prices_synced'] = totalPrices;
        _logger.info('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è $totalPrices —Ç–æ–≤–∞—Ä–æ–≤');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  // await _syncRepository.updateLastSync(regionCode, DateTime.now());
      
      result['success'] = true;
      onProgress?.call('–ó–∞–≤–µ—Ä—à–µ–Ω–æ', 1.0);
      
      _logger.info('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return result;
      
    } catch (e, stackTrace) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e', e, stackTrace);
      result['success'] = false;
      result['errors'].add('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $e');
      rethrow;
    }
  }

  /// –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  Future<Map<String, dynamic>> syncProductsOnly(String regionCode) async {
    _logger.info('üì¶ –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è $regionCode');
    
    final result = <String, dynamic>{
      'success': false,
      'products_synced': 0,
      'errors': <String>[],
    };
    
    try {
  final response = await _regionalSyncService.getRegionalProducts(regionCode);
      final products = ProductProtobufConverter.fromProtobufList(response.products);
      
      final saveResult = await _productRepository.saveProducts(products);
      if (saveResult.isLeft()) {
        final failure = saveResult.fold((f) => f, (r) => null)!;
        _logger.warning('‚ö†Ô∏è –û—à–∏–±–∫–∞: ${failure.message}');
        result['success'] = false;
        result['errors'].add(failure.message);
      } else {
        result['products_synced'] = products.length;
        result['success'] = true;
        _logger.info('‚úÖ –ë—ã—Å—Ç—Ä–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
      }
      
      return result;
      
    } catch (e, stackTrace) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e', e, stackTrace);
      result['success'] = false;
      result['errors'].add('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<Map<String, dynamic>> getSyncStats() async {
    try {
      final stats = <String, dynamic>{};
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      final productResult = await _productRepository.getAllProducts();
      productResult.fold(
        (failure) => stats['products'] = '–û—à–∏–±–∫–∞: ${failure.message}',
        (products) => stats['products'] = products.length,
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ stock items
      final stockResult = await _stockItemRepository.getAvailableStockItems();
      stockResult.fold(
        (failure) => stats['stock_items'] = '–û—à–∏–±–∫–∞: ${failure.message}',
        (stockItems) {
          stats['stock_items'] = stockItems.length;
          stats['stock_items_with_stock'] = stockItems.where((item) => item.stock > 0).length;
          
          if (stockItems.isNotEmpty) {
            final sampleItem = stockItems.first;
            stats['sample_stock_item'] = {
              'product_code': sampleItem.productCode,
              'warehouse_id': sampleItem.warehouseId,
              'warehouse_name': sampleItem.warehouseName,
              'stock': sampleItem.stock,
              'price': sampleItem.defaultPrice,
            };
          }
        },
      );

      final warehouseResult = await _warehouseRepository.getAllWarehouses();
      warehouseResult.fold(
        (failure) => stats['warehouses'] = '–û—à–∏–±–∫–∞: ${failure.message}',
        (warehouses) => stats['warehouses'] = warehouses.length,
      );
      
      return stats;
    } catch (e) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      return {'error': e.toString()};
    }
  }
}