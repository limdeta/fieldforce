// lib/features/shop/data/services/sync_isolate_worker.dart

import 'dart:async';
import 'dart:isolate';
import 'dart:convert';
import 'dart:io';
import 'dart:developer' as developer;
import 'package:http/io_client.dart';

import 'sync_messages.dart';
import 'product_parsing_service.dart';
import '../../domain/entities/category.dart' as cat;


/// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è worker –∏–∑–æ–ª—è—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
/// 
/// –≠—Ç–æ—Ç –∏–∑–æ–ª—è—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ,
/// –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –≥–ª–∞–≤–Ω—ã–π UI –ø–æ—Ç–æ–∫. –û–Ω –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–ª—è—Ç–∞
/// –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. 
void syncWorkerEntryPoint(SendPort sendPortToMain) async {
  developer.log('üöÄ Sync Worker: –ò–∑–æ–ª—è—Ç –∑–∞–ø—É—â–µ–Ω', name: 'SyncWorker');

  final receivePortInWorker = ReceivePort();
  
  sendPortToMain.send(receivePortInWorker.sendPort);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ–± —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  sendPortToMain.send(SyncMessage(
    type: SyncResponses.initialized,
    data: {'timestamp': DateTime.now().millisecondsSinceEpoch},
  ).toJson());

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä worker'–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
  final worker = SyncWorker(sendPortToMain);
  
  // –°–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–ª—è—Ç–∞
  await for (final message in receivePortInWorker) {
    try {
      if (message is Map<String, dynamic>) {
        final syncMessage = SyncMessage.fromJson(message);
        await worker.handleCommand(syncMessage);
        
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        if (syncMessage.type == SyncCommands.shutdown) {
          break;
        }
      }
    } catch (e, stackTrace) {
      developer.log(
        '‚ùå Sync Worker: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e',
        name: 'SyncWorker',
        error: e,
        stackTrace: stackTrace,
      );
      
      sendPortToMain.send(SyncMessage(
        type: SyncResponses.error,
        data: {
          'syncType': 'worker',
          'error': e.toString(),
          'stackTrace': stackTrace.toString(),
        },
      ).toJson());
    }
  }

  developer.log('üëã Sync Worker: –ò–∑–æ–ª—è—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É', name: 'SyncWorker');
  receivePortInWorker.close();
}

/// –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ worker –∏–∑–æ–ª—è—Ç–µ
class SyncWorker {
  final SendPort _sendPortToMain;
  final ProductParsingService _parsingService = ProductParsingService();
  
  Timer? _heartbeatTimer;
  bool _isPaused = false;
  bool _isCancelled = false;

  SyncWorker(this._sendPortToMain) {
    _startHeartbeat();
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É heartbeat —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  void _startHeartbeat() {
    _heartbeatTimer = Timer.periodic(const Duration(seconds: 5), (timer) {
      _sendPortToMain.send(SyncMessage(
        type: SyncResponses.heartbeat,
        data: {
          'timestamp': DateTime.now().millisecondsSinceEpoch,
          'isPaused': _isPaused,
          'isCancelled': _isCancelled,
        },
      ).toJson());
    });
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–ª—è—Ç–∞
  Future<void> handleCommand(SyncMessage message) async {
    developer.log('üì® Sync Worker: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ${message.type}', name: 'SyncWorker');

    switch (message.type) {
      case SyncCommands.startProductSync:
        await _handleProductSync(message.data);
        break;
        
      case SyncCommands.startCategorySync:
        await _handleCategorySync(message.data);
        break;
        
      case SyncCommands.pauseSync:
        _handlePause();
        break;
        
      case SyncCommands.resumeSync:
        _handleResume();
        break;
        
      case SyncCommands.cancelSync:
        _handleCancel();
        break;
        
      case SyncCommands.shutdown:
        _handleShutdown();
        break;
        
      default:
        developer.log('‚ö†Ô∏è Sync Worker: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ${message.type}', name: 'SyncWorker');
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  Future<void> _handleProductSync(Map<String, dynamic> data) async {
    if (_isCancelled) return;

    final startTime = DateTime.now();
    developer.log('üõçÔ∏è Sync Worker: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤', name: 'SyncWorker');

    try {
      final configData = data['config'] as Map<String, dynamic>;
      final apiUrl = data['apiUrl'] as String;
      final sessionHeaders = data['sessionHeaders'] as Map<String, dynamic>?;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      const int pageSize = 100; // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ 100 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ —Ä–∞–∑
      int currentOffset = 0;
      int totalImported = 0;
      int? totalCount;
      
      _sendProgress('products', 1, 100, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
      
      // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è totalCount
      final firstPageConfig = Map<String, dynamic>.from(configData);
      firstPageConfig['limit'] = pageSize;
      firstPageConfig['offset'] = currentOffset;
      
      final firstResponse = await _makeProductApiRequest(apiUrl, firstPageConfig, sessionHeaders);
      
      if (_isCancelled) return;
      
      // –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å totalCount
      final firstApiResponse = _parsingService.parseProductApiResponse(firstResponse);
      totalCount = firstApiResponse.totalCount;
      
      developer.log('ÔøΩ Sync Worker: –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É: $totalCount', name: 'SyncWorker');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      final firstPageJson = json.decode(firstResponse) as Map<String, dynamic>;
      if (!firstPageJson.containsKey('data')) {
        throw Exception('–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è "data". –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: ${firstPageJson.keys}');
      }
      
      final firstPageProducts = firstPageJson['data'] as List<dynamic>;
      totalImported += firstPageProducts.length;
      
      developer.log('ÔøΩ Worker: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (${firstPageProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤)', name: 'SyncWorker');
      
      _sendPortToMain.send(SyncMessage(
        type: 'save_products',
        data: {
          'apiItems': firstPageProducts,
        },
      ).toJson());
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      final progressPercent = ((totalImported / totalCount) * 100).round();
      _sendProgress('products', progressPercent, 100, '–ó–∞–≥—Ä—É–∂–µ–Ω–æ $totalImported –∏–∑ $totalCount –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
      
      currentOffset += pageSize;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      while (currentOffset < totalCount && !_isCancelled) {
        developer.log('üìÑ Sync Worker: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å offset=$currentOffset', name: 'SyncWorker');
        
        final pageConfig = Map<String, dynamic>.from(configData);
        pageConfig['limit'] = pageSize;
        pageConfig['offset'] = currentOffset;
        
        final pageResponse = await _makeProductApiRequest(apiUrl, pageConfig, sessionHeaders);
        
        if (_isCancelled) return;
        
        final pageJsonData = json.decode(pageResponse) as Map<String, dynamic>;
        final pageProducts = pageJsonData['data'] as List<dynamic>;
        
        if (pageProducts.isEmpty) {
          developer.log('üìÑ Sync Worker: –ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É', name: 'SyncWorker');
          break;
        }
        
        totalImported += pageProducts.length;
        
        developer.log('üì§ Worker: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É (${pageProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤)', name: 'SyncWorker');
        
        _sendPortToMain.send(SyncMessage(
          type: 'save_products',
          data: {
            'apiItems': pageProducts,
          },
        ).toJson());
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        final progressPercent = ((totalImported / totalCount) * 100).round();
        _sendProgress('products', progressPercent, 100, '–ó–∞–≥—Ä—É–∂–µ–Ω–æ $totalImported –∏–∑ $totalCount –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
        
        currentOffset += pageSize;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        await Future.delayed(const Duration(milliseconds: 100));
      }
      
      if (_isCancelled) return;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      final duration = DateTime.now().difference(startTime);
      _sendPortToMain.send(createResultMessage(
        syncType: 'products',
        success: true,
        successCount: totalImported,
        durationMs: duration.inMilliseconds,
      ).toJson());

      developer.log('‚úÖ Sync Worker: –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: $totalImported/$totalCount –ø—Ä–æ–¥—É–∫—Ç–æ–≤', name: 'SyncWorker');

    } catch (e, stackTrace) {
      developer.log(
        '‚ùå Sync Worker: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e',
        name: 'SyncWorker',
        error: e,
        stackTrace: stackTrace,
      );
      
      _sendPortToMain.send(createErrorMessage(
        syncType: 'products',
        error: e.toString(),
        stackTrace: stackTrace.toString(),
      ).toJson());
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π  
  Future<void> _handleCategorySync(Map<String, dynamic> data) async {
    if (_isCancelled) return;

    final startTime = DateTime.now();
    developer.log('üìÇ Sync Worker: –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π', name: 'SyncWorker');

    try {
      final configData = data['config'] as Map<String, dynamic>;
      final apiUrl = data['apiUrl'] as String;
      final sessionHeaders = data['sessionHeaders'] as Map<String, dynamic>?;

      developer.log('üîß Categories config: $configData', name: 'SyncWorker');
      developer.log('üåê Categories API URL: $apiUrl', name: 'SyncWorker');
      developer.log('üîí Categories session headers: ${sessionHeaders?.keys}', name: 'SyncWorker');

      _sendProgress('categories', 1, 2, '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
      
      final response = await _makeCategoryApiRequest(apiUrl, configData, sessionHeaders);
      developer.log('üì• Categories response length: ${response.length} chars', name: 'SyncWorker');
      
      if (_isCancelled) return;
      
      _sendProgress('categories', 2, 2, '–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
      
      final categories = _parseCategoriesFromJson(response);
      developer.log('üìÇ Parsed categories count: ${categories.length}', name: 'SyncWorker');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      final duration = DateTime.now().difference(startTime);
      _sendPortToMain.send(createResultMessage(
        syncType: 'categories',
        success: true,
        successCount: categories.length,
        durationMs: duration.inMilliseconds,
      ).toJson());

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      _sendPortToMain.send(SyncMessage(
        type: 'save_categories',
        data: {
          'categories': categories.map((cat) => _categoryToJson(cat)).toList(),
        },
      ).toJson());

      developer.log('‚úÖ Sync Worker: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞', name: 'SyncWorker');

    } catch (e, stackTrace) {
      developer.log(
        '‚ùå Sync Worker: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e',
        name: 'SyncWorker',
        error: e,
        stackTrace: stackTrace,
      );
      
      _sendPortToMain.send(createErrorMessage(
        syncType: 'categories',
        error: e.toString(),
        stackTrace: stackTrace.toString(),
      ).toJson());
    }
  }

  Future<String> _makeProductApiRequest(
    String apiUrl,
    Map<String, dynamic> configData,
    Map<String, dynamic>? sessionHeaders,
  ) async {
    if (apiUrl.isEmpty) {
      throw Exception('URL API –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    final ioClient = HttpClient();
    ioClient.badCertificateCallback = (X509Certificate cert, String host, int port) => true;
    final client = IOClient(ioClient);

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      final queryParams = <String, String>{};
      
      if (configData.containsKey('limit')) {
        queryParams['limit'] = configData['limit'].toString();
      }
      if (configData.containsKey('offset')) {
        queryParams['offset'] = configData['offset'].toString();
      }
      if (configData.containsKey('categories') && configData['categories'] != null) {
        queryParams['categories'] = configData['categories'].toString();
      }
      
      final uri = Uri.parse(apiUrl).replace(queryParameters: queryParams);
      developer.log('üîß Products: –ü–æ—Å—Ç—Ä–æ–µ–Ω URI —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: $queryParams', name: 'SyncWorker');
      
      final headers = <String, String>{
        'Content-Type': 'application/json',
        'User-Agent': 'FieldForce-Mobile/1.0',
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏ (—É–∂–µ –≥–æ—Ç–æ–≤—ã–µ –æ—Ç SessionManager)
      if (sessionHeaders != null && sessionHeaders.isNotEmpty) {
        sessionHeaders.forEach((key, value) {
          headers[key] = value.toString();
        });
        developer.log('üîë Sync Worker: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: $sessionHeaders', name: 'SyncWorker');
      } else {
        developer.log('‚ö†Ô∏è Sync Worker: –°–ï–°–°–ò–Ø –û–¢–°–£–¢–°–¢–í–£–ï–¢!', name: 'SyncWorker');
      }

      developer.log('üåê Sync Worker: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ $uri', name: 'SyncWorker');
      developer.log('üìã Sync Worker: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: $headers', name: 'SyncWorker');
      
      final response = await client.get(uri, headers: headers);
      
      if (response.statusCode != 200) {
        throw Exception('HTTP ${response.statusCode}: ${response.reasonPhrase}');
      }

      return response.body;
    } finally {
      client.close();
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  Future<String> _makeCategoryApiRequest(
    String apiUrl,
    Map<String, dynamic> configData,
    Map<String, dynamic>? sessionHeaders,
  ) async {
    if (apiUrl.isEmpty) {
      throw Exception('URL API –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    final ioClient = HttpClient();
    ioClient.badCertificateCallback = (X509Certificate cert, String host, int port) => true;
    final client = IOClient(ioClient);

    try {
      final uri = Uri.parse(apiUrl);
      developer.log('üîß Categories: –ü–æ—Å—Ç—Ä–æ–µ–Ω URI –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: $uri', name: 'SyncWorker');
      
      final headers = <String, String>{
        'Content-Type': 'application/json',
        'User-Agent': 'FieldForce-Mobile/1.0',
      };

      if (sessionHeaders != null && sessionHeaders.isNotEmpty) {
        sessionHeaders.forEach((key, value) {
          headers[key] = value.toString();
        });
      }

      developer.log('üåê Categories: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ $uri', name: 'SyncWorker');
      developer.log('üîí Categories: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${headers.keys}', name: 'SyncWorker');
      
      final response = await client.get(uri, headers: headers);
      
      developer.log('üìä Categories: HTTP ${response.statusCode} - ${response.reasonPhrase}', name: 'SyncWorker');
      
      if (response.statusCode != 200) {
        throw Exception('HTTP ${response.statusCode}: ${response.reasonPhrase}');
      }

      return response.body;
    } finally {
      client.close();
    }
  }

  /// –ü–∞—Ä—Å–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞ API
  List<cat.Category> _parseCategoriesFromJson(String jsonString) {
    try {
      final jsonData = jsonDecode(jsonString) as List<dynamic>;
      return jsonData.map((item) => cat.Category.fromJson(item as Map<String, dynamic>)).toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e');
    }
  }



  /// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç Category –≤ JSON –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–∂–¥—É –∏–∑–æ–ª—è—Ç–∞–º–∏
  Map<String, dynamic> _categoryToJson(cat.Category category) {
    return {
      'id': category.id,
      'name': category.name,
      'lft': category.lft,
      'lvl': category.lvl,
      'rgt': category.rgt,
      'description': category.description,
      'query': category.query,
      'count': category.count,
      'children': category.children.map((child) => _categoryToJson(child)).toList(),
    };
  }

  void _handlePause() {
    _isPaused = true;
    developer.log('‚è∏Ô∏è Sync Worker: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', name: 'SyncWorker');
    _sendPortToMain.send(SyncMessage(type: SyncResponses.paused, data: {}).toJson());
  }

  void _handleResume() {
    _isPaused = false;
    developer.log('‚ñ∂Ô∏è Sync Worker: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞', name: 'SyncWorker');
    _sendPortToMain.send(SyncMessage(type: SyncResponses.resumed, data: {}).toJson());
  }

  void _handleCancel() {
    _isCancelled = true;
    developer.log('üõë Sync Worker: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', name: 'SyncWorker');
    _sendPortToMain.send(SyncMessage(type: SyncResponses.cancelled, data: {}).toJson());
  }

  void _handleShutdown() {
    _heartbeatTimer?.cancel();
    developer.log('üîå Sync Worker: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', name: 'SyncWorker');
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
  void _sendProgress(String syncType, int current, int total, String status) {
    _sendPortToMain.send(createProgressMessage(
      syncType: syncType,
      current: current,
      total: total,
      status: status,
    ).toJson());
  }
}