// lib/features/shop/data/services/isolate_sync_manager.dart

import 'dart:async';
import 'dart:isolate';
import 'package:logging/logging.dart';

import 'sync_messages.dart';
import 'sync_isolate_worker.dart';
import '../../../../shared/models/sync_config.dart';
import '../../../../shared/models/sync_result.dart';
import '../../../../shared/models/sync_progress.dart';
import '../../domain/repositories/product_repository.dart';
import '../../domain/repositories/stock_item_repository.dart';
import '../../domain/repositories/category_repository.dart';
import '../../domain/entities/category.dart' as cat;
import '../../domain/entities/product.dart';
import '../../domain/entities/stock_item.dart';
import '../../data/mappers/product_api_models.dart';
import 'product_parsing_service.dart';
import '../../../../app/services/session_manager.dart';

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç—ã
/// 
/// –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:
/// 1. –ó–∞–ø—É—Å–∫–∞–µ—Ç worker –∏–∑–æ–ª—è—Ç—ã –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
/// 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –º–µ–∂–¥—É –≥–ª–∞–≤–Ω—ã–º –∏ worker –∏–∑–æ–ª—è—Ç–∞–º–∏
/// 3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
/// 4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º (–ø–∞—É–∑–∞/–æ—Ç–º–µ–Ω–∞/–ø—Ä–æ–≥—Ä–µ—Å—Å)
class IsolateSyncManager {
  static final Logger _logger = Logger('IsolateSyncManager');
  
  final ProductRepository _productRepository;
  final StockItemRepository _stockItemRepository;
  final CategoryRepository _categoryRepository;
  final String _productsApiUrl;
  final String _categoriesApiUrl;
  final SessionManager _sessionManager;

  // State –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–ª—è—Ç–æ–º
  Isolate? _workerIsolate;
  SendPort? _sendPortToWorker;
  late ReceivePort _receivePortInMain;
  
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  final StreamController<SyncProgress> _progressController = StreamController<SyncProgress>.broadcast();
  final StreamController<SyncResult> _resultController = StreamController<SyncResult>.broadcast();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  bool _isRunning = false;
  String? _currentSyncType;
  
  IsolateSyncManager({
    required ProductRepository productRepository,
    required StockItemRepository stockItemRepository,
    required CategoryRepository categoryRepository,
    required String productsApiUrl,
    required String categoriesApiUrl,
    required SessionManager sessionManager,
  }) : _productRepository = productRepository,
       _stockItemRepository = stockItemRepository,
       _categoryRepository = categoryRepository,
       _productsApiUrl = productsApiUrl,
       _categoriesApiUrl = categoriesApiUrl,
       _sessionManager = sessionManager;

  // helper removed ‚Äî keep logs concise

  /// Stream —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Stream<SyncProgress> get progressStream => _progressController.stream;

  /// Stream —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏  
  Stream<SyncResult> get resultStream => _resultController.stream;

  /// –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  bool get isRunning => _isRunning;
  String? get currentSyncType => _currentSyncType;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç worker –∏–∑–æ–ª—è—Ç
  Future<void> initialize() async {
    if (_workerIsolate != null) {
      _logger.warning('Worker –∏–∑–æ–ª—è—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    _logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è worker –∏–∑–æ–ª—è—Ç–∞...');
    
    try {
      _receivePortInMain = ReceivePort();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º worker –∏–∑–æ–ª—è—Ç
      _workerIsolate = await Isolate.spawn(
        syncWorkerEntryPoint,
        _receivePortInMain.sendPort,
        debugName: 'SyncWorkerIsolate',
      );
      
      // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ worker –∏–∑–æ–ª—è—Ç–∞
      final completer = Completer<void>();
      late StreamSubscription subscription;
      
      subscription = _receivePortInMain.listen((message) {
        try {
          if (message is SendPort) {
            // –ü–æ–ª—É—á–∏–ª–∏ SendPort –æ—Ç worker –∏–∑–æ–ª—è—Ç–∞
            _sendPortToWorker = message;
            _logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω SendPort –æ—Ç worker –∏–∑–æ–ª—è—Ç–∞');
            return;
          }
          
          if (message is Map<String, dynamic>) {
            final syncMessage = SyncMessage.fromJson(message);
            
            if (syncMessage.type == SyncResponses.initialized) {
              _logger.info('‚úÖ Worker –∏–∑–æ–ª—è—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
              completer.complete();
              return;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            _handleWorkerMessage(syncMessage);
          }
        } catch (e, stackTrace) {
          _logger.severe('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç worker –∏–∑–æ–ª—è—Ç–∞', e, stackTrace);
          if (!completer.isCompleted) {
            completer.completeError(e);
          }
        }
      });
      
      // –û–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      await completer.future.timeout(
        const Duration(seconds: 10),
        onTimeout: () {
          subscription.cancel();
          throw TimeoutException('Worker –∏–∑–æ–ª—è—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥');
        },
      );
      
      _logger.info('üéâ IsolateSyncManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (e, stackTrace) {
      _logger.severe('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ worker –∏–∑–æ–ª—è—Ç–∞', e, stackTrace);
      await dispose();
      rethrow;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ worker –∏–∑–æ–ª—è—Ç
  Future<SyncResult> syncProducts(SyncConfig config) async {
    if (!_isRunning) {
      _isRunning = true;
      _currentSyncType = 'products';
    }

    try {
      await _ensureInitialized();
      
      _logger.info('üõçÔ∏è –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É worker –∏–∑–æ–ª—è—Ç—É
      final command = SyncMessage(
        type: SyncCommands.startProductSync,
        data: {
          'config': _syncConfigToJson(config),
          'apiUrl': _productsApiUrl,
          'sessionHeaders': _sessionManager.getSessionHeaders(),
        },
      );
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ worker (session headers –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  _sendPortToWorker!.send(command.toJson());
      
      // –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      final resultCompleter = Completer<SyncResult>();
      late StreamSubscription subscription;
      
      subscription = _resultController.stream.listen((result) {
        if (result.type == 'products') {
          subscription.cancel();
          resultCompleter.complete(result);
        }
      });
      
      final result = await resultCompleter.future.timeout(
        const Duration(minutes: 10),
        onTimeout: () {
          subscription.cancel();
          return SyncResult.withErrors(
            type: 'products',
            successCount: 0,
            errorCount: 1,
            errors: ['–¢–∞–π–º–∞—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'],
            duration: const Duration(minutes: 10),
            startTime: DateTime.now().subtract(const Duration(minutes: 10)),
          );
        },
      );
      
      return result;
      
    } catch (e, stackTrace) {
      _logger.severe('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', e, stackTrace);
      
      return SyncResult.withErrors(
        type: 'products',
        successCount: 0,
        errorCount: 1,
        errors: [e.toString()],
        duration: Duration.zero,
        startTime: DateTime.now(),
      );
    } finally {
      _isRunning = false;
      _currentSyncType = null;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ worker –∏–∑–æ–ª—è—Ç
  Future<SyncResult> syncCategories(SyncConfig config) async {
    if (!_isRunning) {
      _isRunning = true;
      _currentSyncType = 'categories';
    }

    try {
      await _ensureInitialized();
      
      _logger.info('üìÇ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∏–∑–æ–ª—è—Ç');
      
      final command = SyncMessage(
        type: SyncCommands.startCategorySync,
        data: {
          'config': _syncConfigToJson(config),
          'apiUrl': _categoriesApiUrl,
          'sessionHeaders': _sessionManager.getSessionHeaders(),
        },
      );
      
  _logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ worker: ${command.type}');
      
      _sendPortToWorker!.send(command.toJson());
      
      final resultCompleter = Completer<SyncResult>();
      late StreamSubscription subscription;
      
      subscription = _resultController.stream.listen((result) {
        if (result.type == 'categories') {
          subscription.cancel();
          resultCompleter.complete(result);
        }
      });
      
      final result = await resultCompleter.future.timeout(
        const Duration(minutes: 5),
        onTimeout: () {
          subscription.cancel();
          return SyncResult.withErrors(
            type: 'categories',
            successCount: 0,
            errorCount: 1,
            errors: ['–¢–∞–π–º–∞—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π'],
            duration: const Duration(minutes: 5),
            startTime: DateTime.now().subtract(const Duration(minutes: 5)),
          );
        },
      );
      
      return result;
      
    } catch (e, stackTrace) {
      _logger.severe('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', e, stackTrace);
      
      return SyncResult.withErrors(
        type: 'categories',
        successCount: 0,
        errorCount: 1,
        errors: [e.toString()],
        duration: Duration.zero,
        startTime: DateTime.now(),
      );
    } finally {
      _isRunning = false;
      _currentSyncType = null;
    }
  }

  /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  Future<void> pauseSync() async {
    if (_sendPortToWorker != null) {
      final command = SyncMessage(type: SyncCommands.pauseSync, data: {});
      _sendPortToWorker!.send(command.toJson());
      _logger.info('‚è∏Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–∞—É–∑—ã');
    }
  }

  /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  Future<void> resumeSync() async {
    if (_sendPortToWorker != null) {
      final command = SyncMessage(type: SyncCommands.resumeSync, data: {});
      _sendPortToWorker!.send(command.toJson());
      _logger.info('‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
  }

  /// –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  Future<void> cancelSync() async {
    if (_sendPortToWorker != null) {
      final command = SyncMessage(type: SyncCommands.cancelSync, data: {});
      _sendPortToWorker!.send(command.toJson());
      _logger.info('üõë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã');
    }
    
    _isRunning = false;
    _currentSyncType = null;
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç worker –∏–∑–æ–ª—è—Ç
  Future<void> dispose() async {
    _logger.info('üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ IsolateSyncManager...');
    
    if (_sendPortToWorker != null) {
      try {
        final command = SyncMessage(type: SyncCommands.shutdown, data: {});
        _sendPortToWorker!.send(command.toJson());
        _logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è worker –∏–∑–æ–ª—è—Ç—É');
      } catch (e) {
        _logger.warning('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $e');
      }
    }
    
    // –î–∞–µ–º –≤—Ä–µ–º—è worker –∏–∑–æ–ª—è—Ç—É –Ω–∞ graceful shutdown
    await Future.delayed(const Duration(milliseconds: 500));
    
    _workerIsolate?.kill(priority: Isolate.immediate);
    _workerIsolate = null;
    _sendPortToWorker = null;
    
    if (!_receivePortInMain.isBroadcast) {
      _receivePortInMain.close();
    }
    
    await _progressController.close();
    await _resultController.close();
    
    _isRunning = false;
    _currentSyncType = null;
    
    _logger.info('‚úÖ IsolateSyncManager –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç
  Future<void> _ensureInitialized() async {
    if (_workerIsolate == null || _sendPortToWorker == null) {
      await initialize();
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç worker –∏–∑–æ–ª—è—Ç–∞
  void _handleWorkerMessage(SyncMessage message) {
    _logger.fine('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç worker –∏–∑–æ–ª—è—Ç–∞: ${message.type}');
    
    switch (message.type) {
      case SyncResponses.progress:
        final progress = _syncProgressFromJson(message.data);
        _progressController.add(progress);
        break;
        
      case 'result':
      case SyncResponses.completed:
        final result = _syncResultFromJson(message.data);
        _resultController.add(result);
        _isRunning = false;
        _currentSyncType = null;
        _logger.info('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        break;
        
      case SyncResponses.error:
        final result = _syncResultFromError(message.data);
        _resultController.add(result);
        break;
        
      case 'save_products':
        _logger.info('üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ save_products, –≤—ã–∑—ã–≤–∞–µ–º _handleSaveProducts');
        _handleSaveProducts(message.data).then((_) {
          _logger.info('‚úÖ _handleSaveProducts –∑–∞–≤–µ—Ä—à–µ–Ω');
        }).catchError((e, st) {
          _logger.severe('‚ùå –û—à–∏–±–∫–∞ –≤ _handleSaveProducts', e, st);
        });
        break;
        
      case 'save_categories':
        _logger.info('üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ save_categories, –≤—ã–∑—ã–≤–∞–µ–º _handleSaveCategories');
        _handleSaveCategories(message.data).then((_) {
          _logger.info('‚úÖ _handleSaveCategories –∑–∞–≤–µ—Ä—à–µ–Ω');
        }).catchError((e, st) {
          _logger.severe('‚ùå –û—à–∏–±–∫–∞ –≤ _handleSaveCategories', e, st);
        });
        break;
        
      case SyncResponses.heartbeat:
        _logger.fine('üíì Heartbeat –æ—Ç worker –∏–∑–æ–ª—è—Ç–∞');
        break;
        
      case SyncResponses.paused:
        _logger.info('‚è∏Ô∏è Worker –∏–∑–æ–ª—è—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        break;
        
      case SyncResponses.resumed:
        _logger.info('‚ñ∂Ô∏è Worker –∏–∑–æ–ª—è—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
        break;
        
      case SyncResponses.cancelled:
        _logger.info('üõë Worker –∏–∑–æ–ª—è—Ç –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é');
        _isRunning = false;
        _currentSyncType = null;
        break;
        
      default:
        _logger.warning('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}');
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ stock items
  Future<void> _handleSaveProducts(Map<String, dynamic> data) async {
    try {
      _logger.fine('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      
      if (!data.containsKey('apiItems')) {
        throw Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á apiItems –≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–ª—è—Ç–∞');
      }
      
      final apiItemsData = data['apiItems'] as List<dynamic>;
      if (apiItemsData.isEmpty) {
        _logger.fine('–°–ø–∏—Å–æ–∫ API —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç');
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ProductParsingService –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
      final parsingService = ProductParsingService();
      final products = <Product>[];
      final allStockItems = <StockItem>[];
      
      for (int i = 0; i < apiItemsData.length; i++) {
        final apiItemData = apiItemsData[i];
        try {
          if (apiItemData == null) {
            throw Exception('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ $i —Ä–∞–≤–Ω—ã null');
          }
          if (apiItemData is! Map<String, dynamic>) {
            throw Exception('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ $i –Ω–µ —è–≤–ª—è—é—Ç—Å—è Map<String, dynamic>');
          }

          final Map<String, dynamic> itemMap = apiItemData;
          final apiItem = ProductApiItem.fromJson(itemMap);

          final result = parsingService.convertApiItemToProduct(apiItem, itemMap);

          products.add(result.product);
          allStockItems.addAll(result.stockItems);

        } catch (e) {
          final productTitle = (apiItemData as Map<String, dynamic>?)?['title'] ?? 'Unknown';
          _logger.warning('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ API —Ç–æ–≤–∞—Ä–∞ $i: $productTitle ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
      _logger.info('üíæ –ì–æ—Ç–æ–≤—ã –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é: ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤, ${allStockItems.length} stock items');
      
      if (products.isNotEmpty) {
        _logger.info('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
        await _productRepository.saveProducts(products);
        _logger.info('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
      } else {
        _logger.warning('‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
      
      if (allStockItems.isNotEmpty) {
        _logger.info('üì¶ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${allStockItems.length} stock items...');
        await _stockItemRepository.saveStockItems(allStockItems);
        _logger.info('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${allStockItems.length} stock items');
      } else {
        _logger.warning('‚ö†Ô∏è –ù–µ—Ç stock items –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
      
      _logger.info('‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑ –∏–∑–æ–ª—è—Ç–∞');
      
    } catch (e, stackTrace) {
      _logger.severe('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∏–∑–æ–ª—è—Ç–∞', e, stackTrace);
      _logger.severe('–¢–∏–ø –æ—à–∏–±–∫–∏: ${e.runtimeType}');
      _logger.severe('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: $e');
      _logger.severe('Stack trace: $stackTrace');
    }
  }

  /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  Future<void> _handleSaveCategories(Map<String, dynamic> data) async {
    try {
      final categoriesData = data['categories'] as List<dynamic>;
      _logger.info('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${categoriesData.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∏–∑–æ–ª—è—Ç–∞...');
      
      final categories = categoriesData
          .map((data) => cat.Category.fromJson(data as Map<String, dynamic>))
          .toList();
      
      final saveResult = await _categoryRepository.saveCategories(categories);
      saveResult.fold(
        (failure) => throw Exception('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${failure.message}'),
        (_) => _logger.info('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑ –∏–∑–æ–ª—è—Ç–∞'),
      );
      
    } catch (e, stackTrace) {
      _logger.severe('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∏–∑–æ–ª—è—Ç–∞', e, stackTrace);
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SyncConfig –≤ JSON –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∏–∑–æ–ª—è—Ç
  Map<String, dynamic> _syncConfigToJson(SyncConfig config) {
    return {
      'source': config.source.toString(),
      'categories': config.categories,
      'limit': config.limit,
      'offset': config.offset,
      'maxConcurrent': config.maxConcurrent,
      'timeout': config.timeout.inMilliseconds,
      'maxRetries': config.maxRetries,
      'retryDelay': config.retryDelay.inMilliseconds,
      'filePath': config.filePath,
    };
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SyncProgress –∏–∑ JSON
  SyncProgress _syncProgressFromJson(Map<String, dynamic> data) {
    return SyncProgress(
      type: data['syncType'] as String,
      current: data['current'] as int,
      total: data['total'] as int,
      status: data['status'] as String,
      percentage: (data['current'] as int) / (data['total'] as int),
    );
  }

  /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SyncResult –∏–∑ JSON
  SyncResult _syncResultFromJson(Map<String, dynamic> data) {
    final success = data['success'] as bool;
    
    if (success) {
      return SyncResult.success(
        type: data['syncType'] as String,
        successCount: data['successCount'] as int,
        duration: Duration(milliseconds: data['durationMs'] as int),
        startTime: DateTime.now().subtract(Duration(milliseconds: data['durationMs'] as int)),
      );
    } else {
      return SyncResult.withErrors(
        type: data['syncType'] as String,
        successCount: 0,
        errorCount: 1,
        errors: [data['error'] as String],
        duration: Duration(milliseconds: data['durationMs'] as int),
        startTime: DateTime.now().subtract(Duration(milliseconds: data['durationMs'] as int)),
      );
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç SyncResult –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  SyncResult _syncResultFromError(Map<String, dynamic> data) {
    return SyncResult.withErrors(
      type: data['syncType'] as String,
      successCount: 0,
      errorCount: 1,
      errors: [data['error'] as String],
      duration: Duration.zero,
      startTime: DateTime.now(),
    );
  }
}