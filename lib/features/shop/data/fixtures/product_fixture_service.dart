// lib/features/shop/data/fixtures/product_fixture_service.dart

import 'package:flutter/services.dart';
import 'package:fieldforce/features/shop/data/services/product_parsing_service.dart';
import 'package:fieldforce/features/shop/domain/entities/product.dart';
import 'package:fieldforce/shared/failures.dart';
import 'package:fieldforce/shared/either.dart';

/// –¢–∏–ø —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
enum ProductFixtureType {
  /// –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (2-3 –ø—Ä–æ–¥—É–∫—Ç–∞)
  compact,
  /// –ü–æ–ª–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–∑ product_example*.json –¥–ª—è dev —Ä–µ–∂–∏–º–∞
  full,
}

class ProductFixtureService {
  final ProductParsingService _parsingService;

  ProductFixtureService(this._parsingService);

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã
  Future<Either<Failure, List<Product>>> loadProducts(ProductFixtureType fixtureType) async {
    try {
      print('üé≠ ProductFixtureService: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ç–∏–ø–∞ $fixtureType');
      switch (fixtureType) {
        case ProductFixtureType.compact:
          return Right(_loadCompactProducts());
        case ProductFixtureType.full:
          final products = await _loadFullProducts();
          print('üé≠ ProductFixtureService: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤');
          return Right(products);
      }
    } catch (e) {
      print('üé≠ ProductFixtureService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e');
      return Left(GeneralFailure('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤: $e'));
    }
  }

  /// –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å 2-3 –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
  List<Product> _loadCompactProducts() {
    final compactJson = '''
[
  {
    "title": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç 1",
    "barcodes": ["123456789"],
    "code": 1001,
    "bcode": 1001,
    "catalogId": 1001,
    "novelty": false,
    "popular": false,
    "isMarked": false,
    "brand": null,
    "manufacturer": null,
    "colorImage": null,
    "defaultImage": null,
    "images": [],
    "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
    "howToUse": null,
    "ingredients": null,
    "series": null,
    "category": {
      "id": 221,
      "name": "–≠–º–∞–ª–∏ –ù–¶",
      "isPublish": true,
      "description": null,
      "query": "types=1163,1220"
    },
    "priceListCategoryId": null,
    "amountInPackage": 1,
    "vendorCode": "TEST001",
    "type": {
      "id": 1163,
      "name": "–ù–∏—Ç—Ä–æ—ç–º–∞–ª—å"
    },
    "categoriesInstock": [
      {
        "id": 221,
        "name": "–≠–º–∞–ª–∏ –ù–¶"
      }
    ],
    "numericCharacteristics": [],
    "stringCharacteristics": [],
    "boolCharacteristics": [],
    "stockItems": [
      {
        "id": 1,
        "publicStock": "10 —à—Ç.",
        "warehouse": {
          "id": 1,
          "name": "–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥",
          "vendorId": "MAIN",
          "isPickUpPoint": false
        },
        "defaultPrice": 10000,
        "discountValue": 0,
        "availablePrice": null,
        "multiplicity": 1,
        "offerPrice": 10000,
        "promotion": null
      }
    ],
    "canBuy": true
  },
  {
    "title": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç 2",
    "barcodes": ["987654321"],
    "code": 1002,
    "bcode": 1002,
    "catalogId": 1002,
    "novelty": false,
    "popular": false,
    "isMarked": false,
    "brand": null,
    "manufacturer": null,
    "colorImage": null,
    "defaultImage": null,
    "images": [],
    "description": "–í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
    "howToUse": null,
    "ingredients": null,
    "series": null,
    "category": {
      "id": 221,
      "name": "–≠–º–∞–ª–∏ –ù–¶",
      "isPublish": true,
      "description": null,
      "query": "types=1163,1220"
    },
    "priceListCategoryId": null,
    "amountInPackage": 1,
    "vendorCode": "TEST002",
    "type": {
      "id": 1163,
      "name": "–ù–∏—Ç—Ä–æ—ç–º–∞–ª—å"
    },
    "categoriesInstock": [
      {
        "id": 221,
        "name": "–≠–º–∞–ª–∏ –ù–¶"
      }
    ],
    "numericCharacteristics": [],
    "stringCharacteristics": [],
    "boolCharacteristics": [],
    "stockItems": [
      {
        "id": 2,
        "publicStock": "5 —à—Ç.",
        "warehouse": {
          "id": 1,
          "name": "–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥",
          "vendorId": "MAIN",
          "isPickUpPoint": false
        },
        "defaultPrice": 15000,
        "discountValue": 0,
        "availablePrice": null,
        "multiplicity": 1,
        "offerPrice": 15000,
        "promotion": null
      }
    ],
    "canBuy": true
  }
]
''';
    return _parsingService.parseProductsFromJsonArray(compactJson);
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ asset —Ñ–∞–π–ª–æ–≤
  Future<List<Product>> _loadFullProducts() async {
    final List<Product> products = [];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ product_example*.json —Ñ–∞–π–ª—ã
    final assetFiles = [
      'assets/fixtures/product_example.json',
      'assets/fixtures/product_example2.json',
      'assets/fixtures/product_example3.json',
      'assets/fixtures/product_example4.json',
    ];

    print('üé≠ ProductFixtureService: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ ${assetFiles.length} —Ñ–∞–π–ª–æ–≤');

    for (final assetPath in assetFiles) {
      try {
        print('üé≠ ProductFixtureService: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª $assetPath');
        final jsonString = await rootBundle.loadString(assetPath);
        final product = _parsingService.parseProduct(jsonString);
        products.add(product);
        print('üé≠ ProductFixtureService: –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ${product.title} (–∫–æ–¥: ${product.code}) –∏–∑ $assetPath');
      } catch (e) {
        print('üé≠ ProductFixtureService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ $assetPath: $e');
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        continue;
      }
    }

    print('üé≠ ProductFixtureService: –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤');
    return products;
  }

  /// –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  List<Product> filterProductsByCategory(List<Product> products, int categoryId) {
    return products.where((product) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      if (product.category?.id == categoryId) {
        return true;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ categoriesInstock
      return product.categoriesInstock.any((category) => category.id == categoryId);
    }).toList();
  }

  /// –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Ç–∏–ø—É
  List<Product> filterProductsByType(List<Product> products, int typeId) {
    return products.where((product) => product.type?.id == typeId).toList();
  }
}