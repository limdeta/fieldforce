import 'package:fieldforce/features/shop/domain/entities/employee.dart';
import 'package:fieldforce/features/shop/domain/entities/order.dart';
import 'package:fieldforce/features/shop/domain/entities/order_line.dart';
import 'package:fieldforce/features/shop/domain/entities/order_state.dart';
import 'package:fieldforce/features/shop/domain/entities/payment_kind.dart';
import 'package:fieldforce/features/shop/domain/entities/product.dart';
import 'package:fieldforce/features/shop/domain/entities/trading_point.dart';
import 'package:fieldforce/features/shop/domain/repositories/employee_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/order_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/trading_point_repository.dart';
import 'package:flutter/foundation.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ dev —Ä–µ–∂–∏–º–µ
class OrderFixtureService {
  final OrderRepository _orderRepository;
  final EmployeeRepository _employeeRepository;
  final TradingPointRepository _tradingPointRepository;

  OrderFixtureService({
    required OrderRepository orderRepository,
    required EmployeeRepository employeeRepository,
    required TradingPointRepository tradingPointRepository,
  })  : _orderRepository = orderRepository,
        _employeeRepository = employeeRepository,
        _tradingPointRepository = tradingPointRepository;

  /// –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  Future<List<Order>> createFixtureOrders() async {
    debugPrint('üõí –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');

    final orders = <Order>[];

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏
      final employeesResult = await _employeeRepository.getAll();
      final tradingPointsResult = await _tradingPointRepository.getAll();

      final employees = employeesResult.fold(
        (failure) {
          debugPrint('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: $failure');
          return <Employee>[];
        },
        (employees) => employees,
      );

      final tradingPoints = tradingPointsResult.fold(
        (failure) {
          debugPrint('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: $failure');
          return <TradingPoint>[];
        },
        (points) => points,
      );

      if (employees.isEmpty || tradingPoints.isEmpty) {
        debugPrint('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
        return orders;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
      final employee = employees.first;

      // 1. –ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ (–∫–æ—Ä–∑–∏–Ω–∞)
      final draftOrder = await _createOrder(
        employee: employee,
        tradingPoint: tradingPoints[0],
        state: OrderState.draft,
        withItems: true,
      );
      orders.add(draftOrder);

      // 2. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      if (tradingPoints.length > 1) {
        final pendingOrder = await _createOrder(
          employee: employee,
          tradingPoint: tradingPoints[1],
          state: OrderState.pending,
          withItems: true,
        );
        orders.add(pendingOrder);
      }

      // 3. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
      if (tradingPoints.length > 2) {
        final completedOrder = await _createOrder(
          employee: employee,
          tradingPoint: tradingPoints[2],
          state: OrderState.completed,
          withItems: true,
        );
        orders.add(completedOrder);
      }

      debugPrint('‚úÖ –°–æ–∑–¥–∞–Ω–æ ${orders.length} —Ñ–∏–∫—Å—Ç—É—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
      return orders;
    } catch (e, stackTrace) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: $e');
      debugPrint('Stack trace: $stackTrace');
      return orders;
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  Future<Order> _createOrder({
    required Employee employee,
    required TradingPoint tradingPoint,
    required OrderState state,
    bool withItems = false,
  }) async {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–∫–∞–∑
    var order = Order.createDraft(
      creator: employee,
      outlet: tradingPoint,
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (withItems) {
      order = _addItemsToOrder(order);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    if (state != OrderState.draft) {
      order = order.copyWith(
        paymentKind: const PaymentKind.cash(),
      );
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (state != OrderState.draft) {
      order = order.updateState(state);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    return await _orderRepository.saveOrder(order);
  }

  /// –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
  Order _addItemsToOrder(Order order) {
    final lines = <OrderLine>[];

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ StockItem –∏ OrderLine
    final stockItem1 = _createTestStockItem(1, '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1', 10000);
    final stockItem2 = _createTestStockItem(2, '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2', 15000);

    lines.add(
      OrderLine.create(
        orderId: order.id ?? 0,
        stockItem: stockItem1,
        quantity: 2,
      ),
    );

    lines.add(
      OrderLine.create(
        orderId: order.id ?? 0,
        stockItem: stockItem2,
        quantity: 1,
      ),
    );

    return order.copyWith(lines: lines);
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π StockItem
  StockItem _createTestStockItem(int id, String title, int price) {
    final warehouse = Warehouse(
      id: 1,
      name: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥',
      vendorId: 'TEST_WAREHOUSE',
      isPickUpPoint: false,
    );

    final product = Product(
      title: title,
      barcodes: ['$id'],
      code: id,
      bcode: id,
      catalogId: id,
      novelty: false,
      popular: false,
      isMarked: false,
      images: [],
      categoriesInstock: [],
      numericCharacteristics: [],
      stringCharacteristics: [],
      boolCharacteristics: [],
      stockItems: [],
      canBuy: true,
    );

    return StockItem(
      id: id,
      product: product,
      warehouse: warehouse,
      stock: 100,
      multiplicity: 1,
      publicStock: '100+ —à—Ç',
      defaultPrice: price,
      discountValue: 0,
      availablePrice: null,
      offerPrice: price,
      promotion: null,
    );
  }
}