// lib/features/shop/presentation/bloc/cart_bloc.dart

import 'dart:async';
import 'package:equatable/equatable.dart';
import 'package:fieldforce/features/shop/domain/entities/order.dart';
import 'package:fieldforce/features/shop/domain/entities/order_line.dart';
import 'package:fieldforce/features/shop/domain/usecases/submit_order_usecase.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:logging/logging.dart';

import '../../../../app/services/app_session_service.dart';
import '../../../../shared/services/image_cache_service.dart';
import 'package:fieldforce/features/shop/domain/entities/payment_kind.dart';
import 'package:fieldforce/features/shop/domain/usecases/get_current_cart_usecase.dart';
import 'package:fieldforce/features/shop/domain/usecases/update_cart_item_usecase.dart';
import 'package:fieldforce/features/shop/domain/usecases/update_cart_stock_item_usecase.dart';
import 'package:fieldforce/features/shop/domain/usecases/remove_from_cart_usecase.dart';
import 'package:fieldforce/features/shop/domain/usecases/update_cart_usecase.dart';
import 'package:fieldforce/features/shop/domain/usecases/clear_cart_usecase.dart';

part 'cart_event.dart';
part 'cart_state.dart';

/// BLoC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π (—Ç–µ–∫—É—â–∏–π draft –∑–∞–∫–∞–∑)
/// TODO –í—ã–Ω–µ—Å—Ç–∏ –≤ app –≤—Å—ë —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è —Å–µ—Å—Å–∏–∏ –∏–∑ app
class CartBloc extends Bloc<CartEvent, CartState> {
  static final Logger _logger = Logger('CartBloc');

  final GetCurrentCartUseCase _getCurrentCartUseCase;
  final UpdateCartItemUseCase _updateCartItemUseCase;
  final UpdateCartStockItemUseCase _updateCartStockItemUseCase;
  final RemoveFromCartUseCase _removeFromCartUseCase;
  final UpdateCartUseCase _updateCartUseCase;
  final ClearCartUseCase _clearCartUseCase;
  final SubmitOrderUseCase _submitOrderUseCase;

  CartBloc({
    required GetCurrentCartUseCase getCurrentCartUseCase,
    required UpdateCartItemUseCase updateCartItemUseCase,
    required UpdateCartStockItemUseCase updateCartStockItemUseCase,
    required RemoveFromCartUseCase removeFromCartUseCase,
    required UpdateCartUseCase updateCartUseCase,
    required ClearCartUseCase clearCartUseCase,
    required SubmitOrderUseCase submitOrderUseCase,
  })  : _getCurrentCartUseCase = getCurrentCartUseCase,
        _updateCartItemUseCase = updateCartItemUseCase,
        _updateCartStockItemUseCase = updateCartStockItemUseCase,
        _removeFromCartUseCase = removeFromCartUseCase,
        _updateCartUseCase = updateCartUseCase,
        _clearCartUseCase = clearCartUseCase,
        _submitOrderUseCase = submitOrderUseCase,
        super(const CartInitial()) {
    on<LoadCartEvent>(_onLoadCart);
    on<AddToCartEvent>(_onAddToCart);
    on<AddStockItemToCartEvent>(_onAddStockItemToCart);
    on<RemoveFromCartEvent>(_onRemoveFromCart);
    on<UpdateCartLineEvent>(_onUpdateCartLine);
    on<ClearCartEvent>(_onClearCart);
    on<UpdateCartDetailsEvent>(_onUpdateCartDetails);
    on<SubmitCartEvent>(_onSubmitCart);
    on<SendCartToReviewEvent>(_onSendCartToReview);
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É (–∞–Ω–∞–ª–æ–≥ getCurrentOrder)
  Future<void> _onLoadCart(LoadCartEvent event, Emitter<CartState> emit) async {
    try {
      emit(const CartLoading());
      _logger.info('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É');

      final result = await _getCurrentCartUseCase();
      
      result.fold(
        (failure) {
          _logger.warning('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: ${failure.message}');
          emit(CartError(message: failure.message));
        },
        (cart) {
          _logger.info('–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, ID: ${cart.id}, —Å—Ç–∞—Ç—É—Å: ${cart.state}');
          
          if (cart.lines.isEmpty) {
            emit(CartEmpty(cart: cart));
          } else {
            final totalAmount = _calculateTotalAmount(cart.lines);
            final totalItems = _calculateTotalItems(cart.lines);
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            _precacheCartImages(cart.lines);
            
            emit(CartLoaded(
              cart: cart,
              orderLines: cart.lines,
              totalAmount: totalAmount,
              totalItems: totalItems,
            ));
          }
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã', e, stackTrace);
      emit(CartError(message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e'));
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É (–∞–Ω–∞–ª–æ–≥ putLinesToCurrentOrder)
  Future<void> _onAddToCart(AddToCartEvent event, Emitter<CartState> emit) async {
    try {
      _logger.info('üõí [CartBloc] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ AddToCartEvent: productCode=${event.productCode}, quantity=${event.quantity}, warehouseId=${event.warehouseId}');
      _logger.info('üõí [CartBloc] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.runtimeType}');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
      _logger.info('üõí [CartBloc] –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é...');
      final sessionResult = await AppSessionService.getCurrentAppSession();
      final session = sessionResult.fold(
        (failure) {
          _logger.severe('üõí [CartBloc] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${failure.message}');
          emit(CartError(message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${failure.message}'));
          return null;
        },
        (s) {
          _logger.info('üõí [CartBloc] ‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞: ${s?.appUser.fullName}');
          return s;
        },
      );

      if (session == null) {
        _logger.severe('üõí [CartBloc] ‚ùå –°–µ—Å—Å–∏—è —Ä–∞–≤–Ω–∞ null');
        emit(CartError(message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'));
        return;
      }

      _logger.info('üè™ CurrentOutletId: ${session.currentOutletId}, selectedTradingPointId: ${session.appUser.selectedTradingPointId}');
      
      final outletId = session.currentOutletId;
      if (outletId == null) {
        _logger.severe('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞! AppUser.selectedTradingPoint: ${session.appUser.selectedTradingPoint}');
        emit(CartError(message: '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'));
        return;
      }
      
      _logger.info('üõí [CartBloc] –í—ã–∑—ã–≤–∞–µ–º UpdateCartItemUseCase —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: employeeId=${session.appUser.employee.id}, outletId=$outletId');
      final result = await _updateCartItemUseCase(UpdateCartItemParams(
        productCode: event.productCode,
        quantity: event.quantity,
        warehouseId: event.warehouseId,
        employeeId: session.appUser.employee.id,
        outletId: outletId,
      ));
      
      _logger.info('üõí [CartBloc] –†–µ–∑—É–ª—å—Ç–∞—Ç UpdateCartItemUseCase: ${result.isLeft() ? "–û–®–ò–ë–ö–ê" : "–£–°–ü–ï–•"}');

      result.fold(
        (failure) {
          _logger.severe('üõí [CartBloc] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${failure.message}');
          emit(CartError(message: failure.message));
        },
        (cart) {
          _logger.info('üõí [CartBloc] ‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —É—Å–ø–µ—à–Ω–æ!');
          
          if (cart.lines.isEmpty) {
            emit(CartEmpty(cart: cart));
          } else {
            final totalAmount = _calculateTotalAmount(cart.lines);
            final totalItems = _calculateTotalItems(cart.lines);
            
            emit(CartLoaded(
              cart: cart,
              orderLines: cart.lines,
              totalAmount: totalAmount,
              totalItems: totalItems,
            ));
          }
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', e, stackTrace);
      emit(CartError(message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e'));
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π StockItem –≤ –∫–æ—Ä–∑–∏–Ω—É
  Future<void> _onAddStockItemToCart(AddStockItemToCartEvent event, Emitter<CartState> emit) async {
    try {
      _logger.info('üõí [CartBloc] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ AddStockItemToCartEvent: stockItemId=${event.stockItemId}, quantity=${event.quantity}');
      _logger.info('üõí [CartBloc] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.runtimeType}');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
      _logger.info('üõí [CartBloc] –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é...');
      final sessionResult = await AppSessionService.getCurrentAppSession();
      final session = sessionResult.fold(
        (failure) {
          _logger.severe('üõí [CartBloc] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${failure.message}');
          emit(CartError(message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${failure.message}'));
          return null;
        },
        (s) {
          _logger.info('üõí [CartBloc] ‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞: ${s?.appUser.fullName}');
          return s;
        },
      );

      if (session == null) {
        _logger.severe('üõí [CartBloc] ‚ùå –°–µ—Å—Å–∏—è —Ä–∞–≤–Ω–∞ null');
        emit(CartError(message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'));
        return;
      }

      _logger.info('üè™ CurrentOutletId: ${session.currentOutletId}, selectedTradingPointId: ${session.appUser.selectedTradingPointId}');
      
      final outletId = session.currentOutletId;
      if (outletId == null) {
        _logger.severe('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞! AppUser.selectedTradingPoint: ${session.appUser.selectedTradingPoint}');
        emit(CartError(message: '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'));
        return;
      }
      
      _logger.info('üõí [CartBloc] –í—ã–∑—ã–≤–∞–µ–º UpdateCartStockItemUseCase —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: employeeId=${session.appUser.employee.id}, outletId=$outletId');
      final result = await _updateCartStockItemUseCase(UpdateCartStockItemParams(
        employeeId: session.appUser.employee.id,
        outletId: outletId,
        stockItemId: event.stockItemId,
        quantity: event.quantity,
      ));
      
      _logger.info('üõí [CartBloc] –†–µ–∑—É–ª—å—Ç–∞—Ç UpdateCartStockItemUseCase: ${result.isLeft() ? "–û–®–ò–ë–ö–ê" : "–£–°–ü–ï–•"}');

      result.fold(
        (failure) {
          _logger.severe('üõí [CartBloc] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è StockItem: ${failure.message}');
          emit(CartError(message: failure.message));
        },
        (cart) {
          _logger.info('üõí [CartBloc] ‚úÖ StockItem –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —É—Å–ø–µ—à–Ω–æ!');
          
          if (cart.lines.isEmpty) {
            emit(CartEmpty(cart: cart));
          } else {
            final totalAmount = _calculateTotalAmount(cart.lines);
            final totalItems = _calculateTotalItems(cart.lines);
            
            emit(CartLoaded(
              cart: cart,
              orderLines: cart.lines,
              totalAmount: totalAmount,
              totalItems: totalItems,
            ));
          }
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è StockItem', e, stackTrace);
      emit(CartError(message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e'));
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–∞–Ω–∞–ª–æ–≥ deleteLineFromCurrentOrder)
  Future<void> _onRemoveFromCart(RemoveFromCartEvent event, Emitter<CartState> emit) async {
    try {
      _logger.info('–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ${event.orderLineId}');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ç–∞–∫–∞—è OrderLine –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      if (state is CartLoaded) {
        final currentOrderLine = (state as CartLoaded).orderLines
            .where((line) => line.id == event.orderLineId)
            .firstOrNull;
        if (currentOrderLine == null) {
          _logger.warning('OrderLine ${event.orderLineId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã');
          emit(CartError(message: '–¢–æ–≤–∞—Ä —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'));
          return;
        }
        _logger.info('OrderLine –Ω–∞–π–¥–µ–Ω–∞: ${currentOrderLine.productTitle} (–∫–æ–ª-–≤–æ: ${currentOrderLine.quantity})');
      }

      final result = await _removeFromCartUseCase(RemoveFromCartParams(
        orderLineId: event.orderLineId,
      ));

      await result.fold(
        (failure) async {
          _logger.warning('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: ${failure.message}');
          if (!emit.isDone) {
            emit(CartError(message: failure.message));
          }
        },
        (_) async {
          _logger.info('–°—Ç—Ä–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —Å–æ–±—ã—Ç–∏—è
          final cartResult = await _getCurrentCartUseCase();
          if (!emit.isDone) {
            cartResult.fold(
              (failure) => emit(CartError(message: failure.message)),
              (cart) {
                if (cart.lines.isEmpty) {
                  emit(CartEmpty(cart: cart));
                } else {
                  final totalAmount = _calculateTotalAmount(cart.lines);
                  final totalItems = _calculateTotalItems(cart.lines);
                  
                  emit(CartLoaded(
                    cart: cart,
                    orderLines: cart.lines,
                    totalAmount: totalAmount,
                    totalItems: totalItems,
                  ));
                }
              },
            );
          }
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏', e, stackTrace);
      emit(CartError(message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e'));
    }
  }

  /// –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  Future<void> _onUpdateCartLine(UpdateCartLineEvent event, Emitter<CartState> emit) async {
    try {
      _logger.info('–ò–∑–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ: ${event.orderLineId}, –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ: ${event.newQuantity}');

      final result = await _updateCartUseCase(UpdateCartParams(
        orderLineId: event.orderLineId,
        newQuantity: event.newQuantity,
      ));

      await result.fold(
        (failure) async {
          _logger.warning('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: ${failure.message}');
          if (!emit.isDone) {
            emit(CartError(message: failure.message));
          }
        },
        (_) async {
          _logger.info('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —Å–æ–±—ã—Ç–∏—è
          final cartResult = await _getCurrentCartUseCase();
          if (!emit.isDone) {
            cartResult.fold(
              (failure) => emit(CartError(message: failure.message)),
              (cart) {
                if (cart.lines.isEmpty) {
                  emit(CartEmpty(cart: cart));
                } else {
                  final totalAmount = _calculateTotalAmount(cart.lines);
                  final totalItems = _calculateTotalItems(cart.lines);
                  
                  emit(CartLoaded(
                    cart: cart,
                    orderLines: cart.lines,
                    totalAmount: totalAmount,
                    totalItems: totalItems,
                  ));
                }
              },
            );
          }
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞', e, stackTrace);
      emit(CartError(message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e'));
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É (–∞–Ω–∞–ª–æ–≥ clearCart)
  Future<void> _onClearCart(ClearCartEvent event, Emitter<CartState> emit) async {
    try {
      _logger.info('–û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É');

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      final session = AppSessionService.currentSession;
      if (session == null || !session.isAuthenticated) {
        _logger.warning('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
        emit(CartError(message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏'));
        return;
      }

      final employeeId = session.appUser.employee.id;
      final outletId = session.currentOutletId;

      if (outletId == null) {
        _logger.warning('–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
        emit(CartError(message: '–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞'));
        return;
      }

      final result = await _clearCartUseCase(ClearCartParams(
        employeeId: employeeId,
        outletId: outletId,
      ));

      result.fold(
        (failure) {
          _logger.warning('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: ${failure.message}');
          emit(CartError(message: failure.message));
        },
        (cart) {
          _logger.info('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
          emit(CartEmpty(cart: cart));
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã', e, stackTrace);
      emit(CartError(message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e'));
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ (–∞–Ω–∞–ª–æ–≥ patchCurrentOrder)
  Future<void> _onUpdateCartDetails(UpdateCartDetailsEvent event, Emitter<CartState> emit) async {
    try {
      _logger.info('–û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä–∑–∏–Ω—ã');

      final result = await _updateCartUseCase(UpdateCartParams(
        paymentKind: event.paymentKind,
        isPickup: event.isPickup,
        approvedDeliveryDay: event.approvedDeliveryDay,
        approvedAssemblyDay: event.approvedAssemblyDay,
        comment: event.comment,
        outletId: event.outletId,
      ));

      result.fold(
        (failure) {
          _logger.warning('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${failure.message}');
          emit(CartError(message: failure.message));
        },
        (_) async {
          _logger.info('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä–∑–∏–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —Å–æ–±—ã—Ç–∏—è
          final cartResult = await _getCurrentCartUseCase();
          cartResult.fold(
            (failure) => emit(CartError(message: failure.message)),
            (cart) {
              if (cart.lines.isEmpty) {
                emit(CartEmpty(cart: cart));
              } else {
                final totalAmount = _calculateTotalAmount(cart.lines);
                final totalItems = _calculateTotalItems(cart.lines);
                
                emit(CartLoaded(
                  cart: cart,
                  orderLines: cart.lines,
                  totalAmount: totalAmount,
                  totalItems: totalItems,
                ));
              }
            },
          );
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', e, stackTrace);
      emit(CartError(message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e'));
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ (–∞–Ω–∞–ª–æ–≥ submitOrder)
  Future<void> _onSubmitCart(SubmitCartEvent event, Emitter<CartState> emit) async {
    try {
      _logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');

      final result = await _submitOrderUseCase(SubmitOrderParams(
        withoutRealization: event.withoutRealization,
      ));

      result.fold(
        (failure) {
          _logger.warning('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: ${failure.message}');
          emit(CartError(message: failure.message));
        },
        (orders) {
          _logger.info('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          emit(CartSubmitted(
            submittedOrder: orders.submittedOrder,
            newCart: orders.newCart,
          ));
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞', e, stackTrace);
      emit(CartError(message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e'));
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (–∞–Ω–∞–ª–æ–≥ orderToReview)
  Future<void> _onSendCartToReview(SendCartToReviewEvent event, Emitter<CartState> emit) async {
    try {
      _logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É');

      final result = await _submitOrderUseCase(const SubmitOrderParams(
        toReview: true,
      ));

      result.fold(
        (failure) {
          _logger.warning('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: ${failure.message}');
          emit(CartError(message: failure.message));
        },
        (orders) {
          _logger.info('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
          emit(CartSentToReview(
            reviewOrder: orders.submittedOrder,
            newCart: orders.newCart,
          ));
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', e, stackTrace);
      emit(CartError(message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e'));
    }
  }

  /// –í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
  double _calculateTotalAmount(List<OrderLine> orderLines) {
    return orderLines.fold<double>(
      0.0,
      (sum, line) => sum + (line.totalCost / 100.0), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏
    );
  }

  /// –í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
  int _calculateTotalItems(List<OrderLine> orderLines) {
    return orderLines.fold<int>(
      0,
      (sum, line) => sum + line.quantity,
    );
  }

  /// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
  void _precacheCartImages(List<OrderLine> orderLines) {
    try {
      // –°–æ–±–∏—Ä–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
      final imageUrls = orderLines
          .where((line) => line.product?.defaultImage?.uri != null)
          .map((line) => line.product!.defaultImage!.uri)
          .toSet() // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
          .toList();

      if (imageUrls.isNotEmpty) {
        _logger.fine('–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ ${imageUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
        ImageCacheService.precacheImages(imageUrls, thumbnail: true).then((_) {
          _logger.fine('–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ—Ä–∑–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }).catchError((error) {
          _logger.warning('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ—Ä–∑–∏–Ω—ã', error);
        });
      }
    } catch (e) {
      _logger.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã', e);
    }
  }
}