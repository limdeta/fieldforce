import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:get_it/get_it.dart';
import 'package:logging/logging.dart';
import 'package:fieldforce/app/config/app_config.dart';
import 'package:fieldforce/features/shop/domain/entities/category.dart';
import 'package:fieldforce/features/shop/domain/entities/product_with_stock.dart';
import 'package:fieldforce/features/shop/domain/entities/stock_item.dart';
import 'package:fieldforce/features/shop/domain/repositories/product_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/stock_item_repository.dart';
import 'package:fieldforce/features/shop/presentation/bloc/cart_bloc.dart';
import 'package:fieldforce/features/shop/presentation/widgets/navigation_fab_widget.dart';
import 'package:fieldforce/features/shop/presentation/pages/product_detail_page.dart';
import 'package:fieldforce/features/shop/presentation/widgets/product_catalog_card_widget.dart';

/// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class CategoryProductsPage extends StatefulWidget {
  final Category category;

  const CategoryProductsPage({
    super.key,
    required this.category,
  });

  @override
  State<CategoryProductsPage> createState() => _CategoryProductsPageState();
}

class _CategoryProductsPageState extends State<CategoryProductsPage> {
  static final Logger _logger = Logger('CategoryProductsPage');
  final ProductRepository _productRepository = GetIt.instance<ProductRepository>();
  final StockItemRepository _stockItemRepository = GetIt.instance<StockItemRepository>();

  List<ProductWithStock> _products = [];
  bool _isLoading = true;
  String? _error;
  final ScrollController _scrollController = ScrollController();
  bool _hasMore = true;
  int _currentOffset = 0;
  final int _limit = 20;

  String? _vendorId;
  bool _vendorResolved = false;
  bool _vendorResolutionFailed = false;
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ StockItem –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
  final Map<int, StockItem> _selectedStockItems = {};

  @override
  void initState() {
    super.initState();
    _loadProducts();
    _scrollController.addListener(_onScroll);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<CartBloc>().add(const LoadCartEvent());
    });
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  void _onScroll() {
    if (_scrollController.position.pixels >= _scrollController.position.maxScrollExtent - 200) {
      if (!_isLoading && _hasMore) {
        _loadMoreProducts();
      }
    }
  }

  Future<void> _loadProducts() async {
    _logger.info('üöÄ _loadProducts: –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${widget.category.name}" (id: ${widget.category.id})');
    
    setState(() {
      _isLoading = true;
      _error = null;
      _currentOffset = 0;
      _hasMore = true;
    });

    await _loadProductsInternal(reset: true);
  }

  Future<void> _loadMoreProducts() async {
    if (_isLoading || !_hasMore) return;

    setState(() {
      _isLoading = true;
    });

    await _loadProductsInternal(reset: false);
  }

  Future<void> _loadProductsInternal({required bool reset}) async {
    _logger.info('üîÑ _loadProductsInternal: categoryId=${widget.category.id}, name="${widget.category.name}", reset=$reset, offset=$_currentOffset, limit=$_limit');

    final vendorId = await _resolveVendorId();
    _logger.info('üîÑ _loadProductsInternal: resolved vendorId = $vendorId');
    
    if (_vendorResolutionFailed) {
      setState(() {
        _isLoading = false;
        _error = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∫–ª–∞–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤';
      });
      return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ProductWithStock –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
    // –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π StockItem-centered
    final result = await _productRepository.getProductsWithStockByCategoryPaginated(
      widget.category.id,
      vendorId: vendorId,
      offset: _currentOffset,
      limit: _limit,
    );

    if (!mounted) {
      _logger.warning('‚ö†Ô∏è _loadProductsInternal: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º');
      return;
    }

    if (result.isLeft()) {
      setState(() {
        _isLoading = false;
        _error = result.fold((failure) => failure.message, (_) => null);
      });
      _logger.severe('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${widget.category.id}: $_error');
      return;
    }

    final newProducts = result.getOrElse(() => []);
    
    setState(() {
      _isLoading = false;
      
      if (reset) {
        _products = newProducts;
      } else {
        _products.addAll(newProducts);
      }
      
      _hasMore = newProducts.length == _limit;
      _currentOffset += newProducts.length;
      
      _logger.fine('–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${newProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${widget.category.name}" (–≤—Å–µ–≥–æ: ${_products.length})');
    });
  }

  Future<String?> _resolveVendorId() async {
    if (_vendorResolved) {
      return _vendorId;
    }

    // –í dev —Ä–µ–∂–∏–º–µ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–∫–ª–∞–¥—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    if (AppConfig.isDev) {
      _logger.info('üîç _resolveVendorId: DEV —Ä–µ–∂–∏–º - –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–∫–ª–∞–¥—É');
      _vendorResolved = true;
      _vendorId = null;
      return _vendorId;
    }

    try {
      final stockResult = await _stockItemRepository.getAvailableStockItems();

      if (stockResult.isLeft()) {
        final failure = stockResult.fold((failure) => failure, (_) => null);
        _logger.warning('‚ö†Ô∏è _resolveVendorId: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏: ${failure?.message}');
        _vendorResolved = true;
        _vendorId = null;
        return _vendorId;
      }

      final stockItems = stockResult.getOrElse(() => []);
      _logger.info('üîç _resolveVendorId: –Ω–∞–π–¥–µ–Ω–æ ${stockItems.length} –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –±–∞–∑–µ');
      
      if (stockItems.isEmpty) {
        _logger.warning('‚ö†Ô∏è _resolveVendorId: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ > 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã');
        _vendorResolved = true;
        _vendorId = null;
        return _vendorId;
      }

      final vendorIds = stockItems.map((item) => item.warehouseVendorId).where((id) => id.isNotEmpty).toSet();
      _logger.info('üîç _resolveVendorId: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ vendorIds: $vendorIds');

      if (vendorIds.isEmpty) {
        _logger.warning('‚ö†Ô∏è _resolveVendorId: —Å–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ vendorId');
        _vendorResolved = true;
        _vendorId = null;
        return _vendorId;
      }

      if (vendorIds.length > 1) {
        _logger.info('‚ÑπÔ∏è _resolveVendorId: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ vendorId ($vendorIds), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π');
      }

      _vendorId = vendorIds.first;
      _vendorResolved = true;
      _logger.info('‚úÖ _resolveVendorId: –≤—ã–±—Ä–∞–Ω vendorId = $_vendorId');
      return _vendorId;
    } catch (error, stackTrace) {
      _logger.severe('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è vendorId –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤', error, stackTrace);
      _vendorResolutionFailed = true;
      return null;
    }
  }

  void _onProductTap(ProductWithStock productWithStock) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => ProductDetailPage(productWithStock: productWithStock),
      ),
    );
  }



  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ StockItem –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
  void _onStockItemChanged(ProductWithStock product, StockItem stockItem) {
    _logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª StockItem ${stockItem.id} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.product.code}');
    
    setState(() {
      _selectedStockItems[product.product.code] = stockItem;
    });
    
    // ScaffoldMessenger.of(context).showSnackBar(
    //   SnackBar(
    //     content: Text('–í—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥: ${stockItem.warehouseName}'),
    //     duration: const Duration(seconds: 1),
    //   ),
    // );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          widget.category.name,
          style: const TextStyle(
            fontWeight: FontWeight.w600,
            fontSize: 20,
          ),
        ),
        elevation: 0,
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        actions: [
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          if (widget.category.count > 0)
            Padding(
              padding: const EdgeInsets.only(right: 16.0),
              child: Center(
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${widget.category.count}',
                    style: TextStyle(
                      color: Theme.of(context).colorScheme.primary,
                      fontWeight: FontWeight.w600,
                      fontSize: 12,
                    ),
                  ),
                ),
              ),
            ),
        ],
      ),
      body: _buildBody(),
      floatingActionButton: const NavigationFabWidget(),
    );
  }

  Widget _buildBody() {
    if (_error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 64,
              color: Theme.of(context).colorScheme.error,
            ),
            const SizedBox(height: 16),
            Text(
              '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 8),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 32),
              child: Text(
                _error!,
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),
                ),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: _loadProducts,
              icon: const Icon(Icons.refresh),
              label: const Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
            ),
          ],
        ),
      );
    }

    if (_isLoading && _products.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...'),
          ],
        ),
      );
    }

    if (_products.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.shopping_bag_outlined,
              size: 64,
              color: Theme.of(context).colorScheme.onSurface.withOpacity(0.5),
            ),
            const SizedBox(height: 16),
            Text(
              '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 8),
            Text(
              '–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${widget.category.name}" –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤',
              textAlign: TextAlign.center,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),
              ),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: _loadProducts,
      child: ListView.builder(
        controller: _scrollController,
        // Reduced horizontal padding so cards align with screen edges
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 12),
        itemCount: _products.length + (_hasMore ? 1 : 0),
        itemBuilder: (context, index) {
          if (index == _products.length) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞
            return const Padding(
              padding: EdgeInsets.all(16.0),
              child: Center(
                child: CircularProgressIndicator(),
              ),
            );
          }

          final productWithStock = _products[index];
          
          return Padding(
            padding: const EdgeInsets.only(bottom: 12),
            child: ProductCatalogCardWidget(
              productWithStock: productWithStock,
              selectedStockItem: _selectedStockItems[productWithStock.product.code],
              onTap: () => _onProductTap(productWithStock),
              onStockItemChanged: (stockItem) => _onStockItemChanged(productWithStock, stockItem),
            ),
          );
        },
      ),
    );
  }
}