// lib/features/shop/domain/usecases/perform_protobuf_sync_usecase.dart

import 'dart:async';
import 'package:fieldforce/shared/either.dart';
import 'package:fieldforce/shared/failures.dart';
import 'package:logging/logging.dart';

import '../../data/sync/services/protobuf_sync_coordinator.dart';
import '../entities/protobuf_sync_progress.dart';
import '../entities/protobuf_sync_result.dart';

/// Use case –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è protobuf —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
/// 
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ —Ü–µ–Ω
/// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ Stream
class PerformProtobufSyncUseCase {
  static final Logger _logger = Logger('PerformProtobufSyncUseCase');
  
  final ProtobufSyncCoordinator _syncCoordinator;
  
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏
  StreamController<ProtobufSyncProgress>? _progressController;
  StreamController<ProtobufSyncResult>? _resultController;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  bool _isRunning = false;
  bool _isCancelled = false;
  DateTime? _startTime;

  PerformProtobufSyncUseCase(this._syncCoordinator);

  /// –ü–æ—Ç–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Stream<ProtobufSyncProgress> get progressStream {
    _progressController ??= StreamController<ProtobufSyncProgress>.broadcast();
    return _progressController!.stream;
  }

  /// –ü–æ—Ç–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Stream<ProtobufSyncResult> get resultStream {
    _resultController ??= StreamController<ProtobufSyncResult>.broadcast();
    return _resultController!.stream;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  bool get isRunning => _isRunning;

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  /// 
  /// [regionFiasId] - FIAS –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞)
  /// [outletIds] - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω
  /// [forceFullSync] - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)
  Future<Either<Failure, ProtobufSyncResult>> call({
    required String regionFiasId,
    required List<int> outletIds,
    bool forceFullSync = false,
  }) async {
    if (_isRunning) {
      return Left(ValidationFailure('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'));
    }

    _logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º protobuf —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: —Ä–µ–≥–∏–æ–Ω=$regionFiasId, —Ç–æ—á–∫–∏=$outletIds, –ø–æ–ª–Ω–∞—è=$forceFullSync');
    
    _isRunning = true;
    _isCancelled = false;
    _startTime = DateTime.now();
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      _progressController ??= StreamController<ProtobufSyncProgress>.broadcast();
      _resultController ??= StreamController<ProtobufSyncResult>.broadcast();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      _emitProgress(ProtobufSyncProgress.initial());
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      final result = await _performSyncWithProgress(
        regionFiasId,
        outletIds,
        forceFullSync,
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      _resultController!.add(result);
      
      _logger.info('‚úÖ Protobuf —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $result');
      return Right(result);
      
    } catch (e, stackTrace) {
      _logger.severe('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ protobuf —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e', e, stackTrace);
      
      final endTime = DateTime.now();
      final duration = endTime.difference(_startTime!);
      
      final errorResult = ProtobufSyncResult.failure(
        duration: duration,
        errors: [e.toString()],
        detailedErrors: [
          ProtobufSyncError.fromException(
            ProtobufSyncStage.preparation,
            e,
            stackTrace,
          ),
        ],
        startTime: _startTime!,
        endTime: endTime,
        regionFiasId: regionFiasId,
        outletIds: outletIds,
      );
      
      _resultController?.add(errorResult);
      return Left(GeneralFailure('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e', details: stackTrace));
      
    } finally {
      _isRunning = false;
    }
  }

  /// –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  Future<void> cancel() async {
    if (!_isRunning) return;
    
    _logger.info('üõë –û—Ç–º–µ–Ω–∞ protobuf —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    _isCancelled = true;
    
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω—ã –≤ ProtobufSyncCoordinator
    // await _syncCoordinator.cancel();
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
  void dispose() {
    _progressController?.close();
    _resultController?.close();
    _progressController = null;
    _resultController = null;
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  Future<ProtobufSyncResult> _performSyncWithProgress(
    String regionFiasId,
    List<int> outletIds,
    bool forceFullSync,
  ) async {
    final errors = <String>[];
    final detailedErrors = <ProtobufSyncError>[];
    
    var productsCount = 0;
    var stockItemsCount = 0;
    var outletPricingCount = 0;

    try {
      // –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
      _emitProgress(_createProgress(
        ProtobufSyncStage.preparation,
        0.0,
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...',
      ));
      
      if (_isCancelled) throw Exception('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');

      // –≠—Ç–∞–ø 2: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      _emitProgress(_createProgress(
        ProtobufSyncStage.regionalData,
        0.0,
        '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...',
      ));

      final syncResult = await _syncCoordinator.performFullSync(
        regionFiasId,
        outletVendorIds: outletIds.map((id) => id.toString()).toList(),
      );

      if (syncResult['success'] as bool) {
        productsCount = syncResult['products_synced'] as int;
        stockItemsCount = syncResult['stock_synced'] as int;
        outletPricingCount = syncResult['prices_synced'] as int;
        
        _emitProgress(_createProgress(
          ProtobufSyncStage.completed,
          1.0,
          '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
          processedItems: productsCount + stockItemsCount + outletPricingCount,
          totalItems: productsCount + stockItemsCount + outletPricingCount,
        ));
      } else {
        final errorList = syncResult['errors'] as List<String>;
        if (errorList.isNotEmpty) {
          errors.addAll(errorList);
          for (final errorMsg in errorList) {
            detailedErrors.add(ProtobufSyncError(
              stage: ProtobufSyncStage.regionalData,
              message: errorMsg,
              timestamp: DateTime.now(),
            ));
          }
        }
      }

      final endTime = DateTime.now();
      final duration = endTime.difference(_startTime!);

      if ((syncResult['success'] as bool) && errors.isEmpty) {
        return ProtobufSyncResult.success(
          duration: duration,
          productsCount: productsCount,
          stockItemsCount: stockItemsCount,
          outletPricingCount: outletPricingCount,
          startTime: _startTime!,
          endTime: endTime,
          regionFiasId: regionFiasId,
          outletIds: outletIds,
        );
      } else {
        return ProtobufSyncResult.failure(
          duration: duration,
          errors: errors,
          detailedErrors: detailedErrors,
          startTime: _startTime!,
          endTime: endTime,
          regionFiasId: regionFiasId,
          outletIds: outletIds,
          productsCount: productsCount,
          stockItemsCount: stockItemsCount,
          outletPricingCount: outletPricingCount,
        );
      }

    } catch (e, stackTrace) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e', e, stackTrace);
      
      errors.add(e.toString());
      detailedErrors.add(ProtobufSyncError.fromException(
        ProtobufSyncStage.regionalData,
        e,
        stackTrace,
      ));

      final endTime = DateTime.now();
      final duration = endTime.difference(_startTime!);

      return ProtobufSyncResult.failure(
        duration: duration,
        errors: errors,
        detailedErrors: detailedErrors,
        startTime: _startTime!,
        endTime: endTime,
        regionFiasId: regionFiasId,
        outletIds: outletIds,
        productsCount: productsCount,
        stockItemsCount: stockItemsCount,
        outletPricingCount: outletPricingCount,
      );
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  ProtobufSyncProgress _createProgress(
    ProtobufSyncStage stage,
    double stageProgress,
    String message, {
    int processedItems = 0,
    int totalItems = 0,
  }) {
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤ —ç—Ç–∞–ø–æ–≤
    double overallProgress = 0.0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
    for (final completedStage in ProtobufSyncStage.values) {
      if (completedStage.index < stage.index) {
        overallProgress += completedStage.weight;
      } else if (completedStage == stage) {
        overallProgress += completedStage.weight * stageProgress;
        break;
      }
    }

    return ProtobufSyncProgress(
      currentStage: stage,
      overallProgress: overallProgress.clamp(0.0, 1.0),
      stageProgress: stageProgress.clamp(0.0, 1.0),
      processedItems: processedItems,
      totalItems: totalItems,
      message: message,
      startTime: _startTime!,
      lastUpdateTime: DateTime.now(),
    );
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø–æ—Ç–æ–∫
  void _emitProgress(ProtobufSyncProgress progress) {
    _logger.fine('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.currentStage.displayName} - ${(progress.overallProgress * 100).toStringAsFixed(1)}%');
    _progressController?.add(progress);
  }
}