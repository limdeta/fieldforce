// lib/features/shop/domain/usecases/get_current_cart_usecase.dart

import 'package:fieldforce/features/shop/domain/entities/order.dart';
import 'package:fieldforce/features/shop/domain/repositories/order_repository.dart';
import 'package:fieldforce/shared/either.dart';
import 'package:fieldforce/shared/failures.dart';
import 'package:logging/logging.dart';

import '../../../../app/services/app_session_service.dart';

/// Use case –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–∑–∏–Ω—ã (draft –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AppSession –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–æ—Ä–∑–∏–Ω–µ
class GetCurrentCartUseCase {
  static final Logger _logger = Logger('GetCurrentCartUseCase');
  final OrderRepository _orderRepository;

  const GetCurrentCartUseCase(this._orderRepository);

  Future<Either<Failure, Order>> call() async {
    try {
      _logger.info('üõí –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–∑–∏–Ω—ã');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      final sessionResult = await AppSessionService.getCurrentAppSession();
      _logger.info('üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω');
      
      return sessionResult.fold(
        (failure) {
          _logger.warning('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${failure.message}');
          return Left(failure);
        },
        (session) async {
          if (session == null || !session.isAuthenticated) {
            _logger.warning('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            return Left(AuthFailure('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'));
          }
          
          _logger.info('‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${session.appUser.employee.id}');
          
          // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ app user
          final employeeId = session.appUser.employee.id;
          
          // –ü–æ–ª—É—á–∞–µ–º outletId –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          final outletId = session.currentOutletId;
          if (outletId == null) {
            _logger.severe('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞. selectedTradingPoint: ${session.appUser.selectedTradingPoint}');
            return Left(ValidationFailure('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'));
          }
          
          _logger.info('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É: $outletId (${session.appUser.selectedTradingPoint?.name ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"})');
          
          _logger.info('üîç –ü–æ–ª—É—á–∞–µ–º draft –∑–∞–∫–∞–∑ –¥–ª—è employeeId=$employeeId, outletId=$outletId');
          
          // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º draft –∑–∞–∫–∞–∑
          final draftOrder = await _orderRepository.getCurrentDraftOrder(
            employeeId,
            outletId,
          );
          
          _logger.info('‚úÖ Draft –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω: id=${draftOrder.id}, —Å—Ç–∞—Ç—É—Å=${draftOrder.state}, —Å—Ç—Ä–æ–∫=${draftOrder.lines.length}');
          
          return Right(draftOrder);
        },
      );
    } catch (e, stackTrace) {
      _logger.severe('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã', e, stackTrace);
      
      // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      String errorMessage;
      if (e.toString().contains('No element')) {
        errorMessage = '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã Employee –∏ TradingPoint.';
      } else if (e.toString().contains('StateError')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $e';
      } else {
        errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: $e';
      }
      
      return Left(NetworkFailure(errorMessage));
    }
  }
}