import 'dart:async';
import 'package:fieldforce/features/navigation/tracking/domain/entities/compact_track.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/navigation_user.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/user_track.dart';
import 'package:fieldforce/features/navigation/tracking/domain/enums/track_status.dart';
import 'package:fieldforce/features/navigation/tracking/domain/repositories/user_track_repository.dart';
import 'package:fieldforce/features/navigation/tracking/domain/services/gps_buffer.dart';
import 'package:geolocator/geolocator.dart';

/// –ú–µ–Ω–µ–¥–∂–µ—Ä GPS —Ç—Ä–µ–∫–æ–≤
/// 
/// –ü—Ä–∏–Ω—Ü–∏–ø—ã:
/// - –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è GPS —Ç–æ—á–µ–∫ –≤ –ø–∞–º—è—Ç–∏
/// - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
/// - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ UI –∏ persistence —Å–ª–æ—ë–≤
/// - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
/// - –û–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class TrackManager {
  final UserTrackRepository _repository;
  final GpsBuffer _buffer = GpsBuffer();
  
  UserTrack? _currentTrack;
  StreamSubscription? _bufferSubscription;
  Timer? _persistTimer;

  final StreamController<UserTrack> _trackUpdateController = StreamController<UserTrack>.broadcast();
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è UI —Ç—Ä–µ–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
  UserTrack? _cachedUITrack;
  int _lastBufferPointCount = 0;
  
  // Throttling –¥–ª—è UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  DateTime? _lastUIUpdateTime;
  
  TrackManager(this._repository) {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
    _bufferSubscription = _buffer.updateStream.listen(_onBufferUpdate);
    
    // –ó–ê–ú–ï–ù–Ø–ï–ú —Ç–∞–π–º–µ—Ä –Ω–∞ —É–º–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
    // _persistTimer = Timer.periodic(const Duration(seconds: 4), (_) => _persistTrack());
  }

  /// –°—Ç—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—Ä–µ–∫–∞ –¥–ª—è UI
  Stream<UserTrack> get trackUpdateStream => _trackUpdateController.stream;
  
  /// –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ (–≤–∫–ª—é—á–∞—è –±—É—Ñ–µ—Ä –¥–ª—è UI)
  UserTrack? get currentTrackForUI {
    if (_currentTrack == null) return null;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä
    final bufferSegment = _buffer.getCurrentSegment();
    final currentBufferPointCount = bufferSegment.pointCount;
    
    // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫
    if (_cachedUITrack != null && 
        _lastBufferPointCount == currentBufferPointCount &&
        _cachedUITrack!.segments.length - 1 == _currentTrack!.segments.length) {
      return _cachedUITrack;
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º
    final savedSegments = _currentTrack!.segments;
    
    if (bufferSegment.isEmpty) {
      _cachedUITrack = _currentTrack;
      _lastBufferPointCount = 0;
      return _currentTrack;
    }

    final allSegments = [...savedSegments, bufferSegment];
    final liveSegmentIndex = allSegments.length - 1; // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç = –∂–∏–≤–æ–π –±—É—Ñ–µ—Ä

    int totalPoints = 0;
    double totalDistance = 0.0;
    Duration totalDuration = Duration.zero;
    
    for (final segment in allSegments) {
      totalPoints += segment.pointCount;
      totalDistance += segment.getTotalDistance();
      totalDuration += segment.getDuration();
    }
    
    _cachedUITrack = _currentTrack!.copyWith(
      segments: allSegments,
      liveSegmentIndex: liveSegmentIndex, // –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç –∂–∏–≤–æ–π
      totalPoints: totalPoints,
      totalDistanceKm: totalDistance / 1000,
      totalDuration: totalDuration,
    );
    
    _lastBufferPointCount = currentBufferPointCount;
    return _cachedUITrack;
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥ÔøΩÔøΩ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
  Future<bool> startTracking({
    required NavigationUser user,
  }) async {
    if (_currentTrack != null) {
      await stopTracking();
    }

    print('üîç TrackManager: –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}');

    // –ò—â–µ–º —Ç—Ä–µ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    final today = DateTime.now();
    final startOfDay = DateTime(today.year, today.month, today.day);
    final endOfDay = startOfDay.add(const Duration(days: 1));

    final tracksResult = await _repository.getUserTracksByDateRange(
      user, startOfDay, endOfDay
    );

    UserTrack? existingTrack;
    if (tracksResult.isRight()) {
      final tracks = tracksResult.getOrElse(() => []);
      // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ —Ç—Ä–µ–∫ –Ω–∞ –ø–∞—É–∑–µ
      existingTrack = tracks.where((track) =>
        track.status == TrackStatus.active || track.status == TrackStatus.paused
      ).firstOrNull;
    }

    if (existingTrack != null) {
      print('üîÑ TrackManager: –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫ (ID: ${existingTrack.id}), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ');
      _currentTrack = existingTrack.copyWith(
        status: TrackStatus.active,
        endTime: null,
      );
    } else {
      print('üÜï TrackManager: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è');
      _currentTrack = UserTrack.empty(
        id: DateTime.now().millisecondsSinceEpoch,
        user: user,
        status: TrackStatus.active,
        metadata: {
          'created_at': DateTime.now().toIso8601String(),
        },
      );
    }

    _buffer.clear();
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à UI —Ç—Ä–µ–∫–∞
    _cachedUITrack = null;
    _lastBufferPointCount = 0;
    
    return true;
  }

  Future<void> stopTracking() async {
    if (_currentTrack == null) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    await _persistTrack();
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–µ–∫
    _currentTrack = _currentTrack!.copyWith(
      status: TrackStatus.completed,
      endTime: DateTime.now(),
    );
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∞–º —Ä–µ—à–∏—Ç INSERT –∏–ª–∏ UPDATE
    await _repository.saveOrUpdateUserTrack(_currentTrack!);

    _currentTrack = null;
    _buffer.clear();
  }
  
  /// –°—Ç–∞–≤–∏—Ç —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–∞ –ø–∞—É–∑—É
  Future<void> pauseTracking() async {
    if (_currentTrack == null) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –∫–∞–∫ —Å–µ–≥–º–µ–Ω—Ç
    await _persistTrack();
    
    _currentTrack = _currentTrack!.copyWith(
      status: TrackStatus.paused,
    );
  }
  
  /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
  Future<void> resumeTracking() async {
    if (_currentTrack == null) return;
    
    _currentTrack = _currentTrack!.copyWith(
      status: TrackStatus.active,
    );
    
    _buffer.clear();
  }
  
  /// –î–æ–±–∞–≤–ª—è–µ—Ç GPS —Ç–æ—á–∫—É
  void addGpsPoint(Position position) {
    if (_currentTrack == null || _currentTrack!.status != TrackStatus.active) {
      return;
    }
    
    _buffer.addPoint(position);
  }
  
  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
  void dispose() {
    _bufferSubscription?.cancel();
    _persistTimer?.cancel();
    _buffer.dispose();
    _trackUpdateController.close();
  }
  
  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  void _onBufferUpdate(CompactTrack bufferSegment) {
    // –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ UI —á–∞—â–µ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Ç–æ—á–∫–µ, –Ω–æ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è throttling
    final now = DateTime.now();
    final timeSinceLastUpdate = _lastUIUpdateTime != null 
        ? now.difference(_lastUIUpdateTime!)
        : Duration.zero;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 500–º—Å –ò–õ–ò –ø—Ä–∏ –∫–∞–∂–¥–æ–π 3-–π —Ç–æ—á–∫–µ
    final shouldUpdate = bufferSegment.pointCount > 0 && (
      timeSinceLastUpdate.inMilliseconds >= 500 || 
      bufferSegment.pointCount % 3 == 0
    );
    
    if (shouldUpdate) {
      final trackForUI = currentTrackForUI;
      if (trackForUI != null) {
        _trackUpdateController.add(trackForUI);
        _lastUIUpdateTime = now;
      }
    }

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –£–º–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    _checkSegmentationConditions();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
  void _checkSegmentationConditions() {
    if (_currentTrack == null || !_buffer.hasData) return;

    final bufferSegment = _buffer.getCurrentSegment();
    final timeSinceLastPersist = _lastPersistTime != null
        ? DateTime.now().difference(_lastPersistTime!)
        : Duration.zero;

    // –£—Å–ª–æ–≤–∏–µ 1: –ë—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω (50+ —Ç–æ—á–µ–∫)
    if (bufferSegment.pointCount >= 50) {
      print('üìä TrackManager: –ë—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω (${bufferSegment.pointCount} —Ç–æ—á–µ–∫), —Å–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç');
      _persistTrack();
      return;
    }

    // –£—Å–ª–æ–≤–∏–µ 2: –ü—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (5+ –º–∏–Ω—É—Ç)
    if (timeSinceLastPersist.inMinutes >= 5) {
      print('‚è∞ TrackManager: –ü—Ä–æ—à–ª–æ ${timeSinceLastPersist.inMinutes} –º–∏–Ω—É—Ç, —Å–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç');
      _persistTrack();
      return;
    }

    // –£—Å–ª–æ–≤–∏–µ 3: –ü—Ä–æ–π–¥–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ ÔøΩÔøΩ–∞—Å—Å—Ç–æ—è–Ω–∏–µ (2+ –∫–º)
    if (bufferSegment.getTotalDistance() >= 2000) {
      print('üõ£Ô∏è TrackManager: –ü—Ä–æ–π–¥–µ–Ω–æ ${bufferSegment.getTotalDistance()/1000}–∫–º, —Å–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç');
      _persistTrack();
      return;
    }

    // –£—Å–ª–æ–≤–∏–µ 4: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (–¥–µ—Ç–µ–∫—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    if (_detectStationaryPeriod(bufferSegment)) {
      print('üõë TrackManager: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, —Å–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç');
      _persistTrack();
      return;
    }
  }

  DateTime? _lastPersistTime;

  /// –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø–æ GPS –¥–∞–Ω–Ω—ã–º
  bool _detectStationaryPeriod(CompactTrack segment) {
    if (segment.pointCount < 10) return false;

    final lastPoints = segment.pointCount >= 10 ? 10 : segment.pointCount;
    double totalDistance = 0.0;

    for (int i = segment.pointCount - lastPoints; i < segment.pointCount - 1; i++) {
      final (lat1, lng1) = segment.getCoordinates(i);
      final (lat2, lng2) = segment.getCoordinates(i + 1);
      totalDistance += _calculateDistance(lat1, lng1, lat2, lng2);
    }

    // –ï—Å–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–æ—á–µ–∫ –ø—Ä–æ—à–ª–∏ –º–µ–Ω—å—à–µ 50 –º–µ—Ç—Ä–æ–≤ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    return totalDistance < 50.0;
  }

  static double _calculateDistance(double lat1, double lng1, double lat2, double lng2) {
    return Geolocator.distanceBetween(lat1, lng1, lat2, lng2);
  }

  Future<void> _persistTrack() async {
    if (_currentTrack == null || !_buffer.hasData) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞
      final newSegment = _buffer.flush();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç –∫ —Ç—Ä–µ–∫—É
      final updatedSegments = [..._currentTrack!.segments, newSegment];
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
      int totalPoints = 0;
      double totalDistance = 0.0;
      Duration totalDuration = Duration.zero;
      
      for (final segment in updatedSegments) {
        totalPoints += segment.pointCount;
        totalDistance += segment.getTotalDistance();
        totalDuration += segment.getDuration();
      }
      
      _currentTrack = _currentTrack!.copyWith(
        segments: updatedSegments,
        totalPoints: totalPoints,
        totalDistanceKm: totalDistance / 1000,
        totalDuration: totalDuration,
      );
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∞–º —Ä–µ—à–∞–µ—Ç INSERT –∏–ª–∏ UPDATE
      final result = await _repository.saveOrUpdateUserTrack(_currentTrack!);
      if (result.isRight()) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫ —Å ID –∏–∑ –ë–î –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª INSERT
        _currentTrack = result.getOrElse(() => _currentTrack!);
      }

      _lastPersistTime = DateTime.now();
      print('‚úÖ TrackManager: –°–µ–≥–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω (${newSegment.pointCount} —Ç–æ—á–µ–∫)');
      
    } catch (e) {
      print('‚ùå TrackManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞: $e');
    }
  }
}
