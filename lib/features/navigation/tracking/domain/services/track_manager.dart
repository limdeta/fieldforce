import 'dart:async';
import 'package:fieldforce/features/navigation/tracking/domain/entities/compact_track.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/navigation_user.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/user_track.dart';
import 'package:fieldforce/features/navigation/tracking/domain/enums/track_status.dart';
import 'package:fieldforce/features/navigation/tracking/domain/repositories/user_track_repository.dart';
import 'package:fieldforce/features/navigation/tracking/domain/services/gps_buffer.dart';
import 'package:fieldforce/features/navigation/tracking/domain/services/external_segment_persister.dart';
import 'package:geolocator/geolocator.dart';
import 'package:logging/logging.dart';

/// –ú–µ–Ω–µ–¥–∂–µ—Ä GPS —Ç—Ä–µ–∫–æ–≤
/// 
/// –ü—Ä–∏–Ω—Ü–∏–ø—ã:
/// - –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è GPS —Ç–æ—á–µ–∫ –≤ –ø–∞–º—è—Ç–∏
/// - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
/// - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ UI –∏ persistence —Å–ª–æ—ë–≤
/// - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
/// - –û–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class TrackManager {
  static final Logger _logger = Logger('TrackManager');
  
  final UserTrackRepository _repository;
  final GpsBuffer _buffer = GpsBuffer();
  
  UserTrack? _currentTrack;
  /// Keep the last saved/completed track in memory so UI can show it after stop
  UserTrack? _lastSavedTrack;
  StreamSubscription? _autoFlushSubscription;
  Timer? _persistTimer;
  int _updateCounter = 0; // –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

  final StreamController<UserTrack> _trackUpdateController = StreamController<UserTrack>.broadcast();
  
  final ExternalSegmentPersister _externalPersister;

  TrackManager(this._repository, {ExternalSegmentPersister? externalPersister}) : _externalPersister = externalPersister ?? DefaultExternalSegmentPersister(_repository) {
    // –ö–†–ò–¢–ò–ß–ù–û: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∞–≤—Ç–æ—Å–±—Ä–æ—Å—ã –±—É—Ñ–µ—Ä–∞
    _logger.info('üîå TrackManager: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ autoFlushes');
    _autoFlushSubscription = _buffer.autoFlushes.listen((segment) {
      _logger.info('üéØ TrackManager: –ü–û–õ–£–ß–ò–õ–ò autoFlush —Å ${segment.pointCount} —Ç–æ—á–∫–∞–º–∏');
      _onAutoFlush(segment);
    });
  }

  /// –°—Ç—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—Ä–µ–∫–∞ –¥–ª—è UI (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
  Stream<UserTrack> get trackUpdateStream => _trackUpdateController.stream;
  
  /// –°—Ç—Ä–∏–º live –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±—É—Ñ–µ—Ä–∞ –¥–ª—è UI (–∫–∞–∂–¥—É—é –Ω–æ–≤—É—é —Ç–æ—á–∫—É)
  Stream<CompactTrack> get liveBufferStream => _buffer.updateStream;
  
  UserTrack? get currentTrackForUI {
    // If we have an active in-memory track, prefer it. Otherwise return
    // the last saved/completed track so UI can render the latest data even
    // after stopTracking() has been called.
    final track = _currentTrack ?? _lastSavedTrack;
    if (track == null) return null;
    // Return only saved segments here; live buffer is provided separately
    return track;
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
  Future<bool> startTracking({
    required NavigationUser user,
  }) async {
    _logger.info('üöÄ TrackManager.startTracking –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.fullName} (ID: ${user.id})');
    
    if (_currentTrack != null) {
      // If we already have a _currentTrack in memory but it's paused, resume it.
      if (_currentTrack!.status != TrackStatus.active) {
        _logger.info('üîÑ TrackManager.startTracking: –µ—Å—Ç—å —Ç—Ä–µ–∫ –≤ –ø–∞–º—è—Ç–∏, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º (ID: ${_currentTrack!.id})');
        _currentTrack = _currentTrack!.copyWith(status: TrackStatus.active, endTime: null);
        // clear live buffer on resume to avoid showing stale points
        _buffer.clear();
        return true;
      }

      _logger.info('‚ö†Ô∏è TrackManager.startTracking: —Ç—Ä–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω (ID: ${_currentTrack!.id}), –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.');
      return true;
    }

    // –ò—â–µ–º —Ç—Ä–µ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    final today = DateTime.now();
    final startOfDay = DateTime(today.year, today.month, today.day);
    final endOfDay = startOfDay.add(const Duration(days: 1));

    _logger.info('üîç –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: $startOfDay - $endOfDay');
    final tracksResult = await _repository.getUserTracksByDateRange(
      user, startOfDay, endOfDay
    );

    UserTrack? existingTrack;
    if (tracksResult.isRight()) {
      final tracks = tracksResult.getOrElse(() => []);
      _logger.info('üìä –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –∑–∞ –¥–µ–Ω—å: ${tracks.length}');
      // Always try to continue an existing active or paused track for the day
      final candidates = tracks.where((track) =>
        track.status == TrackStatus.active || track.status == TrackStatus.paused
      ).toList();
      if (candidates.isNotEmpty) {
        // If there are duplicates (shouldn't happen by business rules) prefer the most recent one
        if (candidates.length > 1) {
          _logger.warning('‚ö†Ô∏è TrackManager.startTracking: –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö/–ø–∞—É–∑—ã —Ç—Ä–µ–∫–æ–≤ (${candidates.length}), –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –∏ –ª–æ–≥–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã');
          for (final t in candidates) {
            _logger.info('   candidate: id=${t.id}, start=${t.startTime}, status=${t.status}, segments=${t.segments.length}');
          }
          candidates.sort((a, b) => b.startTime.compareTo(a.startTime));
        }
        existingTrack = candidates.first;
      }
    } else {
      _logger.warning('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤: ${tracksResult.fold((l) => l.toString(), (r) => '')}');
    }

    if (existingTrack != null) {
      _logger.info('üîÑ TrackManager: –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫ (ID: ${existingTrack.id}), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ');
      _currentTrack = existingTrack.copyWith(
        status: TrackStatus.active,
        endTime: null,
      );
      // Keep lastSavedTrack pointing to the persisted track so UI can render immediately
      try { _lastSavedTrack = _currentTrack; } catch (_) {}
    } else {
      // No existing track for today ‚Äî create a new one
      _logger.info('üÜï TrackManager: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è');
      _currentTrack = UserTrack.empty(
        id: DateTime.now().millisecondsSinceEpoch,
        user: user,
        status: TrackStatus.active,
        metadata: {
          'created_at': DateTime.now().toIso8601String(),
        },
      );
      // For a brand new track we do not have a lastSavedTrack yet
    }

    _logger.info('‚úÖ –¢—Ä–µ–∫ –≥–æ—Ç–æ–≤: ID=${_currentTrack!.id}, Status=${_currentTrack!.status}');
  // When starting, clear live buffer to avoid showing stale points.
  _buffer.clear();
    
    return true;
  }

  Future<void> stopTracking() async {
    if (_currentTrack == null) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    // For now we do NOT finalize the track on stop: instead we persist any
    // buffered points and mark the track as paused so it can be resumed later
    // during the same day. Closing a track (status=completed) will be done
    // only when day finalization is introduced.
    if (_buffer.hasData) {
      _logger.info('TRACK_SAVE_START: draining buffer for stopTracking (pause semantics)');
      final finalSegment = _buffer.drain();
      if (finalSegment.pointCount > 0) {
        _currentTrack!.segments.add(finalSegment);
        _logger.info('TRACK_SAVE_SAVING: finalSegment.pointCount=${finalSegment.pointCount}');
        final result = await _repository.saveOrUpdateUserTrack(_currentTrack!);
        if (result.isRight()) {
          _logger.info('TRACK_SAVE_COMPLETE: saved final segment (pause) and will emit track');
          // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ
          _trackUpdateController.add(_currentTrack!);
          // Cache last saved so UI can show persisted state
          try { _lastSavedTrack = _currentTrack; } catch (_) {}
        } else {
          _logger.warning('TRACK_SAVE_FAILED: failed to save final segment (pause)');
        }
      }
    }

    // Mark the in-memory track as paused (do not complete or drop it)
    _currentTrack = _currentTrack!.copyWith(
      status: TrackStatus.paused,
    );

    final result2 = await _repository.saveOrUpdateUserTrack(_currentTrack!);
    if (result2.isRight()) {
      _trackUpdateController.add(_currentTrack!);
      try { _lastSavedTrack = _currentTrack; } catch (_) {}
    }

    // Clear the live buffer but keep the _currentTrack in memory so we can
    // continue appending points until explicit end-of-day finalization.
    _buffer.clear();
  }
  
  Future<void> pauseTracking() async {
    if (_currentTrack == null) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –∫–∞–∫ —Å–µ–≥–º–µ–Ω—Ç
    if (_buffer.hasData) {
      _logger.info('TRACK_SAVE_START: draining buffer for pauseTracking');
      final segment = _buffer.drain();
      if (segment.pointCount > 0) {
        _logger.info('TRACK_SAVE_SAVING: pause segment.pointCount=${segment.pointCount}');
        _currentTrack!.segments.add(segment);
        final result = await _repository.saveOrUpdateUserTrack(_currentTrack!);
        if (result.isRight()) {
          _logger.info('TRACK_SAVE_COMPLETE: pause saved segment and will emit track');
          // –£–≤–µ–¥–æ–º–ª—è–µ–º UI, —á—Ç–æ–±—ã –æ–Ω —É–≤–∏–¥–µ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
          _trackUpdateController.add(_currentTrack!);
          _lastSavedTrack = _currentTrack;
        } else {
          _logger.warning('TRACK_SAVE_FAILED: pause failed to save segment');
        }
      }
    }
    
    _currentTrack = _currentTrack!.copyWith(
      status: TrackStatus.paused,
    );
    
    final result2 = await _repository.saveOrUpdateUserTrack(_currentTrack!);
    if (result2.isRight()) {
      _trackUpdateController.add(_currentTrack!);
    }
  }

  /// –°–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –≤ —Ç—Ä–µ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫–∞
  Future<bool> flushBufferToCurrentTrack() async {
    if (_currentTrack == null) return false;
    if (!_buffer.hasData) return false;

    final segment = _buffer.drain();
    if (segment.pointCount == 0) return false;

    try {
      _logger.info('TRACK_SAVE_START: explicit flushBufferToCurrentTrack');
      _currentTrack!.segments.add(segment);
      final result = await _repository.saveOrUpdateUserTrack(_currentTrack!);
      if (result.isRight()) {
        _logger.info('TRACK_SAVE_COMPLETE: flush saved segment');
        _trackUpdateController.add(_currentTrack!);
        _logger.info('üíæ TrackManager.flushBufferToCurrentTrack: buffered segment saved and emitted');
        _lastSavedTrack = _currentTrack;
        return true;
      } else {
        _logger.severe('‚ùå TrackManager.flushBufferToCurrentTrack: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return false;
      }
    } catch (e, st) {
      _logger.severe('‚ùå TrackManager.flushBufferToCurrentTrack: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', e, st);
      return false;
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "—Ç–µ–ª–µ–ø–æ—Ä—Ç–æ–≤".
  Future<void> breakCurrentSegment({String? reason}) async {
    if (_currentTrack == null) {
      _logger.warning('TrackManager.breakCurrentSegment: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ (reason=$reason)');
      _buffer.clear();
      return;
    }

    _logger.warning('TrackManager.breakCurrentSegment: reason=$reason, bufferedPoints=${_buffer.pointCount}');

    if (_buffer.hasData) {
      final saved = await flushBufferToCurrentTrack();
      if (!saved) {
        _logger.severe('TrackManager.breakCurrentSegment: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—É—Ñ–µ—Ä, –æ—á–∏—â–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞');
        _buffer.clear();
      } else {
        _buffer.clear();
      }
    } else {
      _buffer.clear();
    }
  }

  void clearLiveBuffer() {
    _buffer.clear();
  }

  /// Persist externally-provided segments (for example from native background queue).
  ///
  /// Rules:
  /// - Segments should be ordered by time before calling this method.
  /// - Segments that are entirely older than the current track end by more than
  ///   [allowedBackfillSeconds] will be dropped as likely invalid/replayed points.
  /// - Each accepted segment is appended to the in-memory current track and
  ///   persisted via repository.saveOrUpdateUserTrack. The method returns true
  ///   only if all persistence operations succeed.
  Future<bool> persistExternalSegments(List<CompactTrack> segments, {int allowedBackfillSeconds = 30}) async {
    if (segments.isEmpty) return true;

    if (_currentTrack == null) {
      _logger.warning('TrackManager.persistExternalSegments: no active _currentTrack in memory');
      return false;
    }

    _logger.info('TrackManager.persistExternalSegments: delegating to persister for track id=${_currentTrack!.id} segments=${segments.length}');
    print('TRACE: persistExternalSegments -> track id=${_currentTrack!.id} segments=${segments.length}');
    final success = await _externalPersister.persistExternalSegments(_currentTrack!, segments, allowedBackfillSeconds: allowedBackfillSeconds);
    print('TRACE: persister returned $success');
    if (success) {
      _updateCounter++;
      _trackUpdateController.add(_currentTrack!);
      try { _lastSavedTrack = _currentTrack; } catch (_) {}
    }
    return success;
  }
  
  Future<void> resumeTracking() async {
    if (_currentTrack == null) return;
    
    _currentTrack = _currentTrack!.copyWith(
      status: TrackStatus.active,
    );
    
    _buffer.clear();
  }
  
  void addGpsPoint(Position position) {
    _logger.info('üìç TrackManager.addGpsPoint: ${position.latitude}, ${position.longitude}');
    
    if (_currentTrack == null) {
      _logger.warning('‚ùå _currentTrack == null, –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É');
      return;
    }
    
    if (_currentTrack!.status != TrackStatus.active) {
      _logger.warning('‚ùå –¢—Ä–µ–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (status: ${_currentTrack!.status}), –Ω–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É');
      return;
    }
    
    _buffer.addPoint(position);
    _logger.info('‚úÖ –¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ GPS –±—É—Ñ–µ—Ä. –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –≤ –±—É—Ñ–µ—Ä–µ: ${_buffer.pointCount}');
  }
  
  void dispose() {
    _autoFlushSubscription?.cancel();
    _persistTimer?.cancel();
    _buffer.dispose();
    _trackUpdateController.close();
  }
  
  /// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª—å—Ü–µ–≤–æ–≥–æ –±—É—Ñ–µ—Ä–∞
  Future<void> _onAutoFlush(CompactTrack segment) async {
    _logger.info('üö® TrackManager._onAutoFlush: –í–´–ó–í–ê–ù —Å —Å–µ–≥–º–µ–Ω—Ç–æ–º ${segment.pointCount} —Ç–æ—á–µ–∫');

    if (_currentTrack == null) {
      _logger.warning('‚ö†Ô∏è TrackManager._onAutoFlush: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞');
      return;
    }

    if (segment.pointCount == 0) {
      _logger.info('‚ö†Ô∏è TrackManager._onAutoFlush: –ø—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    _logger.info('üì• TrackManager._onAutoFlush: currentTrack=${_currentTrack!.id}, —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–æ: ${_currentTrack!.segments.length}');

    try {
      _currentTrack!.segments.add(segment);

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ
      final result = await _repository.saveOrUpdateUserTrack(_currentTrack!);
      if (result.isRight()) {
        _logger.info('üíæ TrackManager._onAutoFlush: –∞–≤—Ç–æ—Å–µ–≥–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î! –°–µ–≥–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞–ª–æ: ${_currentTrack!.segments.length}');
        // Cache last saved track for UI restore
        try { _lastSavedTrack = _currentTrack; } catch (_) {}
      } else {
        _logger.severe('‚ùå TrackManager._onAutoFlush: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: ${result.fold((l) => l.toString(), (r) => '')}');
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞
      _updateCounter++;
      _logger.info('üì¢ TrackManager._onAutoFlush: –û–¢–ü–†–ê–í–õ–Ø–ï–ú –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ #$_updateCounter –≤ trackUpdateStream');
      _logger.info('   üìä –¢—Ä–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ID=${_currentTrack!.id}, —Å–µ–≥–º–µ–Ω—Ç–æ–≤=${_currentTrack!.segments.length}, —Ç–æ—á–µ–∫=${_currentTrack!.totalPoints}');
      for (int i = 0; i < _currentTrack!.segments.length; i++) {
        _logger.info('      segment[$i]: ${_currentTrack!.segments[i].pointCount} —Ç–æ—á–µ–∫');
      }
      _trackUpdateController.add(_currentTrack!);
      _logger.info('‚úÖ TrackManager._onAutoFlush: —Ç—Ä–µ–∫ #$_updateCounter –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ UI');
    } catch (e, st) {
      _logger.severe('‚ùå TrackManager._onAutoFlush: –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞', e, st);
    }
  }
}
