import 'dart:async';
import 'package:fieldforce/features/navigation/tracking/domain/services/location_tracking_service_base.dart';
import 'package:geolocator/geolocator.dart';
import 'package:logging/logging.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/navigation_user.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/user_track.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/compact_track.dart';
import 'gps_data_manager.dart';
import 'track_manager.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/track_snapshot.dart';
import 'package:fieldforce/app/services/app_session_service.dart';

/// –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
/// 
/// –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
/// - GpsBuffer: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—á–µ–∫ –≤ –ø–∞–º—è—Ç–∏
/// - OptimizedTrackManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞–º–∏ —Å batch –∑–∞–ø–∏—Å—å—é
/// - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ UI –∏ persistence —Å–ª–æ—ë–≤
/// - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
class LocationTrackingService implements LocationTrackingServiceBase  {
  static final Logger _logger = Logger('LocationTrackingService');
  final GpsDataManager _gpsDataManager;
  late final TrackManager _trackManager;
  // Optional injection point for tests: custom position stream provider
  final Stream<Position> Function(LocationSettings settings)? _positionStreamProvider;
  StreamSubscription<Position>? _positionSubscription;
  StreamSubscription<UserTrack>? _trackUpdateSubscription; // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ TrackManager
  
  final StreamController<Position> _positionController = 
      StreamController<Position>.broadcast();
      
  final StreamController<bool> _trackingStateController = 
      StreamController<bool>.broadcast();
      
  final StreamController<bool> _pauseStateController = 
      StreamController<bool>.broadcast();
      
  // –°—Ç—Ä–∏–º –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π UI —Å –ø–æ–ª–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ç—Ä–µ–∫–∞ (–≤–∫–ª—é—á–∞—è –±—É—Ñ–µ—Ä)
  final StreamController<UserTrack> _liveTrackUpdateController = 
      StreamController<UserTrack>.broadcast();
  UserTrack? _lastEmittedTrack;
  CompactTrack? _lastLiveBuffer;
  
  Position? _lastPosition;
  bool _isActive = false;
  int _stationaryCount = 0;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞
  final LocationSettings _locationSettings = const LocationSettings(
    accuracy: LocationAccuracy.high,
    distanceFilter: 3, // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  );
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  static const double _minAccuracy = 20.0;
  static const double _maxSpeed = 150.0; // –∫–º/—á - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑—É–º–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
  static const int _stationaryThreshold = 50; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—É–∑—ã (—É–≤–µ–ª–∏—á–µ–Ω–æ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥)
  static const double _minDistanceMeters = 5.0; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏

  LocationTrackingService(this._gpsDataManager, this._trackManager, {Stream<Position> Function(LocationSettings settings)? positionStreamProvider}) : _positionStreamProvider = positionStreamProvider {
    _logger.fine('üèóÔ∏è LocationTrackingService: –ø–æ–ª—É—á–∏–ª–∏ TrackManager –∏–∑ DI');
    _trackingStateController.add(false);
    _pauseStateController.add(false);
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç TrackManager –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Ö –≤ UI
    _trackUpdateSubscription = _trackManager.trackUpdateStream.listen((track) {
      _logger.fine('üîÑ LocationTrackingService: –ø–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç TrackManager');
      _logger.fine('   üìä –¢—Ä–µ–∫ ID: ${track.id}, —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ${track.segments.length}, —Ç–æ—á–µ–∫: ${track.totalPoints}');
      _logger.fine('    –î–µ—Ç–∞–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:');
      for (int i = 0; i < track.segments.length; i++) {
        final segment = track.segments[i];
        _logger.fine('      segment[$i]: ${segment.pointCount} —Ç–æ—á–µ–∫');
      }
      
        if (!_liveTrackUpdateController.isClosed) {
          _liveTrackUpdateController.add(track);
          _lastEmittedTrack = track;
          _logger.fine('‚úÖ LocationTrackingService: —Ç—Ä–µ–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω –≤ UI —Å—Ç—Ä–∏–º—ã');
        } else {
        _logger.warning('‚ùå LocationTrackingService: _liveTrackUpdateController –∑–∞–∫—Ä—ã—Ç!');
      }
    }, onError: (error) {
      _logger.severe('‚ùå LocationTrackingService: –æ—à–∏–±–∫–∞ –≤ trackUpdateStream –æ—Ç TrackManager: $error');
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ live buffer –æ—Ç TrackManager —á—Ç–æ–±—ã –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π
    // —Å–µ–≥–º–µ–Ω—Ç –±—É—Ñ–µ—Ä–∞ ‚Äî —ç—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–µ–ø–ª–µ–π-—ç–º–∏—Å—Å–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö
    // –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ liveBufferStream.
    _trackManager.liveBufferStream.listen((buffer) {
      try {
        _lastLiveBuffer = buffer;
      } catch (e, st) {
        _logger.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ live buffer', e, st);
      }
    }, onError: (error) {
      _logger.warning('–û—à–∏–±–∫–∞ –≤ liveBufferStream –æ—Ç TrackManager: $error');
    });
  }

  /// –°—Ç—Ä–∏–º—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  Stream<Position> get positionStream => Stream<Position>.multi((controller) {
        // replay last known position to late subscribers
        if (_lastPosition != null) controller.add(_lastPosition!);
        final sub = _positionController.stream.listen((p) {
          controller.add(p);
        }, onError: controller.addError, onDone: controller.close);
        controller.onCancel = () {
          sub.cancel();
        };
      });

  @override
  TrackSnapshot getCurrentSnapshot() {
    final persisted = _trackManager.currentTrackForUI;
    final live = _lastLiveBuffer;
    final pos = _lastPosition;
    return TrackSnapshot(persistedTrack: persisted, liveBuffer: live, lastPosition: pos);
  }

  @override
  Stream<UserTrack> get trackUpdateStream => Stream<UserTrack>.multi((controller) {
        // replay last emitted track to late subscribers
        if (_lastEmittedTrack != null) {
          controller.add(_lastEmittedTrack!);
        }
        final sub = _liveTrackUpdateController.stream.listen((t) {
          controller.add(t);
        }, onError: controller.addError, onDone: controller.close);
        controller.onCancel = () {
          sub.cancel();
        };
      });
  
  Stream<CompactTrack> get liveBufferStream => Stream<CompactTrack>.multi((controller) {
        // replay last live buffer to late subscribers
        if (_lastLiveBuffer != null) controller.add(_lastLiveBuffer!);
        final sub = _trackManager.liveBufferStream.listen((buffer) {
          // cache latest live buffer for future subscribers
          _lastLiveBuffer = buffer;
          controller.add(buffer);
        }, onError: controller.addError, onDone: controller.close);
        controller.onCancel = () {
          sub.cancel();
        };
      });
  Stream<bool> get trackingStateStream => _trackingStateController.stream;
  Stream<bool> get pauseStateStream => _pauseStateController.stream;
  
  /// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  Stream<UserTrack?> get currentTrackStream => _trackManager.trackUpdateStream;
  UserTrack? get currentTrack => _trackManager.currentTrackForUI;
  @override
  bool get isTracking => _positionSubscription != null && _isActive;
  bool get isActive => _isActive;
  bool get isPaused => _positionSubscription != null && !_isActive;
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
  Future<bool> checkPermissions() async {
    try {
      return await _gpsDataManager.checkPermissions();
    } catch (e) {
      // –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      return false;
    }
  }
  
  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - TrackManager —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
  @override
  Future<bool> startTracking(NavigationUser user) async {
    try {
      _logger.info('üéØ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.fullName} (ID: ${user.id})');
      
      if (isTracking) {
        _logger.warning('‚ö†Ô∏è –¢—Ä–µ–∫–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false');
        return false;
      }

      _logger.info('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è GPS...');
      final hasPermission = await checkPermissions();
      if (!hasPermission) {
        _logger.severe('‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
        return false;
      }
      _logger.info('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è GPS –ø–æ–ª—É—á–µ–Ω—ã');

      _logger.info('üèÉ –ó–∞–ø—É—Å–∫–∞–µ–º TrackManager...');
      final success = await _trackManager.startTracking(user: user);

      if (!success) {
        _logger.severe('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å TrackManager');
        return false;
      }
      _logger.info('‚úÖ TrackManager —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
      
      _isActive = true;
      _trackingStateController.add(true);
      
      _lastPosition = null;
      _stationaryCount = 0;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Ç—Ä–µ–∫–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      final currentTrack = _trackManager.currentTrackForUI;
      if (currentTrack != null && currentTrack.isNotEmpty) {
        _setLastPositionFromTrack(currentTrack);
        _logger.info('üìç –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞');
      }

      _logger.info('üõ∞Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö...');
      final gpsStarted = await _gpsDataManager.startGps();
      if (!gpsStarted) {
        _logger.severe('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö');
        return false;
      }
      _logger.info('‚úÖ GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω');

      _logger.info('üîÑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ GPS –ø–æ–∑–∏—Ü–∏–π...');
    final Stream<Position> posStream = _positionStreamProvider != null
      ? _positionStreamProvider(_locationSettings)
      : _gpsDataManager.getPositionStream(settings: _locationSettings);

      _positionSubscription = posStream.listen((pos) => _onPositionUpdate(pos), onError: (error) async {
        _logger.warning('‚ö†Ô∏è LocationTrackingService: –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—É—Ñ–µ—Ä: $error');
        try {
          await _trackManager.flushBufferToCurrentTrack();
          _logger.info('‚úÖ –ë—É—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å—Ç—Ä–∏–º–∞');
        } catch (e, st) {
          _logger.warning('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å—Ç—Ä–∏–º–∞', e, st);
        }
        _onPositionError(error);
      }, onDone: () async {
        _logger.info('‚ÑπÔ∏è LocationTrackingService: –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (onDone), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±—É—Ñ–µ—Ä');
        try {
          await _trackManager.flushBufferToCurrentTrack();
          _logger.info('‚úÖ –ë—É—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞');
        } catch (e, st) {
          _logger.warning('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞', e, st);
        }
      });

      final trackId = _trackManager.currentTrackForUI?.id;
      if (trackId != null) {
        _logger.info('üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–ª—è —Ç—Ä–µ–∫–∞ ID: $trackId');
        // –ö–†–ò–¢–ò–ß–ù–û: –≠–º–∏—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞
        final currentTrack = _trackManager.currentTrackForUI;
        if (currentTrack != null && !_liveTrackUpdateController.isClosed) {
          _liveTrackUpdateController.add(currentTrack);
          _lastEmittedTrack = currentTrack;
          _logger.info('üì° –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–∞—è —ç–º–∏—Å—Å–∏—è —Ç—Ä–µ–∫–∞ ID: $trackId –¥–ª—è UI');
        }
      } else {
        _logger.info('üÜï –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
      
      _logger.info('üéâ –¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      return true;
      
    } catch (e, st) {
      _logger.severe('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞', e, st);
      return false;
    }
  }
  
  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç startTracking
  @override
  Future<bool> autoStartTracking({required NavigationUser user}) async {
    final currentSession = AppSessionService.currentSession;
    if (currentSession?.appUser.employee != null) {
      currentSession!.appUser.employee.id;
    }

    return await startTracking(user);
  }

  @override
  Future<bool> stopTracking() async {
    try {
      // –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—É—Ñ–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏
      try {
        await _trackManager.flushBufferToCurrentTrack();
      } catch (e, st) {
        _logger.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–ª–µ—à–µ –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ stopTracking', e, st);
      }

      await _positionSubscription?.cancel();

      if (_trackManager.currentTrackForUI != null) {
        await _trackManager.stopTracking();
      }
      
      _isActive = false;
      _trackingStateController.add(false);
      _pauseStateController.add(false);
      return true;
      
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞', e, st);
      return false;
    }
  }

  @override
  Future<bool> pauseTracking() async {
    try {
      if (!isActive) {
        return false;
      }
      // –ø–µ—Ä–µ–¥ –ø–∞—É–∑–æ–π ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä —á—Ç–æ–±—ã –≥–æ–ª—É–±–æ–π —Å–µ–≥–º–µ–Ω—Ç –æ—Å—Ç–∞–ª—Å—è –≤–∏–¥–∏–º—ã–º
      try {
        await _trackManager.flushBufferToCurrentTrack();
      } catch (e, st) {
        _logger.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–ª–µ—à–µ –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ pauseTracking', e, st);
      }

      await _trackManager.pauseTracking();

      _isActive = false;
      _pauseStateController.add(true);

      return true;
    } catch (e) {
      _logger.warning('–û—à–∏–±–∫–∞ –ø–∞—É–∑—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
      return false;
    }
  }


  @override
  Future<bool> resumeTracking() async {
    try {
      if (!isPaused) {
        return false;
      }
      
      await _trackManager.resumeTracking();
      
      _isActive = true;
      _pauseStateController.add(false);
      
      return true;
    } catch (e) {
      _logger.warning('–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
      return false;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ GPS
  void _onPositionUpdate(Position position) {
    try {
      _logger.info('üìç LocationTrackingService.onPositionUpdate: ${position.latitude}, ${position.longitude} (—Ç–æ—á–Ω–æ—Å—Ç—å: ${position.accuracy}m)');
      
      if (!_isValidPosition(position)) {
        _logger.warning('‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è (—Ç–æ—á–Ω–æ—Å—Ç—å: ${position.accuracy})');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      if (!_shouldRecordPosition(position)) {
        double distance = 0.0;
        if (_lastPosition != null) {
          distance = Geolocator.distanceBetween(
            _lastPosition!.latitude,
            _lastPosition!.longitude,
            position.latitude,
            position.longitude,
          );
        }
        _logger.info('üìè –ü–æ–∑–∏—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é: ${distance.toStringAsFixed(1)}m < $_minDistanceMeters');
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ track manager (–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é)
      if (_isActive) {
        _logger.info('üìç LocationTrackingService: –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ—á–∫—É –≤ TrackManager (_isActive=true)');
        _trackManager.addGpsPoint(position);
        _logger.info('‚úÖ –¢–æ—á–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ TrackManager');
        
        // –ö–†–ò–¢–ò–ß–ù–û: –≠–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–≤–∫–ª—é—á–∞—è –±—É—Ñ–µ—Ä) –≤ UI
        final currentTrack = _trackManager.currentTrackForUI;
        if (currentTrack != null) {
          _logger.fine('üì° –≠–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–∞ —Å –±—É—Ñ–µ—Ä–æ–º –≤ liveTrackUpdateController');
          if (!_liveTrackUpdateController.isClosed) {
            _liveTrackUpdateController.add(currentTrack);
          }
        }
      } else {
        _logger.warning('‚ö†Ô∏è LocationTrackingService: —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (_isActive=false) - –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ TrackManager');
      }

      _lastPosition = position;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å
      _checkStationaryState(position);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å—Ç—Ä–∏–º –¥–ª—è UI
      _positionController.add(position);
      _logger.fine('üì° –ü–æ–∑–∏—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ UI —Å—Ç—Ä–∏–º');
      
    } catch (e, st) {
      _logger.severe('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏', e, st);
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ GPS
  void _onPositionError(dynamic error) {
    _logger.severe('–û—à–∏–±–∫–∞ GPS: $error');

    // –ü—Ä–∏ –æ—à–∏–±–∫–µ GPS –ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—É—Ñ–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏
    try {
      _trackManager.flushBufferToCurrentTrack();
    } catch (e, st) {
      _logger.warning('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–ª–µ—à–µ –±—É—Ñ–µ—Ä–∞ –≤ _onPositionError', e, st);
    }
  }

  bool _isValidPosition(Position position) {
    if (position.accuracy > _minAccuracy) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏)
    final speedKmh = position.speed * 3.6;
    if (speedKmh > _maxSpeed) {
      return false;
    }
    
    return true;
  }

  bool _shouldRecordPosition(Position position) {
    if (_lastPosition == null) return true;
    
    final distance = Geolocator.distanceBetween(
      _lastPosition!.latitude,
      _lastPosition!.longitude,
      position.latitude,
      position.longitude,
    );
    
    return distance >= _minDistanceMeters;
  }

  void _checkStationaryState(Position position) {
    if (_lastPosition == null) return;
    
    final distance = Geolocator.distanceBetween(
      _lastPosition!.latitude,
      _lastPosition!.longitude,
      position.latitude,
      position.longitude,
    );
    
    if (distance < _minDistanceMeters) {
      _stationaryCount++;
    } else {
      _stationaryCount = 0;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ GPS)
    if (_stationaryCount >= _stationaryThreshold && _isActive && _gpsDataManager.currentMode == GpsMode.real) {
      pauseTracking();
    }
  }

  void _setLastPositionFromTrack(UserTrack track) {
    if (track.segments.isEmpty) return;

    final lastSegment = track.segments.last;
    if (lastSegment.pointCount == 0) return;

    final lastIndex = lastSegment.pointCount - 1;
    final (lat, lng) = lastSegment.getCoordinates(lastIndex);
    final timestamp = lastSegment.getTimestamp(lastIndex);

    _lastPosition = Position(
      latitude: lat,
      longitude: lng,
      timestamp: timestamp,
      accuracy: lastSegment.getAccuracy(lastIndex) ?? 5.0,
      altitude: 0.0,
      altitudeAccuracy: 10.0,
      heading: lastSegment.getBearing(lastIndex) ?? 0.0,
      headingAccuracy: 15.0,
      speed: (lastSegment.getSpeed(lastIndex) ?? 30.0) / 3.6, // –∫–º/—á -> –º/—Å
      speedAccuracy: 2.0,
    );

    _logger.info("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: $lat, $lng");
  }

  void dispose() {
    _positionSubscription?.cancel();
    _trackUpdateSubscription?.cancel(); // –î–æ–±–∞–≤–ª–µ–Ω–æ
    _trackManager.dispose();
    _positionController.close();
    _trackingStateController.close();
    _pauseStateController.close();
    _liveTrackUpdateController.close();
  }
}
