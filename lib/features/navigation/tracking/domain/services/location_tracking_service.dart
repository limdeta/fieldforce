import 'dart:async';
import 'package:fieldforce/features/navigation/tracking/domain/services/location_tracking_service_base.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:get_it/get_it.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/navigation_user.dart';
import '../entities/user_track.dart';
import '../enums/track_status.dart';
import '../repositories/user_track_repository.dart';
import 'gps_data_manager.dart';
import 'track_manager.dart';
import 'package:fieldforce/app/services/app_session_service.dart';

/// –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
/// 
/// –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
/// - GpsBuffer: –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—á–µ–∫ –≤ –ø–∞–º—è—Ç–∏
/// - OptimizedTrackManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞–º–∏ —Å batch –∑–∞–ø–∏—Å—å—é
/// - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ UI –∏ persistence —Å–ª–æ—ë–≤
/// - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
class LocationTrackingService implements LocationTrackingServiceBase  {
  static const String _tag = 'LocationTracking';
  final GpsDataManager _gpsDataManager;
  late final TrackManager _trackManager;
  StreamSubscription<Position>? _positionSubscription;
  
  final StreamController<Position> _positionController = 
      StreamController<Position>.broadcast();
      
  final StreamController<bool> _trackingStateController = 
      StreamController<bool>.broadcast();
      
  final StreamController<bool> _pauseStateController = 
      StreamController<bool>.broadcast();
  
  Position? _lastPosition;
  bool _isActive = false;
  int _stationaryCount = 0;

  final UserTrackRepository _trackRepository = GetIt.instance<UserTrackRepository>();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞
  final LocationSettings _locationSettings = const LocationSettings(
    accuracy: LocationAccuracy.high,
    distanceFilter: 3, // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  );
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  static const double _minAccuracy = 20.0;
  static const double _maxSpeed = 150.0; // –∫–º/—á - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑—É–º–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
  static const int _stationaryThreshold = 5; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—É–∑—ã
  static const double _minDistanceMeters = 5.0; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏

  LocationTrackingService(this._gpsDataManager) {
    _trackManager = TrackManager(_trackRepository);
    _trackingStateController.add(false);
    _pauseStateController.add(false);
  }

  /// –°—Ç—Ä–∏–º—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏ÔøΩÔøΩ
  Stream<Position> get positionStream => _positionController.stream;
  @override
  Stream<UserTrack> get trackUpdateStream => _trackManager.trackUpdateStream;
  Stream<bool> get trackingStateStream => _trackingStateController.stream;
  Stream<bool> get pauseStateStream => _pauseStateController.stream;
  
  /// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  Stream<UserTrack?> get currentTrackStream => _trackManager.trackUpdateStream;
  UserTrack? get currentTrack => _trackManager.currentTrackForUI;
  @override
  bool get isTracking => _positionSubscription != null;
  bool get isActive => _isActive;
  bool get isPaused => isTracking && !_isActive;
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
  Future<bool> checkPermissions() async {
    try {
      return await _gpsDataManager.checkPermissions();
    } catch (e) {
      print('$_tag: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
      return false;
    }
  }
  
  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - TrackManager —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
  @override
  Future<bool> startTracking(NavigationUser user) async {
    try {
      if (isTracking) {
        print('$_tag: –¢—Ä–µ–∫–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        return false;
      }

      final hasPermission = await checkPermissions();
      if (!hasPermission) {
        print('$_tag: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
        return false;
      }


      final success = await _trackManager.startTracking(user: user);

      if (!success) {
        print('$_tag: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä');
        return false;
      }
      
      _isActive = true;
      _trackingStateController.add(true);
      
      _lastPosition = null;
      _stationaryCount = 0;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Ç—Ä–µ–∫–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      final currentTrack = _trackManager.currentTrackForUI;
      if (currentTrack != null && currentTrack.isNotEmpty) {
        _setLastPositionFromTrack(currentTrack);
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
      print('$_tag: üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö...');
      final gpsStarted = await _gpsDataManager.startGps();
      if (!gpsStarted) {
        print('$_tag: ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö');
        return false;
      }
      print('$_tag: ‚úÖ GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ GPS
      print('$_tag: üì° –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ GPS –ø–æ—Ç–æ–∫...');
      _positionSubscription = _gpsDataManager.getPositionStream(
        settings: _locationSettings,
      ).listen(_onPositionUpdate, onError: _onPositionError);
      print('$_tag: ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ GPS –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–∞');

      final trackId = _trackManager.currentTrackForUI?.id;
      if (trackId != null) {
        print('$_tag: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–ª—è —Ç—Ä–µ–∫–∞ $trackId');
      } else {
        print('$_tag: –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}');
      }
      return true;
      
    } catch (e) {
      print('$_tag: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
      return false;
    }
  }
  
  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–∏–Ω–≥–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç startTracking
  @override
  Future<bool> autoStartTracking({required NavigationUser user}) async {
    print('$_tag: –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}');

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    final currentSession = AppSessionService.currentSession;
    if (currentSession?.appUser.employee != null) {
      final userId = currentSession!.appUser.employee.id;
      print('‚úÖ –ü–æ–ª—É—á–µ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ AppUser.employee: $userId');
    }

    // –í—Å—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ —Ç–µ–ø–µ—Ä—å –≤ TrackManager.startTracking
    return await startTracking(user);
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏–Ω–≥
  @override
  Future<bool> stopTracking() async {
    try {
      await _positionSubscription?.cancel();
      print('$_tag: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–∫ÔøΩÔøΩ–Ω–≥–∞ –¥–ª—è —Ç—Ä–µ–∫–∞');

      if (_trackManager.currentTrackForUI != null) {
        await _trackManager.stopTracking();
      }
      
      _isActive = false;
      _trackingStateController.add(false);
      _pauseStateController.add(false);
      
      print('$_tag: –¢—Ä–µ–∫–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return true;
      
    } catch (e) {
      print('$_tag: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
      return false;
    }
  }

  /// –°—Ç–∞–≤–∏—Ç —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–∞ –ø–∞—É–∑—É
  @override
  Future<bool> pauseTracking() async {
    try {
      if (!isActive) {
        print('$_tag: –¢—Ä–µ–∫–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
        return false;
      }
      
      await _trackManager.pauseTracking();
      
      _isActive = false;
      _pauseStateController.add(true);
      
      print('$_tag: –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É');
      return true;
      
    } catch (e) {
      print('$_tag: –ûÔøΩÔøΩ–∏–±–∫–∞ –ø–∞—É–∑—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
      return false;
    }
  }

  /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
  @override
  Future<bool> resumeTracking() async {
    try {
      if (!isPaused) {
        print('$_tag: –¢—Ä–µ–∫–∏–Ω–≥ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ');
        return false;
      }
      
      await _trackManager.resumeTracking();
      
      _isActive = true;
      _pauseStateController.add(false);
      
      print('$_tag: –¢—Ä–µ–∫–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω');
      return true;
      
    } catch (e) {
      print('$_tag: –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
      return false;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ GPS
  void _onPositionUpdate(Position position) {
    try {
      print('$_tag: üîÑ _onPositionUpdate() - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é ${position.latitude}, ${position.longitude}');

      // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
      if (!_isValidPosition(position)) {
        print('$_tag: ‚ùå –ü–æ–∑–∏—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è (—Ç–æ—á–Ω–æ—Å—Ç—å: ${position.accuracy})');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      if (!_shouldRecordPosition(position)) {
        print('$_tag: ‚ùå –ü–æ–∑–∏—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é');
        return;
      }

      print('$_tag: ‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º');

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ track manager (–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é)
      if (_isActive) {
        print('$_tag: üìä –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ TrackManager');
        _trackManager.addGpsPoint(position);
      } else {
        print('$_tag: ‚ö†Ô∏è –¢—Ä–µ–∫–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ TrackManager');
      }

      _lastPosition = position;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å
      _checkStationaryState(position);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å—Ç—Ä–∏–º –¥–ª—è UI
      print('$_tag: üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ UI —Å—Ç—Ä–∏–º');
      _positionController.add(position);
      
    } catch (e) {
      print('$_tag: ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: $e');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ GPS
  void _onPositionError(dynamic error) {
    print('$_tag: –û—à–∏–±–∫–∞ GPS: $error');
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å GPS –ø–æ–∑–∏—Ü–∏–∏
  bool _isValidPosition(Position position) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
    if (position.accuracy > _minAccuracy) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏)
    final speedKmh = position.speed * 3.6;
    if (speedKmh > _maxSpeed) {
      return false;
    }
    
    return true;
  }
  
  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
  bool _shouldRecordPosition(Position position) {
    if (_lastPosition == null) return true;
    
    final distance = Geolocator.distanceBetween(
      _lastPosition!.latitude,
      _lastPosition!.longitude,
      position.latitude,
      position.longitude,
    );
    
    return distance >= _minDistanceMeters;
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å
  void _checkStationaryState(Position position) {
    if (_lastPosition == null) return;
    
    final distance = Geolocator.distanceBetween(
      _lastPosition!.latitude,
      _lastPosition!.longitude,
      position.latitude,
      position.longitude,
    );
    
    if (distance < _minDistanceMeters) {
      _stationaryCount++;
    } else {
      _stationaryCount = 0;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ GPS)
    if (_stationaryCount >= _stationaryThreshold && _isActive && _gpsDataManager.currentMode == GpsMode.real) {
      pauseTracking();
    }
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
  void _setLastPositionFromTrack(UserTrack track) {
    if (track.segments.isEmpty) return;

    final lastSegment = track.segments.last;
    if (lastSegment.pointCount == 0) return;

    final lastIndex = lastSegment.pointCount - 1;
    final (lat, lng) = lastSegment.getCoordinates(lastIndex);
    final timestamp = lastSegment.getTimestamp(lastIndex);

    _lastPosition = Position(
      latitude: lat,
      longitude: lng,
      timestamp: timestamp,
      accuracy: lastSegment.getAccuracy(lastIndex) ?? 5.0,
      altitude: 0.0,
      altitudeAccuracy: 10.0,
      heading: lastSegment.getBearing(lastIndex) ?? 0.0,
      headingAccuracy: 15.0,
      speed: (lastSegment.getSpeed(lastIndex) ?? 30.0) / 3.6, // –∫–º/—á -> –º/—Å
      speedAccuracy: 2.0,
    );

    print('$_tag: –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: $lat, $lng');
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
  void dispose() {
    _positionSubscription?.cancel();
    _trackManager.dispose();
    _positionController.close();
    _trackingStateController.close();
    _pauseStateController.close();
  }
}
