import 'dart:async';
import 'package:geolocator/geolocator.dart';
import 'package:logging/logging.dart';

/// –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ GPS –¥–∞–Ω–Ω—ã—Ö
///
/// –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º GPS (geolocator) –∏ –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏
/// –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π —Å—Ä–µ–¥–µ
abstract class GpsDataSource {
  /// –°—Ç—Ä–∏–º –ø–æ–∑–∏—Ü–∏–π GPS
  Stream<Position> getPositionStream({required LocationSettings settings});
  Future<bool> checkPermissions();
  Future<Position> getCurrentPosition({required LocationSettings settings});
  Future<void> dispose();
}

/// –†–µ–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ GPS –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ geolocator —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
///
/// - –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —ç–º–∏—Å—Å–∏–∏ —á–µ—Ä–µ–∑ Timer
/// - –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
/// - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
class RealGpsDataSource implements GpsDataSource {
  static final Logger _logger = Logger('RealGpsDataSource');
  static const String _tag = 'RealGPS';

  // –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è —ç–º–∏—Å—Å–∏—è
  StreamController<Position>? _positionController;
  StreamSubscription<Position>? _geolocatorSubscription;
  Timer? _emissionTimer;
  Position? _lastBufferedPosition;
  bool _isActive = false;

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–∫–∞–∫ –≤ Mock GPS)
  static const Duration _emissionInterval = Duration(seconds: 2);
  static const Duration _positionTimeout = Duration(seconds: 10);

  @override
  Stream<Position> getPositionStream({required LocationSettings settings}) {
    _logger.info('üìç $_tag: –ó–∞–ø—É—Å–∫ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ GPS —Å—Ç—Ä–∏–º–∞');

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π —Å—Ç—Ä–∏–º
    _positionController = StreamController<Position>.broadcast();
    _isActive = true;

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π GPS
    _startGeolocatorSubscription(settings);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—É—é —ç–º–∏—Å—Å–∏—é
    _startEmissionTimer();

    return _positionController!.stream;
  }

  void _startGeolocatorSubscription(LocationSettings settings) {
    _logger.info('üì° $_tag: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Geolocator —Å—Ç—Ä–∏–º');

    _geolocatorSubscription =
        Geolocator.getPositionStream(locationSettings: settings).listen(
          (position) {
            if (_isActive) {
              _logger.info(
                'üìç $_tag: –ü–æ–ª—É—á–µ–Ω–∞ GPS –ø–æ–∑–∏—Ü–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã: ${position.latitude}, ${position.longitude} (accuracy: ${position.accuracy}m)',
              );
              _lastBufferedPosition = position;

              // Forward immediately to the controller to avoid losing updates
              // if the emission timer is paused by the platform when app is backgrounded.
              if (_positionController != null &&
                  !_positionController!.isClosed) {
                try {
                  _positionController!.add(position);
                  _logger.fine(
                    'üì§ $_tag: –ü–æ–∑–∏—Ü–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä',
                  );
                } catch (e, st) {
                  _logger.warning(
                    '‚ö†Ô∏è $_tag: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä',
                    e,
                    st,
                  );
                }
              }
            }
          },
          onError: (error, stackTrace) {
            _logger.severe('‚ùå $_tag: –û—à–∏–±–∫–∞ GPS —Å—Ç—Ä–∏–º–∞: $error');
            // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞ –¥–∞–ª—å—à–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ GPS
            // –ü–æ—Ç–æ–∫ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            if (error is! TimeoutException) {
              if (_positionController != null &&
                  !_positionController!.isClosed) {
                _positionController!.addError(error, stackTrace);
              }
            }
          },
          onDone: () {
            _logger.info('‚úÖ $_tag: GPS —Å—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω');
          },
        );
  }

  void _startEmissionTimer() {
    _logger.info(
      '‚è∞ $_tag: –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π —ç–º–∏—Å—Å–∏–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: $_emissionInterval)',
    );
    Position? _lastEmittedPosition;

    _emissionTimer = Timer.periodic(_emissionInterval, (timer) {
      if (!_isActive ||
          _positionController == null ||
          _positionController!.isClosed) {
        timer.cancel();
        return;
      }

      // –≠–º–∏—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
      if (_lastBufferedPosition != null) {
        final shouldEmit =
            _lastEmittedPosition == null ||
            _lastEmittedPosition!.latitude != _lastBufferedPosition!.latitude ||
            _lastEmittedPosition!.longitude != _lastBufferedPosition!.longitude;

        if (shouldEmit) {
          try {
            _positionController!.add(_lastBufferedPosition!);
            _lastEmittedPosition = _lastBufferedPosition;
            _logger.info(
              'üì§ $_tag: –≠–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ù–û–í–ê–Ø –ø–æ–∑–∏—Ü–∏—è: ${_lastBufferedPosition!.latitude}, ${_lastBufferedPosition!.longitude} - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LocationTrackingService',
            );
          } catch (e, st) {
            _logger.severe('‚ùå $_tag: –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–º–∏—Å—Å–∏–∏ –ø–æ–∑–∏—Ü–∏–∏', e, st);
          }
        } else {
          _logger.fine('‚è≥ $_tag: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–º–∏—Å—Å–∏—é');
        }
      } else {
        _logger.fine('‚è≥ $_tag: –ù–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç–º–∏—Å—Å–∏–∏');
      }
    });
  }

  @override
  Future<bool> checkPermissions() async {
    try {
      _logger.info('üîê $_tag: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π GPS');

      LocationPermission permission = await Geolocator.checkPermission()
          .timeout(const Duration(seconds: 5));

      _logger.fine('üîê $_tag: –¢–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: $permission');

      if (permission == LocationPermission.denied) {
        _logger.info('üîê $_tag: –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è GPS');
        permission = await Geolocator.requestPermission().timeout(
          const Duration(seconds: 10),
        );
        _logger.info('üîê $_tag: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: $permission');
      }

      final hasPermission =
          permission == LocationPermission.whileInUse ||
          permission == LocationPermission.always;

      _logger.info(
        'üîê $_tag: –†–∞–∑—Ä–µ—à–µ–Ω–∏—è ${hasPermission ? '–ø–æ–ª—É—á–µ–Ω—ã' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω—ã'}',
      );
      return hasPermission;
    } catch (e, st) {
      _logger.severe('‚ùå $_tag: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π', e, st);
      return false;
    }
  }

  @override
  Future<Position> getCurrentPosition({
    required LocationSettings settings,
  }) async {
    try {
      _logger.info('üìç $_tag: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏');

      final position = await Geolocator.getCurrentPosition(
        desiredAccuracy: settings.accuracy,
      ).timeout(_positionTimeout);

      _logger.info(
        '‚úÖ $_tag: –ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${position.latitude}, ${position.longitude}',
      );
      return position;
    } catch (e, st) {
      _logger.severe('‚ùå $_tag: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏', e, st);
      rethrow;
    }
  }

  @override
  Future<void> dispose() async {
    _logger.info('üßπ $_tag: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤');

    _isActive = false;

    _emissionTimer?.cancel();
    _emissionTimer = null;

    await _geolocatorSubscription?.cancel();
    _geolocatorSubscription = null;

    if (_positionController != null && !_positionController!.isClosed) {
      await _positionController!.close();
    }
    _positionController = null;

    _lastBufferedPosition = null;

    _logger.info('‚úÖ $_tag: –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }
}
