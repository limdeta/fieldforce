import 'dart:async';
import 'dart:convert';
import 'dart:math' as math;
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:geolocator/geolocator.dart';
import 'gps_data_source.dart';

/// –ú–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ GPS –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
/// 
/// –≠–º—É–ª–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –∏–∑ JSON —Ñ–∞–π–ª–∞.
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
/// - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
/// - –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
/// - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
/// - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
class MockGpsDataSource implements GpsDataSource {
  static const String _tag = 'MockGPS';
  
  // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  List<Map<String, dynamic>> _routePoints = [];
  int _currentPointIndex = 0;
  bool _isActive = false;
  bool _isPaused = false;
  DateTime? _startTime;
  Timer? _playbackTimer;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  final Duration _defaultInterval = const Duration(seconds: 2);
  final double _speedMultiplier;
  final bool _addGpsNoise;
  final double _baseAccuracy;
  
  // –°—Ç—Ä–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  final StreamController<Position> _positionController = 
      StreamController<Position>.broadcast();
  
  MockGpsDataSource({
    double speedMultiplier = 1.0,
    bool addGpsNoise = true,
    double baseAccuracy = 5.0,
  }) : _speedMultiplier = speedMultiplier,
       _addGpsNoise = addGpsNoise,
       _baseAccuracy = baseAccuracy;

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞
  Future<void> loadRoute(String jsonAssetPath) async {
    try {
      final jsonString = await rootBundle.loadString(jsonAssetPath);
      final data = jsonDecode(jsonString) as Map<String, dynamic>;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OSRM —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (data.containsKey('routes')) {
        _loadFromOSRMResponse(data);
      } else if (data.containsKey('coordinates')) {
        _loadFromCoordinatesArray(data['coordinates']);
      } else {
        throw Exception('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞');
      }
      
    } catch (e) {
      debugPrint('$_tag: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      rethrow;
    }
  }
  
  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏
  void setStartPosition(int pointIndex) {
    if (pointIndex >= 0 && pointIndex < _routePoints.length) {
      _currentPointIndex = pointIndex;
    }
  }
  
  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0.0 - 1.0)
  void setProgress(double progress) {
    final targetIndex = ((_routePoints.length - 1) * progress.clamp(0.0, 1.0)).round();
    setStartPosition(targetIndex);
  }

  @override
  Stream<Position> getPositionStream({required LocationSettings settings}) {
    if (!_isActive) {
      _startPlayback();
    }
    return _positionController.stream;
  }
  
  @override
  Future<bool> checkPermissions() async {
    // –ú–æ–∫ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç "—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
    return true;
  }
  
  @override
  Future<Position> getCurrentPosition({required LocationSettings settings}) async {
    if (_routePoints.isEmpty) {
      throw Exception('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    
    final currentPoint = _routePoints[_currentPointIndex];
    return _createPositionFromPoint(currentPoint);
  }
  
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  void _startPlayback() {
    if (_isActive || _routePoints.isEmpty) return;
    
    _isActive = true;
    _startTime = DateTime.now();
    
    debugPrint('$_tag: üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞');
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
    final adjustedInterval = Duration(
      milliseconds: (_defaultInterval.inMilliseconds / _speedMultiplier).round(),
    );
    
    _playbackTimer = Timer.periodic(adjustedInterval, (timer) {
      // –ï—Å–ª–∏ –Ω–∞ –ø–∞—É–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
      if (_isPaused) return;
      
      if (_currentPointIndex >= _routePoints.length) {
        // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞ - –º–æ–∂–µ–º –∑–∞—Ü–∏–∫–ª–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        debugPrint('$_tag: üèÅ GPS —Ç—Ä–µ–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω');
        _stopPlayback();
        return;
      }
      
      final currentPoint = _routePoints[_currentPointIndex];
      final position = _createPositionFromPoint(currentPoint);
      
      _positionController.add(position);
      _currentPointIndex++;
    });
  }
  
  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  void _stopPlayback() {
    _isActive = false;
    _playbackTimer?.cancel();
    _playbackTimer = null;
  }
  
  /// –°—Ç–∞–≤–∏—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É
  void pause() {
    if (!_isActive || _isPaused) return;
    
    _isPaused = true;
    debugPrint('$_tag: ‚è∏Ô∏è GPS —Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É');
  }
  
  /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –ø–∞—É–∑—ã
  void resume() {
    if (!_isActive || !_isPaused) return;
    
    _isPaused = false;
    debugPrint('$_tag: ‚ñ∂Ô∏è GPS —Ç—Ä–µ–∫–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω');
  }
  
  /// –°–æ–∑–¥–∞–µ—Ç Position –∏–∑ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  Position _createPositionFromPoint(Map<String, dynamic> point) {
    final random = math.Random();
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    double lat = point['lat']?.toDouble() ?? point['latitude']?.toDouble() ?? 0.0;
    double lng = point['lng']?.toDouble() ?? point['longitude']?.toDouble() ?? 0.0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º GPS —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    if (_addGpsNoise) {
      // GPS —Ç–æ—á–Ω–æ—Å—Ç—å: ¬±3-8 –º–µ—Ç—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ ¬±0.00003-0.00008 –≥—Ä–∞–¥—É—Å–æ–≤)
      final latNoise = (random.nextDouble() - 0.5) * 0.00016;
      final lonNoise = (random.nextDouble() - 0.5) * 0.00016;
      lat += latNoise;
      lng += lonNoise;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    final timestamp = DateTime.now();
    final accuracy = _addGpsNoise 
        ? _baseAccuracy + random.nextDouble() * 5.0  // 5-10 –º–µ—Ç—Ä–æ–≤
        : _baseAccuracy;
    
    // –°–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    final speed = point['speed']?.toDouble() ?? _calculateSpeed();
    final heading = point['bearing']?.toDouble() ?? _calculateHeading();
    
    return Position(
      latitude: lat,
      longitude: lng,
      timestamp: timestamp,
      accuracy: accuracy,
      altitude: point['altitude']?.toDouble() ?? 0.0,
      altitudeAccuracy: 10.0,
      heading: heading,
      headingAccuracy: 15.0,
      speed: speed / 3.6, // –∫–º/—á -> –º/—Å
      speedAccuracy: 2.0,
    );
  }
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –∏–∑ OSRM –æ—Ç–≤–µ—Ç–∞
  void _loadFromOSRMResponse(Map<String, dynamic> data) {
    final routes = data['routes'] as List;
    if (routes.isEmpty) throw Exception('OSRM –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤');
    
    final geometry = routes[0]['geometry'];
    final coordinates = geometry['coordinates'] as List;
    
    _routePoints = coordinates.map<Map<String, dynamic>>((coord) {
      return {
        'lng': coord[0],
        'lat': coord[1],
        'timestamp': DateTime.now().toIso8601String(),
      };
    }).toList();
  }
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  void _loadFromCoordinatesArray(List<dynamic> coordinates) {
    _routePoints = coordinates.map<Map<String, dynamic>>((coord) {
      if (coord is List && coord.length >= 2) {
        return {
          'lng': coord[0],
          'lat': coord[1],
          'timestamp': DateTime.now().toIso8601String(),
        };
      } else if (coord is Map) {
        return Map<String, dynamic>.from(coord);
      } else {
        throw Exception('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
      }
    }).toList();
  }
  
  /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
  double _calculateSpeed() {
    // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 30-50 –∫–º/—á —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
    final random = math.Random();
    return 30.0 + random.nextDouble() * 20.0;
  }
  
  /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
  double _calculateHeading() {
    if (_currentPointIndex == 0 || _currentPointIndex >= _routePoints.length - 1) {
      return 0.0;
    }
    
    final current = _routePoints[_currentPointIndex];
    final next = _routePoints[_currentPointIndex + 1];
    
    final currentLat = current['lat']?.toDouble() ?? 0.0;
    final currentLng = current['lng']?.toDouble() ?? 0.0;
    final nextLat = next['lat']?.toDouble() ?? 0.0;
    final nextLng = next['lng']?.toDouble() ?? 0.0;
    
    return _calculateBearing(currentLat, currentLng, nextLat, nextLng);
  }
  
  /// –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  double _calculateBearing(double lat1, double lng1, double lat2, double lng2) {
    const double toRadians = math.pi / 180;
    const double toDegrees = 180 / math.pi;
    
    final dLng = (lng2 - lng1) * toRadians;
    final lat1Rad = lat1 * toRadians;
    final lat2Rad = lat2 * toRadians;
    
    final y = math.sin(dLng) * math.cos(lat2Rad);
    final x = math.cos(lat1Rad) * math.sin(lat2Rad) - 
              math.sin(lat1Rad) * math.cos(lat2Rad) * math.cos(dLng);
    
    final bearing = math.atan2(y, x) * toDegrees;
    return (bearing + 360) % 360; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-360¬∞
  }
  
  @override
  Future<void> dispose() async {
    _stopPlayback();
    await _positionController.close();
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  Map<String, dynamic> getPlaybackInfo() {
    return {
      'isActive': _isActive,
      'isPaused': _isPaused,
      'totalPoints': _routePoints.length,
      'currentIndex': _currentPointIndex,
      'progress': _routePoints.isEmpty ? 0.0 : _currentPointIndex / _routePoints.length,
      'speedMultiplier': _speedMultiplier,
      'startTime': _startTime?.toIso8601String(),
    };
  }
}
