import 'dart:async';
import 'dart:math' as math;
import 'package:fieldforce/app/services/test_coordinates_loader.dart';
import 'package:flutter/foundation.dart';
import 'package:geolocator/geolocator.dart';
import 'package:logging/logging.dart';
import 'gps_data_source.dart';

/// –ú–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ GPS –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
///
/// –≠–º—É–ª–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –∏–∑ JSON —Ñ–∞–π–ª–∞.
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
/// - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
/// - –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
/// - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
/// - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
class MockGpsDataSource implements GpsDataSource {
  static final Logger _logger = Logger('MockGpsDataSource');
  static const String _tag = 'MockGPS';

  // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  List<Map<String, dynamic>> _routePoints = [];
  int _currentPointIndex = 0;
  bool _isActive = false;
  bool _isPaused = false;
  Timer? _playbackTimer;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  final Duration _defaultInterval = const Duration(seconds: 2);
  final double _speedMultiplier;
  final bool _addGpsNoise;
  final double _baseAccuracy;

  // –°—Ç—Ä–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
  late final StreamController<Position> _positionController;

  MockGpsDataSource({
    double speedMultiplier = 1.0,
    bool addGpsNoise = true,
    double baseAccuracy = 5.0,
  }) : _speedMultiplier = speedMultiplier,
       _addGpsNoise = addGpsNoise,
       _baseAccuracy = baseAccuracy {
    _positionController = StreamController<Position>.broadcast(
      onListen: () => debugPrint('üéß $_tag: GPS stream - —Å–ª—É—à–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è (listeners=${_positionController.hasListener})'),
      onCancel: () => debugPrint('üõë $_tag: GPS stream - —Å–ª—É—à–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è (listeners=${_positionController.hasListener})'),
    );
  }

  bool get hasPositionListeners => _positionController.hasListener;

  Future<void> loadRoute(String jsonAssetPath) async {
    try {
      debugPrint('üé≠ $_tag: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ $jsonAssetPath');

      final loader = TestCoordinatesLoader(
        nominalSpeedMps: 5.0,
        speedMultiplier: _speedMultiplier,
      );

      final loaded = await loader.loadFromAsset(jsonAssetPath);

      if (loaded.isEmpty) {
        _logger.warning('üé≠ $_tag: Loader returned empty route, creating test route');
        return;
      }

      _routePoints = loaded.map((p) {
        return {
          'lat': (p['lat'] as num).toDouble(),
          'lng': (p['lng'] as num).toDouble(),
          'timestamp': p['timestamp'] ?? DateTime.now().millisecondsSinceEpoch,
          'elevation': (p['elevation'] as num?)?.toDouble() ?? 0.0,
          'bearing': (p['bearing'] as num?)?.toDouble() ?? 0.0,
          'speed': (p['speed'] as num?)?.toDouble() ?? 0.0,
        };
      }).toList();

      _currentPointIndex = 0;
      debugPrint('üé≠ $_tag: –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω (${_routePoints.length} —Ç–æ—á–µ–∫)');

    } catch (e, st) {
      _logger.severe('‚ùå $_tag: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: $e', e, st);
      // _createTestRoute();
    }
  }


  void setStartPosition(int pointIndex) {
    if (pointIndex >= 0 && pointIndex < _routePoints.length) {
      _currentPointIndex = pointIndex;
      debugPrint('üé≠ $_tag: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏: $_currentPointIndex');
    }
  }

  void setProgress(double progress) {
    final targetIndex = ((_routePoints.length - 1) * progress.clamp(0.0, 1.0)).round();
    setStartPosition(targetIndex);
  }

  @override
  Stream<Position> getPositionStream({required LocationSettings settings}) {
    debugPrint('üé≠ $_tag: getPositionStream() –≤—ã–∑–≤–∞–Ω');
    return _positionController.stream;
  }

  @override
  Future<bool> checkPermissions() async {
    // –ú–æ–∫ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç "—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
    debugPrint('üé≠ $_tag: checkPermissions() - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã (mock)');
    return true;
  }

  @override
  Future<Position> getCurrentPosition({required LocationSettings settings}) async {
    if (_routePoints.isEmpty) {
      throw Exception('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }

    final currentPoint = _routePoints[_currentPointIndex];
    return _createPositionFromPoint(currentPoint);
  }

  /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–∏—Å—Å–∏—é –ø–æ–∑–∏—Ü–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ GpsDataManager.startGps())
  void resumeStream() {
    debugPrint('‚ñ∂Ô∏è $_tag: resumeStream() –≤—ã–∑–≤–∞–Ω - –Ω–∞—á–∏–Ω–∞–µ–º —ç–º–∏—Å—Å–∏—é –ø–æ–∑–∏—Ü–∏–π');

    if (_routePoints.isEmpty) {
      debugPrint('‚ùå $_tag: –ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç');
    }

    if (_isActive && !_isPaused) {
      debugPrint('üé≠ $_tag: –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ');
      return;
    }

    _isActive = true;
    _isPaused = false;
    _startPlayback();
  }

  /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º–∏—Å—Å–∏—é –ø–æ–∑–∏—Ü–∏–π
  void pauseStream() {
    debugPrint('‚è∏Ô∏è $_tag: pauseStream() –≤—ã–∑–≤–∞–Ω');
    _isPaused = true;
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  void stopStream() {
    debugPrint('‚èπÔ∏è $_tag: stopStream() –≤—ã–∑–≤–∞–Ω');
    _isActive = false;
    _isPaused = false;
    _playbackTimer?.cancel();
    _playbackTimer = null;
    _currentPointIndex = 0;
  }

  void throwError([dynamic error]) {
    if (!_positionController.isClosed) {
      _positionController.addError(error ?? Exception('Mock GPS error'));
    }
  }

  void _startPlayback() {
    debugPrint('üé¨ $_tag: _startPlayback() - –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');

    if (_playbackTimer?.isActive == true) {
      debugPrint('üé≠ $_tag: –¢–∞–π–º–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω');
      return;
    }

    if (_routePoints.isEmpty) {
      debugPrint('‚ùå $_tag: –ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
      return;
    }

    _startPlaybackTimer();
  }

  /// –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç–º–∏—Å—Å–∏–∏ –ø–æ–∑–∏—Ü–∏–π
  void _startPlaybackTimer() {
    _playbackTimer?.cancel();

    final intervalMs = (_defaultInterval.inMilliseconds / _speedMultiplier).round();
    final interval = Duration(milliseconds: intervalMs);

    debugPrint('üé¨ $_tag: –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${interval.inMilliseconds}–º—Å');

    _playbackTimer = Timer.periodic(interval, (timer) {
      if (!_isActive || _isPaused || _routePoints.isEmpty) {
        debugPrint('üé≠ $_tag: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–º–∏—Å—Å–∏—é - active:$_isActive, paused:$_isPaused, points:${_routePoints.length}');
        return;
      }

      if (_currentPointIndex >= _routePoints.length) {
        debugPrint('üèÅ $_tag: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è');
        stopStream();
        return;
      }

      try {
        // final currentPoint = _routePoints[_currentPointIndex];
        // final position = _createPositionFromPoint(currentPoint);

        // if (!_positionController.isClosed) {
        //   _positionController.add(position);
        //   debugPrint('üìç $_tag: –≠–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é ${_currentPointIndex + 1}/${_routePoints.length}: ${position.latitude}, ${position.longitude}');
        // }

        _currentPointIndex++;
      } catch (e, st) {
        debugPrint('‚ùå $_tag: –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–º–∏—Å—Å–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: $e\n$st');
      }
    });
  }

  /// –°–æ–∑–¥–∞–µ—Ç Position –∏–∑ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  Position _createPositionFromPoint(Map<String, dynamic> point) {
    double lat = (point['lat'] ?? point['latitude'] ?? 0.0).toDouble();
    double lng = (point['lng'] ?? point['lon'] ?? point['longitude'] ?? 0.0).toDouble();

    // –î–æ–±–∞–≤–ª—è–µ–º GPS —à—É–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if (_addGpsNoise) {
      final random = math.Random();
      lat += (random.nextDouble() - 0.5) * 0.0001; // ~11–º
      lng += (random.nextDouble() - 0.5) * 0.0001;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    int? timestampMs = point['timestamp'] as int?;
    DateTime timestamp = timestampMs != null
        ? DateTime.fromMillisecondsSinceEpoch(timestampMs)
        : DateTime.now();

    return Position(
      latitude: lat,
      longitude: lng,
      timestamp: timestamp,
      accuracy: _baseAccuracy + (math.Random().nextDouble() * 5),
      altitude: (point['elevation'] as num?)?.toDouble() ?? 100.0,
      altitudeAccuracy: 10.0,
      heading: (point['bearing'] as num?)?.toDouble() ?? 0.0,
      headingAccuracy: 15.0,
      speed: ((point['speed'] as num?)?.toDouble() ?? 30.0) / 3.6, // –∫–º/—á -> –º/—Å
      speedAccuracy: 2.0,
    );
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
  Map<String, dynamic> getPlaybackInfo() {
    return {
      'isActive': _isActive,
      'isPaused': _isPaused,
      'currentIndex': _currentPointIndex,
      'totalPoints': _routePoints.length,
      'progress': _routePoints.isEmpty ? 0.0 : _currentPointIndex / _routePoints.length,
      'speedMultiplier': _speedMultiplier,
      'hasTimer': _playbackTimer?.isActive ?? false,
    };
  }

  // –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  void pause() => pauseStream();
  void resume() => resumeStream();

  @override
  Future<void> dispose() async {
    debugPrint('üßπ $_tag: –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã');
    _playbackTimer?.cancel();
    await _positionController.close();
  }
}
