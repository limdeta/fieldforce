import 'dart:async';
import 'dart:math' as math;
import 'package:geolocator/geolocator.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/compact_track.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/compact_track_builder.dart';
import 'package:logging/logging.dart';

class GpsBuffer {
  static final Logger _logger = Logger('GpsBuffer');
  final CompactTrackBuilder _builder = CompactTrackBuilder();
  final StreamController<CompactTrack> _updateController = StreamController<CompactTrack>.broadcast();
  final StreamController<CompactTrack> _autoFlushController = StreamController<CompactTrack>.broadcast();
  
  Timer? _flushTimer;
  DateTime? _lastFlushTime;
  
  // –ö–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  static const int _maxBufferSize = 10; // –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ (—É–º–µ–Ω—å—à–µ–Ω –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
  static const int _overlapSize = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è (–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å)
  static const Duration _maxBufferTime = Duration(minutes: 1); // –£–º–µ–Ω—å—à–µ–Ω –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  static const double _minDistanceMeters = 2.0;

  Position? _lastPosition;

  Stream<CompactTrack> get updateStream => _updateController.stream;
  Stream<CompactTrack> get autoFlushes => _autoFlushController.stream;
  int get pointCount => _builder.pointCount;
  bool get hasData => _builder.pointCount > 0;
  bool get isReadyToFlush => _shouldFlush();

  void addPoint(Position position) {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    if (_lastPosition != null) {
      final distance = Geolocator.distanceBetween(
        _lastPosition!.latitude,
        _lastPosition!.longitude,
        position.latitude,
        position.longitude,
      );
      
      if (distance < _minDistanceMeters) {
        _logger.fine('üö´ GpsBuffer: —Ç–æ—á–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é: ${distance.toStringAsFixed(1)}m < $_minDistanceMeters');
        return; // –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–µ
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ –±—É—Ñ–µ—Ä
    _builder.addPoint(
      latitude: position.latitude,
      longitude: position.longitude,
      timestamp: position.timestamp,
      accuracy: position.accuracy,
      speedKmh: position.speed * 3.6, // –º/—Å -> –∫–º/—á
      bearing: position.heading >= 0 ? position.heading : null,
    );
    
    _lastPosition = position;
    _logger.fine('‚úÖ GpsBuffer: —Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: ${_builder.pointCount}');

    // –ö–û–õ–¨–¶–ï–í–û–ô –ë–£–§–ï–†: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
    if (_shouldAutoFlush()) {
      _logger.info('üîÑ GpsBuffer: –∞–≤—Ç–æ—Å–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ ${_builder.pointCount} —Ç–æ—á–µ–∫');
      _autoFlush();
    }

    _notifyUpdate();
  }
  
  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±—É—Ñ–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ TrackManager)
  CompactTrack flush() {
    _cancelFlushTimer();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ–ª—å—Ü–µ–≤–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    return _autoFlush();
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞ (–¥–ª—è UI)
  CompactTrack getCurrentSegment() {
    return _builder.build();
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç (–≤–∫–ª—é—á–∞—è –≤—Å–µ —Ç–æ—á–∫–∏) –∏ –æ—á–∏—â–∞–µ—Ç –±—É—Ñ–µ—Ä.
  /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (pause/stop/flush).
  CompactTrack drain() {
    _cancelFlushTimer();
    final seg = _builder.build();
    _builder.clear();
    _lastPosition = null;
    return seg;
  }

  void clear() {
    _builder.clear();
    _lastPosition = null;
    _cancelFlushTimer();
  }

  void dispose() {
    _cancelFlushTimer();
    _updateController.close();
    _autoFlushController.close();
  }

  void _notifyUpdate() {
    if (_builder.pointCount > 0) {
      _updateController.add(_builder.build());
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –∞–≤—Ç–æ—Å–±—Ä–æ—Å (–∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä)
  bool _shouldAutoFlush() {
    return _builder.pointCount >= _maxBufferSize;
  }
  
  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è (–∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä)
  CompactTrack _autoFlush() {
    if (_builder.pointCount == 0) return _builder.build();

    // –°–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π —Ç—Ä–µ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
    final fullTrack = _builder.build();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ _overlapSize —Ç–æ—á–µ–∫ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
    final overlapPoints = <Position>[];
    final pointsToKeep = math.min(_overlapSize, fullTrack.pointCount);

    for (int i = fullTrack.pointCount - pointsToKeep; i < fullTrack.pointCount; i++) {
      final (lat, lng) = fullTrack.getCoordinates(i);
      final timestamp = fullTrack.getTimestamp(i);
      final accuracy = fullTrack.getAccuracy(i) ?? 5.0;
      final speed = fullTrack.getSpeed(i) ?? 0.0;
      final bearing = fullTrack.getBearing(i);

      overlapPoints.add(Position(
        latitude: lat,
        longitude: lng,
        timestamp: timestamp,
        accuracy: accuracy,
        altitude: 0.0,
        altitudeAccuracy: 10.0,
        heading: bearing ?? 0.0,
        headingAccuracy: 15.0,
        speed: speed / 3.6, // –∫–º/—á -> –º/—Å
        speedAccuracy: 2.0,
      ));
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –¢–û–õ–¨–ö–û –∏–∑ —Ç–æ—á–µ–∫ –¥–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è!
    // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ overlapSize —Ç–æ—á–µ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    final segmentPointCount = fullTrack.pointCount - pointsToKeep;
    final segment = segmentPointCount > 0
        ? fullTrack.subtrack(0, segmentPointCount)
        : CompactTrack.empty(); // –ü—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç –µ—Å–ª–∏ —Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ —á–µ–º overlapSize

    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏
    _builder.clear();
    for (final position in overlapPoints) {
      _builder.addPoint(
        latitude: position.latitude,
        longitude: position.longitude,
        timestamp: position.timestamp,
        accuracy: position.accuracy,
        speedKmh: position.speed * 3.6,
        bearing: position.heading >= 0 ? position.heading : null,
      );
    }

    if (overlapPoints.isNotEmpty) {
      _lastPosition = overlapPoints.last;
      _logger.fine('üîÑ GpsBuffer._autoFlush(): —Å–µ–≥–º–µ–Ω—Ç ${segment.pointCount} —Ç–æ—á–µ–∫ + ${overlapPoints.length} —Ç–æ—á–µ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    }

    _lastFlushTime = DateTime.now();

    // –ö–†–ò–¢–ò–ß–ù–û: —É–≤–µ–¥–æ–º–ª—è–µ–º TrackManager –æ–± –∞–≤—Ç–æ—Å–±—Ä–æ—Å–µ
    _logger.fine('üì§ GpsBuffer._autoFlush(): –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç ${segment.pointCount} —Ç–æ—á–µ–∫ –≤ TrackManager');
    _autoFlushController.add(segment);

    return segment;
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∏ –±—É—Ñ–µ—Ä –∫ —Ä—É—á–Ω–æ–º—É —Å–±—Ä–æ—Å—É
  bool _shouldFlush() {
    if (_builder.pointCount == 0) return false;
    
    // –£—Å–ª–æ–≤–∏–µ: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏  
    if (_lastFlushTime != null) {
      final timeSinceFlush = DateTime.now().difference(_lastFlushTime!);
      if (timeSinceFlush >= _maxBufferTime) {
        return true;
      }
    }
    
    return false;
  }
  
  void _cancelFlushTimer() {
    _flushTimer?.cancel();
    _flushTimer = null;
  }
}
