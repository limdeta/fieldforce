import 'dart:async';
import 'package:geolocator/geolocator.dart';
import 'gps_data_source.dart';
import 'mock_gps_data_source.dart';

/// –†–µ–∂–∏–º—ã GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞
enum GpsMode {
  /// –†–µ–∞–ª—å–Ω—ã–π GPS
  real,
  /// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  mock,
  /// –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ + –º–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)
  hybrid
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPS
class GpsTestConfig {
  final String? mockDataPath;
  final double speedMultiplier;
  final bool addGpsNoise;
  final double baseAccuracy;
  final double? startProgress; // 0.0 - 1.0, —Å –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞—Ç—å
  
  const GpsTestConfig({
    this.mockDataPath,
    this.speedMultiplier = 1.0,
    this.addGpsNoise = true,
    this.baseAccuracy = 5.0,
    this.startProgress,
  });
  
  static const GpsTestConfig defaultTest = GpsTestConfig(
    mockDataPath: 'assets/data/tracks/continuation_scenario.json',
    speedMultiplier: 1.5, // –ù–µ–º–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
    addGpsNoise: true,
    baseAccuracy: 4.0,
  );
  
  static const GpsTestConfig fastTest = GpsTestConfig(
    mockDataPath: 'assets/data/tracks/current_day_track.json',
    speedMultiplier: 10.0, // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    addGpsNoise: false,
    baseAccuracy: 3.0,
    startProgress: 0.8, // –ù–∞—á–∞—Ç—å —Å 80% –º–∞—Ä—à—Ä—É—Ç–∞
  );
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä GPS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
/// 
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º GPS –∏ –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏
/// –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π —Å—Ä–µ–¥–µ
class GpsDataManager {
  static const String _tag = 'GpsDataManager';
  
  GpsDataSource? _currentSource;
  GpsMode _currentMode = GpsMode.real;
  GpsTestConfig? _testConfig;
  
  // Singleton pattern
  static final GpsDataManager _instance = GpsDataManager._internal();
  factory GpsDataManager() => _instance;
  GpsDataManager._internal();
  
  /// –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º GPS
  GpsMode get currentMode => _currentMode;
  
  /// –¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
  GpsDataSource? get currentSource => _currentSource;
  
  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç GPS —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
  Future<void> initialize({
    required GpsMode mode,
    GpsTestConfig? testConfig,
  }) async {
    await _disposeCurrentSource();
    
    _currentMode = mode;
    _testConfig = testConfig;
    
    switch (mode) {
      case GpsMode.real:
        _currentSource = RealGpsDataSource();
        print('üåç $_tag: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π GPS');
        break;
        
      case GpsMode.mock:
        final mockSource = MockGpsDataSource(
          speedMultiplier: testConfig?.speedMultiplier ?? 1.0,
          addGpsNoise: testConfig?.addGpsNoise ?? true,
          baseAccuracy: testConfig?.baseAccuracy ?? 5.0,
        );
        
        if (testConfig?.mockDataPath != null) {
          await mockSource.loadRoute(testConfig!.mockDataPath!);
          
          if (testConfig.startProgress != null) {
            mockSource.setProgress(testConfig.startProgress!);
          }
        }
        
        _currentSource = mockSource;
        print('üé≠ $_tag: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–∫ GPS —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: ${testConfig?.mockDataPath}');
        break;
        
      case GpsMode.hybrid:
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ + –º–æ–∫)
        throw UnimplementedError('–ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    }
  }
  
  /// –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<void> initializeForDevelopment({
    GpsTestConfig? config,
  }) async {
    final testConfig = config ?? GpsTestConfig.defaultTest;
    await initialize(mode: GpsMode.mock, testConfig: testConfig);
  }
  
  /// –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  Future<void> initializeForDemo() async {
    await initialize(mode: GpsMode.mock, testConfig: GpsTestConfig.fastTest);
  }
  
  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π GPS
  Future<void> switchToRealGps() async {
    await initialize(mode: GpsMode.real);
  }
  
  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –º–æ–∫ GPS —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  Future<void> switchToMockGps(GpsTestConfig config) async {
    await initialize(mode: GpsMode.mock, testConfig: config);
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∏–º –ø–æ–∑–∏—Ü–∏–π
  Stream<Position> getPositionStream({required LocationSettings settings}) {
    if (_currentSource == null) {
      throw StateError('GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
    }
    
    return _currentSource!.getPositionStream(settings: settings);
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  Future<bool> checkPermissions() async {
    if (_currentSource == null) {
      throw StateError('GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    return _currentSource!.checkPermissions();
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
  Future<Position> getCurrentPosition({required LocationSettings settings}) async {
    if (_currentSource == null) {
      throw StateError('GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    return _currentSource!.getCurrentPosition(settings: settings);
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–∫ —Ä–µ–∂–∏–º–∞)
  Map<String, dynamic>? getPlaybackInfo() {
    if (_currentSource is MockGpsDataSource) {
      return (_currentSource as MockGpsDataSource).getPlaybackInfo();
    }
    return null;
  }
  
  /// –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
  Future<void> dispose() async {
    await _disposeCurrentSource();
    print('üîÑ $_tag: –ú–µ–Ω–µ–¥–∂–µ—Ä GPS –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
  }
  
  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
  Future<void> _disposeCurrentSource() async {
    if (_currentSource != null) {
      await _currentSource!.dispose();
      _currentSource = null;
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  Map<String, dynamic> getConfigInfo() {
    return {
      'mode': _currentMode.toString(),
      'isInitialized': _currentSource != null,
      'testConfig': _testConfig != null ? {
        'mockDataPath': _testConfig!.mockDataPath,
        'speedMultiplier': _testConfig!.speedMultiplier,
        'addGpsNoise': _testConfig!.addGpsNoise,
        'baseAccuracy': _testConfig!.baseAccuracy,
        'startProgress': _testConfig!.startProgress,
      } : null,
      'playbackInfo': getPlaybackInfo(),
    };
  }
  
  /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–∫ GPS (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  void pauseMockGps() {
    if (_currentMode == GpsMode.mock && _currentSource is MockGpsDataSource) {
      final mockSource = _currentSource as MockGpsDataSource;
      mockSource.pause();
      print('‚è∏Ô∏è $_tag: –ú–æ–∫ GPS –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
  
  /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–∫ GPS (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  void resumeMockGps() {
    if (_currentMode == GpsMode.mock && _currentSource is MockGpsDataSource) {
      final mockSource = _currentSource as MockGpsDataSource;
      mockSource.resume();
      print('‚ñ∂Ô∏è $_tag: –ú–æ–∫ GPS –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
    }
  }
}
