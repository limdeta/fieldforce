import 'dart:async';
import 'package:geolocator/geolocator.dart';
import 'gps_data_source.dart';
import 'mock_gps_data_source.dart';

/// –†–µ–∂–∏–º—ã GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞
enum GpsMode {
  real,
  mock
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPS
class GpsTestConfig {
  final String? mockDataPath;
  final double speedMultiplier;
  final bool addGpsNoise;
  final double baseAccuracy;
  final double? startProgress; // 0.0 - 1.0, —Å –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞—Ç—å
  
  const GpsTestConfig({
    this.mockDataPath,
    this.speedMultiplier = 1.0,
    this.addGpsNoise = true,
    this.baseAccuracy = 5.0,
    this.startProgress,
  });
  
  static const GpsTestConfig defaultTest = GpsTestConfig(
    mockDataPath: 'assets/data/tracks/continuation_scenario.json',
    speedMultiplier: 1.5, // –ù–µ–º–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
    addGpsNoise: true,
    baseAccuracy: 4.0,
  );
  
  static const GpsTestConfig fastTest = GpsTestConfig(
    mockDataPath: 'assets/data/tracks/current_day_track.json',
    speedMultiplier: 10.0, // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    addGpsNoise: false,
    baseAccuracy: 3.0,
    startProgress: 0.8, // –ù–∞—á–∞—Ç—å —Å 80% –º–∞—Ä—à—Ä—É—Ç–∞
  );
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä GPS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
/// 
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º GPS –∏ –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏
/// –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π —Å—Ä–µ–¥–µ
class GpsDataManager {
  static const String _tag = 'GpsDataManager';
  
  GpsDataSource? _currentSource;
  GpsMode _currentMode = GpsMode.real;
  GpsTestConfig? _testConfig;

  static final GpsDataManager _instance = GpsDataManager._internal();
  factory GpsDataManager() => _instance;
  GpsDataManager._internal();

  GpsMode get currentMode => _currentMode;
  GpsDataSource? get currentSource => _currentSource;
  
  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç GPS —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
  Future<void> initialize({
    required GpsMode mode,
    GpsTestConfig testConfig = GpsTestConfig.defaultTest,
  }) async {
    await _disposeCurrentSource();
    _currentMode = mode;
    _testConfig = testConfig;
    
    switch (mode) {
      case GpsMode.real:
        _currentSource = RealGpsDataSource();
        print('üåç $_tag: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π GPS');
        break;
        
      case GpsMode.mock:
        final mockSource = MockGpsDataSource(
          speedMultiplier: testConfig.speedMultiplier,
          addGpsNoise: testConfig.addGpsNoise,
          baseAccuracy: testConfig.baseAccuracy,
        );

        await mockSource.loadRoute(testConfig.mockDataPath!);

        if (testConfig.startProgress != null) {
          mockSource.setProgress(testConfig.startProgress!);
        }

        _currentSource = mockSource;
        print('üé≠ $_tag: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–æ–∫ GPS —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: ${testConfig.mockDataPath}');
        // mockSource.resume();
        break;
    }
  }

  Future<void> initializeForDevelopment({
    GpsTestConfig? config,
  }) async {
    final testConfig = config ?? GpsTestConfig.defaultTest;
    await initialize(mode: GpsMode.mock, testConfig: testConfig);
  }

  Future<void> initializeForDemo() async {
    await initialize(mode: GpsMode.mock, testConfig: GpsTestConfig.fastTest);
  }

  Future<void> switchToRealGps() async {
    await initialize(mode: GpsMode.real);
  }

  Future<void> switchToMockGps(GpsTestConfig config) async {
    await initialize(mode: GpsMode.mock, testConfig: config);
  }

  Stream<Position> getPositionStream({required LocationSettings settings}) {
    if (_currentSource == null) {
      throw StateError('GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
    }
    print('üåç GpsDataManager: getPositionStream() –≤—ã–∑–≤–∞–Ω, _currentSource: ${_currentSource.runtimeType}');
    return _currentSource!.getPositionStream(settings: settings).map((position) {
      print('üåç GpsDataManager: –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é ${position.latitude}, ${position.longitude}');
      return position;
    });
  }

  Future<bool> checkPermissions() async {
    if (_currentSource == null) {
      throw StateError('GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    return _currentSource!.checkPermissions();
  }

  Future<Position> getCurrentPosition({required LocationSettings settings}) async {
    if (_currentSource == null) {
      throw StateError('GPS –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    return _currentSource!.getCurrentPosition(settings: settings);
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–∫ —Ä–µ–∂–∏–º–∞)
  Map<String, dynamic>? getPlaybackInfo() {
    if (_currentSource is MockGpsDataSource) {
      return (_currentSource as MockGpsDataSource).getPlaybackInfo();
    }
    return null;
  }

  Future<void> dispose() async {
    await _disposeCurrentSource();
  }
  
  /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
  Future<void> _disposeCurrentSource() async {
    if (_currentSource != null) {
      await _currentSource!.dispose();
      _currentSource = null;
    }
  }

  Map<String, dynamic> getConfigInfo() {
    return {
      'mode': _currentMode.toString(),
      'isInitialized': _currentSource != null,
      'testConfig': _testConfig != null ? {
        'mockDataPath': _testConfig!.mockDataPath,
        'speedMultiplier': _testConfig!.speedMultiplier,
        'addGpsNoise': _testConfig!.addGpsNoise,
        'baseAccuracy': _testConfig!.baseAccuracy,
        'startProgress': _testConfig!.startProgress,
      } : null,
      'playbackInfo': getPlaybackInfo(),
    };
  }

  void pauseMockGps() {
    if (_currentMode == GpsMode.mock && _currentSource is MockGpsDataSource) {
      final mockSource = _currentSource as MockGpsDataSource;
      mockSource.pause();
      print('‚è∏Ô∏è $_tag: –ú–æ–∫ GPS –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  void resumeMockGps() {
    if (_currentMode == GpsMode.mock && _currentSource is MockGpsDataSource) {
      final mockSource = _currentSource as MockGpsDataSource;
      mockSource.resume();
      print('‚ñ∂Ô∏è $_tag: –ú–æ–∫ GPS –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ mock GPS ÔøΩÔøΩ–æ—Ç–æ–∫–æ–º (–µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
  void pauseMockStream() {
    if (_currentSource is MockGpsDataSource) {
      (_currentSource as MockGpsDataSource).pauseStream();
    }
  }

  void resumeMockStream() {
    if (_currentSource is MockGpsDataSource) {
      (_currentSource as MockGpsDataSource).resumeStream();
    }
  }

  void stopMockStream() {
    if (_currentSource is MockGpsDataSource) {
      (_currentSource as MockGpsDataSource).stopStream();
    }
  }

  void throwMockError([dynamic error]) {
    if (_currentSource is MockGpsDataSource) {
      (_currentSource as MockGpsDataSource).throwError(error);
    }
  }

  /// –í–∫–ª—é—á–∏—Ç—å GPS (start)
  Future<bool> startGps() async {
    try {
      // –î–ª—è mock: resume –ø–æ—Ç–æ–∫
      if (_currentSource is MockGpsDataSource) {
        print('‚ñ∂Ô∏è $_tag: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock GPS, –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞...');
        await Future.delayed(const Duration(seconds: 1));
        (_currentSource as MockGpsDataSource).resumeStream();
        return true;
      }

      // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ GPS: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫
      print('üåç $_tag: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π GPS, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');
      print(_currentSource);
      // Defensive timeout already implemented in underlying checkPermissions if desired
      final hasPermission = await checkPermissions().timeout(
        const Duration(seconds: 15),
        onTimeout: () {
          print('‚è±Ô∏è $_tag: checkPermissions() timed out');
          return false;
        },
      );

      print('üåç $_tag: checkPermissions() returned: $hasPermission');
      if (hasPermission) {
        print('‚úÖ $_tag: Location permission granted ‚Äî GPS started');
        // Subscribe to stream or other start logic here
        return true;
      } else {
        print('‚ùå $_tag: Location permission denied - cannot start real GPS');
        return false;
      }
    } catch (e, st) {
      print('‚ùó $_tag: Exception while starting GPS: $e\n$st');
      return false;
    }
  }

  /// –û—Ç–∫–ª—é—á–∏—Ç—å GPS (stop)
  void stopGps() {
    if (_currentSource == null) return;
    if (_currentSource is MockGpsDataSource) {
      (_currentSource as MockGpsDataSource).pauseStream();
    }
    //gpsState.value = GpsToggleState.off;
  }
}
