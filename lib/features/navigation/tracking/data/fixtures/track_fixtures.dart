import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;
import 'package:get_it/get_it.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/navigation_user.dart';
import 'package:fieldforce/app/services/app_session_service.dart';
import '../../../../shop/domain/entities/route.dart';
import '../../domain/entities/user_track.dart';
import '../../domain/entities/compact_track_builder.dart';
import '../../domain/enums/track_status.dart';
import '../../domain/repositories/user_track_repository.dart';
import '../../../../../app/services/location_tracking_service.dart';

/// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è GPS —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class GpsTestConfig {
  final String mockDataPath;
  final double speedMultiplier;
  final bool addGpsNoise;
  final double baseAccuracy;
  final double startProgress;

  const GpsTestConfig({
    required this.mockDataPath,
    this.speedMultiplier = 1.0,
    this.addGpsNoise = true,
    this.baseAccuracy = 5.0,
    this.startProgress = 0.0,
  });
}

/// –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö GPS —Ç—Ä–µ–∫–æ–≤
/// 
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ GPS –¥–∞–Ω–Ω—ã–µ –∏–∑ current_day_track.json (OSRM –º–∞—Ä—à—Ä—É—Ç)
/// –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º.
/// 
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
/// - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
/// - –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ —Å –º–æ–∫ GPS –¥–∞–Ω–Ω—ã–º–∏
/// - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º –∏ –º–æ–∫ GPS
class TrackFixtures {
  static final UserTrackRepository _repository = GetIt.instance<UserTrackRepository>();
  static final LocationTrackingService _trackingService = GetIt.instance<LocationTrackingService>();
  
  // –ö—ç—à –¥–ª—è GPS –¥–∞–Ω–Ω—ã—Ö
  static Map<String, dynamic>? _cachedOsrmData;
  static String? _cachedDataKey;

  /// –°–æ–∑–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ OSRM –º–∞—Ä—à—Ä—É—Ç–∞
  /// –°–≤—è–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  static Future<UserTrack?> createCurrentDayTrack({
    required NavigationUser user,
    required Route route,
  }) async {
    try {
      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ GPS –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      const dataKey = 'current_day_track';
      Map<String, dynamic> osrmResponse;
      
      if (_cachedOsrmData != null && _cachedDataKey == dataKey) {
        osrmResponse = _cachedOsrmData!;
      } else {
        final jsonString = await rootBundle.loadString('assets/data/tracks/current_day_track.json');
        osrmResponse = jsonDecode(jsonString) as Map<String, dynamic>;
        
        _cachedOsrmData = osrmResponse;
        _cachedDataKey = dataKey;
      }

      final now = DateTime.now();
      final startTime = DateTime(now.year, now.month, now.day, 9, 0);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      final compactTrack = CompactTrackFactory.fromOSRMResponse(
        osrmResponse,
        startTime: startTime,
        baseSpeed: 45.0, // –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
        baseAccuracy: 4.0, // GPS —Ç–æ—á–Ω–æ—Å—Ç—å
      );

      if (compactTrack.isEmpty) {
        print('‚ùå TrackFixtures: CompactTrack –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
        return null;
      }

      final userTrack = UserTrack.fromSingleTrack(
        id: 0,
        user: user,
        track: compactTrack,
        status: TrackStatus.completed, // –ò–ó–ú–ï–ù–ï–ù–û: –ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è
        metadata: {
          'type': 'completed_part_of_today_route', // –ò–ó–ú–ï–ù–ï–ù–û: —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø
          'created_at': startTime.toIso8601String(),
          'route_id': route.id?.toString() ?? 'unknown',
          'route_name': route.name,
          'data_source': 'osrm_real_route',
          'total_coordinates': compactTrack.pointCount.toString(),
          'distance_km': (compactTrack.getTotalDistance() / 1000).toStringAsFixed(2),
          'duration_minutes': compactTrack.getDuration().inMinutes.toString(),
          'current_status': 'completed_part', // –ò–ó–ú–ï–ù–ï–ù–û: —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
          'route_points_total': route.pointsOfInterest.length.toString(),
          'route_points_completed': route.pointsOfInterest.where((p) => p.status.name == 'completed').length.toString(),
          'estimated_completion': DateTime(now.year, now.month, now.day, 17, 30).toIso8601String(),
        },
      );

      final result = await _repository.saveUserTrack(userTrack);
      
      return result.fold(
        (failure) {
          print('‚ùå TrackFixtures: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${failure.message}');
          return null;
        },
        (savedTrack) {
          print('‚úÖ TrackFixtures: –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: ${savedTrack.id}');
          return savedTrack;
        },
      );

    } catch (e) {
      print('‚ùå TrackFixtures: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: $e');
      return null;
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  /// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<UserTrack?> createTestTracksForUser({
    required NavigationUser user,
    required List<Route> routes,
  }) async {
    if (routes.isEmpty) return null;

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π)
    final todayRoute = routes.firstWhere(
      (route) => route.status.name == 'active',
      orElse: () => routes.first,
    );

    // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ GPS –¥–∞–Ω–Ω—ã–º–∏
    return await createCurrentDayTrack(
      user: user,
      route: todayRoute,
    );
  }

  // ============================================================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ì–û –¢–†–ï–ö–ò–ù–ì–ê –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
  // ============================================================================

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫ GPS –¥–∞–Ω–Ω—ã—Ö
  /// 
  /// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è:
  /// 1. –°–æ–∑–¥–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫
  /// 2. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç GPS –Ω–∞ –º–æ–∫ —Ä–µ–∂–∏–º
  /// 3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
  static Future<UserTrack?> startActiveMockTracking({
    required NavigationUser user,
    required Route route,
    GpsTestConfig? config,
  }) async {
    try {
      // 1. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫
      final historicalTrack = await createCurrentDayTrack(
        user: user,
        route: route,
      );
      
      if (historicalTrack == null) {
        print('‚ùå TrackFixtures: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫');
        return null;
      }

      // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ GPS —Å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞
      final testConfigMap = <String, dynamic>{
        'mockDataPath': config?.mockDataPath ?? 'assets/data/tracks/continuation_scenario.json',
        'speedMultiplier': config?.speedMultiplier ?? 1.5,
        'addGpsNoise': config?.addGpsNoise ?? true,
        'baseAccuracy': config?.baseAccuracy ?? 4.0,
        'startProgress': config?.startProgress ?? 0.7, // –ù–∞—á–∏–Ω–∞–µ–º —Å 70% –º–∞—Ä—à—Ä—É—Ç–∞
      };

      // 3. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å –Ω–∞ –º–æ–∫ —Ä–µ–∂–∏–º
      await _trackingService.enableTestMode(config: testConfigMap);

      // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥
      final trackingStarted = await _trackingService.startTracking();

      if (!trackingStarted) {
        print('‚ùå TrackFixtures: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥');
        return historicalTrack;
      }

      print('‚úÖ TrackFixtures: –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–∫ —Ç—Ä–µ–∫–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
      print('üìç GPS —Ä–µ–∂–∏–º: ${_trackingService.getGpsInfo()}');
      
      return historicalTrack;

    } catch (e) {
      print('‚ùå TrackFixtures: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
      return null;
    }
  }

  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ —Ä–µ–∂–∏–º (–±—ã—Å—Ç—Ä–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏)
  static Future<bool> startDemoMode({
    required NavigationUser user,
    required Route route,
  }) async {
    try {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º (–±—ã—Å—Ç—Ä–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)
      await _trackingService.enableDemoMode();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥
      final started = await _trackingService.startTracking();

      if (started) {
        print('üé¨ TrackFixtures: –î–µ–º–æ —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω');
        print('‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ GPS –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ');
      }

      return started;
    } catch (e) {
      print('‚ùå TrackFixtures: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞: $e');
      return false;
    }
  }

  /// –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
  static Future<bool> continueOrStartTodaysTrack({required String routeId}) async {
    try {
      print('üìÖ TrackFixtures: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞...');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π GPS —Ç—Ä–µ–∫
      if (_trackingService.isTracking) {
        print('‚úÖ TrackFixtures: GPS —Ç—Ä–µ–∫–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º');
        print('üìä –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫: ${_trackingService.currentTrack?.totalPoints ?? 0} —Ç–æ—á–µ–∫');
        return true;
      }
      
      final user = await _getCurrentUser();
      if (user == null) {
        print('‚ùå TrackFixtures: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
      }

      // üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º autoStartTracking –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –Ω–∞–π–¥–µ—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ç—Ä–µ–∫
      print('üéØ TrackFixtures: –ó–∞–ø—É—Å–∫–∞–µ–º autoStartTracking –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ —Å route_id: $routeId');
      final success = await _trackingService.autoStartTracking(routeId: routeId);
      
      if (success) {
        print('‚úÖ TrackFixtures: GPS —Ç—Ä–µ–∫–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (–µ–¥–∏–Ω—ã–π —Ç—Ä–µ–∫)');
        print('ÔøΩ –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ ID: ${_trackingService.currentTrack?.id}');
        print('üìä –¢–æ—á–µ–∫ –≤ —Ç—Ä–µ–∫–µ: ${_trackingService.currentTrack?.totalPoints ?? 0}');
        return true;
      } else {
        print('‚ùå TrackFixtures: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å GPS —Ç—Ä–µ–∫–∏–Ω–≥');
        return false;
      }
      
    } catch (e) {
      print('‚ùå TrackFixtures: –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
  static Future<NavigationUser?> _getCurrentUser() async {
    try {
      final sessionResult = await AppSessionService.getCurrentAppSession();
      return sessionResult.fold(
        (failure) {
          print('‚ùå TrackFixtures: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: $failure');
          return null;
        },
        (session) => session?.appUser,
      );
    } catch (e) {
      print('‚ùå TrackFixtures: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return null;
    }
  }

  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É GPS
  static Future<void> stopMockTracking() async {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫–∏–Ω–≥
      await _trackingService.stopTracking();
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π GPS
      await _trackingService.enableRealGps();
      
      print('üåç TrackFixtures: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π GPS');
    } catch (e) {
      print('‚ùå TrackFixtures: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∫ —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞
  static Map<String, dynamic> getTrackingInfo() {
    final gpsInfo = _trackingService.getGpsInfo();
    final playbackInfo = _trackingService.getMockPlaybackInfo();
    
    return {
      'gps_info': gpsInfo,
      'playback_info': playbackInfo,
      'is_tracking': _trackingService.isTracking,
      'is_active': _trackingService.isActive,
      'current_track': _trackingService.currentTrack?.id,
    };
  }
}