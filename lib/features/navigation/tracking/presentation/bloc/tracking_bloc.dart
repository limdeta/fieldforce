import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fieldforce/features/navigation/tracking/domain/services/location_tracking_service_base.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/navigation_user.dart';
import 'package:get_it/get_it.dart';

// –°–æ–±—ã—Ç–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–æ–º
abstract class TrackingEvent {}
class TrackingTogglePressed extends TrackingEvent {}
class TrackingStart extends TrackingEvent {
  final NavigationUser user;
  TrackingStart(this.user);
}
class TrackingCheckStatus extends TrackingEvent {}

// –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
abstract class TrackingState {}
class TrackingOff extends TrackingState {}
class TrackingStarting extends TrackingState {}
class TrackingOn extends TrackingState {}
class TrackingNoUser extends TrackingState {}

/// BLoC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–æ–º –∫–∞–∫ –µ–¥–∏–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
/// NavigationUser –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑–≤–Ω–µ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è.
class TrackingBloc extends Bloc<TrackingEvent, TrackingState> {
  final LocationTrackingServiceBase _trackingService;
  NavigationUser? _currentUser;

  TrackingBloc()
    : _trackingService = GetIt.instance<LocationTrackingServiceBase>(),
      super(TrackingNoUser()) {

    //  —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    on<TrackingTogglePressed>((event, emit) async {
      if (_currentUser == null) {
        emit(TrackingNoUser());
        return;
      }

      if (state is TrackingOff) {
        await _startTracking(emit);
      } else if (state is TrackingOn) {
        await _pauseTracking(emit);
      }
    });

    on<TrackingStart>((event, emit) async {
      _currentUser = event.user;
      await _startTracking(emit);
    });

    on<TrackingCheckStatus>((event, emit) {
      print('üéØ TrackingBloc: –ü–æ–ª—É—á–µ–Ω TrackingCheckStatus event');
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ç—Ä–µ–∫–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–º
      if (_trackingService.isTracking) {
        print('üéØ TrackingBloc: _trackingService.isTracking == true, emit TrackingOn');
        emit(TrackingOn());
      } else if (_currentUser != null) {
        print('üéØ TrackingBloc: _trackingService.isTracking == false, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ —ç—Ç–æ–≥–æ (—á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ)
        if (state is TrackingOn) {
          print('‚ö†Ô∏è TrackingBloc: –¢—Ä–µ–∫–∏–Ω–≥ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ —Å–µ—Ä–≤–∏—Å —Å–æ–æ–±—â–∞–µ—Ç false - –≤–æ–∑–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
          // –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
          return;
        }
        print('üéØ TrackingBloc: emit TrackingOff');
        emit(TrackingOff());
      } else {
        print('üéØ TrackingBloc: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, emit TrackingNoUser');
        emit(TrackingNoUser());
      }
    });

    // –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    add(TrackingCheckStatus());
  }

  Future<void> _startTracking(Emitter<TrackingState> emit) async {
    if (_currentUser == null) {
      emit(TrackingNoUser());
      return;
    }

    emit(TrackingStarting());

    try {
      print('üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${_currentUser!.id}');

      bool success;
      if (!_trackingService.isTracking) {
        // –ï—Å–ª–∏ —Ç—Ä–µ–∫–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç
        success = await _trackingService.autoStartTracking(user: _currentUser!);
      } else {
        // –ï—Å–ª–∏ —Ç—Ä–µ–∫–∏–Ω–≥ –±—ã–ª –Ω–∞ –ø–∞—É–∑–µ, —è–≤–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º
        success = await _trackingService.resumeTracking();
      }

      if (success || _trackingService.isTracking) {
        emit(TrackingOn());
      } else {
        emit(TrackingOff());
      }
    } catch (e) {
      emit(TrackingOff());
    }
  }

  Future<void> _pauseTracking(Emitter<TrackingState> emit) async {
    try {
      if (_trackingService.isTracking) {
        await _trackingService.pauseTracking();
      } else {
        print('‚ö†Ô∏è –¢—Ä–µ–∫–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
      }

      emit(TrackingOff());
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –Ω–∞ –ø–∞—É–∑—É: $e');
      emit(TrackingOff());
    }
  }

  /// –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–≤–Ω–µ (–∏–∑ App —Å–ª–æ—è)
  void setUser(NavigationUser user) {
    _currentUser = user;
    add(TrackingCheckStatus());
  }
}
