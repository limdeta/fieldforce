import 'dart:async';
import 'dart:ui' as ui;
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_cache_manager/flutter_cache_manager.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:logging/logging.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–ª–æ–≤ –∫–∞—Ä—Ç—ã
class TileCacheService {
  static final Logger _logger = Logger('TileCacheService');
  static DefaultCacheManager? _cacheManager;
  static TileProvider? _tileProvider;

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–∞–π–ª–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  static TileProvider getTileProvider() {
    if (_tileProvider != null) return _tileProvider!;

    _cacheManager ??= DefaultCacheManager();
    _tileProvider = CachedNetworkTileProvider();
    _logger.info('üó∫Ô∏è –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–∞–π–ª–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
    return _tileProvider!;
  }

  static TileProvider getTileProviderWithCaching({required bool enableCaching}) {
    if (enableCaching) {
      return getTileProvider();
    } else {
      _logger.info('üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è');
      return NetworkTileProvider();
    }
  }

  static Future<void> clearCache() async {
    await _cacheManager?.emptyCache();
    _logger.info('üóëÔ∏è –ö—ç—à —Ç–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω');
  }
}

class CachedNetworkTileProvider extends TileProvider {
  final DefaultCacheManager _cacheManager;

  CachedNetworkTileProvider()
      : _cacheManager = DefaultCacheManager();

  @override
  ImageProvider getImage(TileCoordinates coordinates, TileLayer options) {
    final url = getTileUrl(coordinates, options);
    return CachedTileImageProvider(
      url: url,
      cacheManager: _cacheManager,
      headers: headers,
    );
  }
}

/// ImageProvider –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–æ–≤
class CachedTileImageProvider extends ImageProvider<CachedTileImageProvider> {
  final String url;
  final DefaultCacheManager cacheManager;
  final Map<String, String>? headers;
  final Logger _logger = Logger('CachedTileImageProvider');

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
  static ImageInfo? _cachedPlaceholder;
  // –°—á–µ—Ç—á–∏–∫ placeholder'–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  static int _placeholderCount = 0;

  CachedTileImageProvider({
    required this.url,
    required this.cacheManager,
    this.headers,
  });

  @override
  Future<CachedTileImageProvider> obtainKey(ImageConfiguration configuration) {
    return SynchronousFuture<CachedTileImageProvider>(this);
  }

  @override
  ImageStreamCompleter loadImage(CachedTileImageProvider key, ImageDecoderCallback decode) {
    return OneFrameImageStreamCompleter(_loadAsync(key, decode));
  }

  Future<ImageInfo> _loadAsync(CachedTileImageProvider key, ImageDecoderCallback decode) async {
    final tileName = _extractTileNameFromUrl(url);

    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 3 —Ä–∞–∑
    for (int attempt = 1; attempt <= 3; attempt++) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        final fileInfo = await cacheManager.getFileFromCache(url);

        if (fileInfo != null) {
          final file = fileInfo.file;
          final exists = await file.exists();
          final length = exists ? await file.length() : 0;

          if (exists && length > 0) {
            if (length < 1000) {
              _logger.warning('‚ö†Ô∏è –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, —É–¥–∞–ª—è–µ–º: $tileName');
              await cacheManager.removeFile(url);
            } else {
              try {
                final Uint8List bytes = await file.readAsBytes();
                final codec = await ui.instantiateImageCodec(bytes);
                final frame = await codec.getNextFrame();
                _logger.finer('üíæ –¢–∞–π–ª –∏–∑ –∫–µ—à–∞: $tileName');
                return ImageInfo(image: frame.image);
              } catch (decodeError) {
                _logger.warning('‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫–µ—à, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª: $tileName - $decodeError');
                await cacheManager.removeFile(url);
              }
            }
          } else {
            _logger.warning('‚ö†Ô∏è –§–∞–π–ª –∫–µ—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π: $tileName');
          }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
        if (attempt > 1) {
          _logger.info('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ $attempt/3 –∑–∞–≥—Ä—É–∑–∫–∏: $tileName');
        }

        final file = await cacheManager.getSingleFile(url, headers: headers);
        final bytes = await file.readAsBytes();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if (bytes.length <= 103) {
          _placeholderCount++;
          _logger.finer('OSM placeholder #$_placeholderCount detected (${bytes.length} bytes), returning placeholder');
          // –í–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä–æ–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          return _createPlaceholderImage();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try {
          final codec = await ui.instantiateImageCodec(bytes);
          final frame = await codec.getNextFrame();
          final imageInfo = ImageInfo(image: frame.image);

          _logger.finer('‚úÖ –¢–∞–π–ª –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω: $tileName');
          return imageInfo;
        } catch (decodeError) {
          _logger.warning('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ç–∞–π–ª: $tileName - $decodeError');
          // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          await cacheManager.removeFile(url);
          if (attempt == 3) {
            throw Exception('Failed to decode image after 3 attempts: $decodeError');
          }
          continue; // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        }

      } catch (e, stackTrace) {
        if (attempt == 3) {
          _logger.severe('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–∞ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ $tileName: $e', e, stackTrace);
          rethrow;
        } else {
          _logger.warning('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ $attempt –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è $tileName: $e');
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          await Future.delayed(Duration(milliseconds: 500 * attempt));
        }
      }
    }

    // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    throw Exception('Unexpected end of _loadAsync for $tileName');
  }

  Future<ImageInfo> _createPlaceholderImage() async {
    if (_cachedPlaceholder != null) return _cachedPlaceholder!;

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 256x256 –¥–ª—è placeholder
    final recorder = ui.PictureRecorder();
    final canvas = Canvas(recorder);
    final paint = Paint()..color = Colors.grey[300]!;

    canvas.drawRect(const Rect.fromLTWH(0, 0, 256, 256), paint);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–∞—Ä—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä
    const iconSize = 48.0;

    // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É - —Ä–∏—Å—É–µ–º –∫—Ä—É–≥ —Å –±—É–∫–≤–æ–π M
    final iconPaint = Paint()
      ..color = Colors.grey[600]!
      ..style = PaintingStyle.fill;
    canvas.drawCircle(const Offset(128, 128), iconSize / 2, iconPaint);

    final textPainter = TextPainter(
      text: const TextSpan(
        text: 'M',
        style: TextStyle(
          color: Colors.white,
          fontSize: 24,
          fontWeight: FontWeight.bold,
        ),
      ),
      textDirection: TextDirection.ltr,
    );
    textPainter.layout();
    textPainter.paint(
      canvas,
      Offset(128 - textPainter.width / 2, 128 - textPainter.height / 2),
    );

    final picture = recorder.endRecording();
    final image = await picture.toImage(256, 256);
    _cachedPlaceholder = ImageInfo(image: image);
    return _cachedPlaceholder!;
  }

  String _extractTileNameFromUrl(String url) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ç–∞–π–ª–∞ –∏–∑ URL —Ç–∏–ø–∞ https://tile.openstreetmap.org/12/2254/1302.png
    final uri = Uri.parse(url);
    final segments = uri.pathSegments;
    if (segments.length >= 3) {
      final z = segments[segments.length - 3];
      final x = segments[segments.length - 2];
      final y = segments[segments.length - 1].split('.').first;
      return '$z/$x/$y.png';
    }
    return url.split('/').last;
  }

  @override
  bool operator ==(Object other) {
    if (other.runtimeType != runtimeType) return false;
    return other is CachedTileImageProvider && other.url == url;
  }

  @override
  int get hashCode => url.hashCode;
}