// lib/shared/widgets/cached_network_image_widget.dart

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:visibility_detector/visibility_detector.dart';
import 'package:logging/logging.dart';
import 'dart:math' as math;

/// –í–∏–¥–∂–µ—Ç –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
/// 
/// –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
/// - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤–∏–¥–∂–µ—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ viewport
/// - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–µ—à–∏—Ä—É–µ—Ç –Ω–∞ –¥–∏—Å–∫
/// - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WebP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
/// - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç placeholder –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
/// - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
class CachedNetworkImageWidget extends StatelessWidget {
  static final Logger _logger = Logger('CachedNetworkImageWidget');

  final String? imageUrl;
  final String? webpUrl;
  final double? width;
  final double? height;
  final BoxFit fit;
  final PlaceholderWidgetBuilder? placeholder;
  final LoadingErrorWidgetBuilder? errorWidget;
  final bool enableLazyLoading;

  const CachedNetworkImageWidget({
    super.key,
    required this.imageUrl,
    this.webpUrl,
    this.width,
    this.height,
    this.fit = BoxFit.cover,
    this.placeholder,
    this.errorWidget,
    this.enableLazyLoading = true,
  });

  /// –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  factory CachedNetworkImageWidget.product({
    required String? imageUrl,
    required String? webpUrl,
    double? width,
    double? height,
    BoxFit fit = BoxFit.cover,
  }) {
    return CachedNetworkImageWidget(
      imageUrl: imageUrl,
      webpUrl: webpUrl,
      width: width,
      height: height,
      fit: fit,
      placeholder: (context, url) => _buildProductPlaceholder(width, height),
      errorWidget: (context, url, error) => _buildProductErrorWidget(width, height),
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –ª–µ–Ω–∏–≤—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤–∏–¥–∏–º)
  static Widget lazyProduct({
    required String? imageUrl,
    required String? webpUrl,
    double? width,
    double? height,
    BoxFit fit = BoxFit.cover,
  }) {
    if (imageUrl == null || imageUrl.isEmpty) {
      return _buildProductPlaceholder(width, height);
    }

    return LazyLoadImageWidget(
      imageUrl: imageUrl,
      webpUrl: webpUrl,
      width: width,
      height: height,
      fit: fit,
      placeholder: _buildProductPlaceholder(width, height),
    );
  }

  /// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫—ç—à, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–æ—Ä–≥–∞–Ω–∏–π –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
  static Future<void> prefetchProductImage(
    BuildContext context, {
    required String imageUrl,
    String? webpUrl,
    double? width,
    double? height,
  }) async {
    if (imageUrl.isEmpty) return;

    final optimizedUrl = _resolveOptimizedUrl(
      imageUrl: imageUrl,
      webpUrl: webpUrl,
      width: width,
    );
    final cacheKey = _generateCacheKey(optimizedUrl, width, height);

    try {
      final provider = CachedNetworkImageProvider(
        optimizedUrl,
        cacheKey: cacheKey,
      );

      await precacheImage(provider, context);
      _logger.finer('üóÉÔ∏è Prefetched image: $optimizedUrl');
    } catch (error, stackTrace) {
      _logger.fine('‚ö†Ô∏è Failed to prefetch image $optimizedUrl: $error');
      _logger.finest('Prefetch stack trace for $optimizedUrl', error, stackTrace);
    }
  }

  @override
  Widget build(BuildContext context) {
    // –ï—Å–ª–∏ –Ω–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (imageUrl == null || imageUrl!.isEmpty) {
      return _buildNoImageWidget();
    }

    // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π URL (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º WebP)
    final optimizedUrl = _resolveOptimizedUrl(
      imageUrl: imageUrl!,
      webpUrl: webpUrl,
      width: width,
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    _logger.fine('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $optimizedUrl');

    return CachedNetworkImage(
      imageUrl: optimizedUrl,
      width: width,
      height: height,
      fit: fit,
      placeholder: placeholder ?? _buildDefaultPlaceholder,
      errorWidget: (context, url, error) {
        _logger.warning('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $url - $error');
        return errorWidget != null ? errorWidget!(context, url, error) : _buildDefaultErrorWidget();
      },
      // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      cacheKey: _generateCacheKey(optimizedUrl, width, height),
      memCacheWidth: width?.round(),
      memCacheHeight: height?.round(),
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      fadeInDuration: const Duration(milliseconds: 200),
      fadeOutDuration: const Duration(milliseconds: 100),
      useOldImageOnUrlChange: true,
    );
  }

  /// –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  static String _resolveOptimizedUrl({
    required String imageUrl,
    String? webpUrl,
    double? width,
  }) {
    final baseUrl = (webpUrl != null && webpUrl.isNotEmpty) ? webpUrl : imageUrl;
    return _addWidthParameter(baseUrl, width);
  }

  /// –î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —à–∏—Ä–∏–Ω—ã –∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  static String _addWidthParameter(String imageUrl, double? width) {
    if (imageUrl.isEmpty) return imageUrl;
    
    // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ (–ø—Ä–µ–≤—å—é) –∏—Å–ø–æ–ª—å–∑—É–µ–º 400px
    // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1000px –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
    final targetWidth = _getThumbnailWidth(width);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ w –≤ URL
    final uri = Uri.tryParse(imageUrl);
    if (uri == null) return imageUrl;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ HTTP/HTTPS URL
    if (!uri.hasScheme || (!uri.scheme.startsWith('http'))) return imageUrl;
    
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä w —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (uri.queryParameters.containsKey('w')) return imageUrl;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä w –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    final newQueryParameters = Map<String, String>.from(uri.queryParameters);
    newQueryParameters['w'] = targetWidth.toString();
    
    final newUri = uri.replace(queryParameters: newQueryParameters);
    return newUri.toString();
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  static int _getThumbnailWidth(double? width) {
    // –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∞—è (–º–µ–Ω—å—à–µ 100px) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–≤—å—é 400px
    if (width == null || width < 100) {
      return 400;
    }
    
    // –î–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º 1000px (full-size)
    if (width > 400) {
      return 1000;
    }
    
    // –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–≤—å—é 400px
    return 400;
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  static String _generateCacheKey(String url, double? width, double? height) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL + —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
    final sizeKey = '${width?.round() ?? 0}x${height?.round() ?? 0}';
    return '$url-$sizeKey';
  }

  /// –í–∏–¥–∂–µ—Ç –∫–æ–≥–¥–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  Widget _buildNoImageWidget() {
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(8),
      ),
      child: const Icon(
        Icons.image_not_supported_outlined,
        color: Colors.grey,
        size: 32,
      ),
    );
  }

  /// –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  Widget _buildDefaultPlaceholder(BuildContext context, String url) {
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        color: Colors.grey[50],
        borderRadius: BorderRadius.circular(8),
      ),
      child: const Center(
        child: CircularProgressIndicator(
          strokeWidth: 2,
          valueColor: AlwaysStoppedAnimation<Color>(Colors.grey),
        ),
      ),
    );
  }

  /// –í–∏–¥–∂–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  Widget _buildDefaultErrorWidget() {
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        color: Colors.red[50],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.red[100]!),
      ),
      child: Icon(
        Icons.broken_image_outlined,
        color: Colors.red[300],
        size: 32,
      ),
    );
  }

  /// –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  static Widget _buildProductPlaceholder(double? width, double? height) {
    // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    final isSmall = (width != null && width < 60) || (height != null && height < 60);
    
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Colors.grey[100]!, Colors.grey[50]!],
        ),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Center(
        child: isSmall 
          ? SizedBox(
              width: math.min(width ?? 20, height ?? 20) * 0.5,
              height: math.min(width ?? 20, height ?? 20) * 0.5,
              child: const CircularProgressIndicator(strokeWidth: 2),
            )
          : const Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircularProgressIndicator(strokeWidth: 2),
                SizedBox(height: 8),
                Text('–ó–∞–≥—Ä—É–∑–∫–∞...', style: TextStyle(fontSize: 12, color: Colors.grey)),
              ],
            ),
      ),
    );
  }

  /// –í–∏–¥–∂–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  static Widget _buildProductErrorWidget(double? width, double? height) {
    // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫—É
    final isSmall = (width != null && width < 60) || (height != null && height < 60);
    
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: isSmall 
        ? Center(
            child: Icon(
              Icons.image_not_supported, 
              color: Colors.grey[400], 
              size: math.min(width ?? 24, height ?? 24) * 0.6,
            ),
          )
        : Column(
            mainAxisAlignment: MainAxisAlignment.center,
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(Icons.image_not_supported, color: Colors.grey[400], size: 32),
              const SizedBox(height: 4),
              Text('–ù–µ—Ç —Ñ–æ—Ç–æ', style: TextStyle(fontSize: 10, color: Colors.grey[600])),
            ],
          ),
    );
  }
}

/// –í–∏–¥–∂–µ—Ç –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–∞—Ö
/// 
/// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∏–¥–∏–º—ã–º
class LazyLoadImageWidget extends StatefulWidget {
  final String? imageUrl;
  final String? webpUrl;
  final double? width;
  final double? height;
  final BoxFit fit;
  final Widget? placeholder;

  const LazyLoadImageWidget({
    super.key,
    required this.imageUrl,
    this.webpUrl,
    this.width,
    this.height,
    this.fit = BoxFit.cover,
    this.placeholder,
  });

  @override
  State<LazyLoadImageWidget> createState() => _LazyLoadImageWidgetState();
}

class _LazyLoadImageWidgetState extends State<LazyLoadImageWidget> {
  bool _isVisible = false;

  @override
  Widget build(BuildContext context) {
    return VisibilityDetector(
      key: ValueKey(widget.imageUrl),
      onVisibilityChanged: (info) {
        if (info.visibleFraction > 0.1 && !_isVisible) {
          setState(() => _isVisible = true);
        }
      },
      child: _isVisible 
        ? CachedNetworkImageWidget(
            imageUrl: widget.imageUrl,
            webpUrl: widget.webpUrl,
            width: widget.width,
            height: widget.height,
            fit: widget.fit,
          )
        : widget.placeholder ?? _buildLazyPlaceholder(),
    );
  }

  Widget _buildLazyPlaceholder() {
    return Container(
      width: widget.width,
      height: widget.height,
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(8),
      ),
      child: const Icon(Icons.image_outlined, color: Colors.grey),
    );
  }
}