import 'package:fieldforce/app/domain/entities/work_day.dart';
import 'package:fieldforce/app/services/app_session_service.dart';
import 'package:fieldforce/features/navigation/tracking/domain/services/location_tracking_service_base.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/user_track.dart';
import 'package:flutter/foundation.dart';
import 'package:get_it/get_it.dart';
import 'package:fieldforce/app/domain/usecases/get_work_days_for_user_usecase.dart';

extension ListExtensions<T> on Iterable<T> {
  T? get firstOrNull => isEmpty ? null : first;
}

/// Provider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º–∏ –¥–Ω—è–º–∏
/// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Ç—Ä–µ–∫–∏ –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã WorkDay
class WorkDayProvider extends ChangeNotifier {
  final LocationTrackingServiceBase _trackingService = GetIt.instance<LocationTrackingServiceBase>();
  final GetWorkDaysForUserUseCase _getWorkDaysForUser = GetIt.instance<GetWorkDaysForUserUseCase>();

  List<WorkDay> _workDays = [];
  WorkDay? _selectedWorkDay;
  UserTrack? _activeTrack;
  bool _initialized = false;

  List<WorkDay> get workDays => _workDays;
  WorkDay? get selectedWorkDay => _selectedWorkDay;
  UserTrack? get activeTrack => _activeTrack;

  WorkDayProvider() {
    _initialize();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—Ä–µ–∫–∏
  void _initialize() {
    if (_initialized) return;
    _initialized = true;
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
    _trackingService.trackUpdateStream.listen((track) {
      print('üîÑ WorkDayProvider: –ü–æ–ª—É—á–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫: ${track.id} (${track.totalPoints} —Ç–æ—á–µ–∫)');
      _activeTrack = track;
      notifyListeners();
    });
    
    print('‚úÖ WorkDayProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /// –ü–æ–ª—É—á–∞–µ–º WorkDay –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
  WorkDay? getWorkDayForDate(DateTime date) {
    return _workDays.where((wd) => 
      wd.date.year == date.year && 
      wd.date.month == date.month && 
      wd.date.day == date.day
    ).firstOrNull;
  }

  /// –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay
  WorkDay? get todayWorkDay => getWorkDayForDate(DateTime.now());

  /// –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  void selectWorkDay(WorkDay workDay) {
    _selectedWorkDay = workDay;
    notifyListeners();
  }

  /// –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–æ –¥–∞—Ç–µ
  void selectWorkDayByDate(DateTime date) {
    final workDay = getWorkDayForDate(date);
    if (workDay != null) {
      selectWorkDay(workDay);
    }
  }

  /// –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥)
  Future<bool> startWorkDay(WorkDay workDay) async {
    if (!workDay.canStart) return false;

    // –ó–∞–ø—É—Å–∫–∞–µ–º GPS —Ç—Ä–µ–∫–∏–Ω–≥
    final success = await _trackingService.startTracking(workDay.user);
    if (!success) return false;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    final updatedWorkDay = workDay.copyWith(
      status: WorkDayStatus.active,
      startTime: DateTime.now(), user: workDay.user,
    );

    _updateWorkDay(updatedWorkDay);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
    _trackingService.trackUpdateStream.listen((track) {
      _activeTrack = track;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º actualTrack –≤ —Ç–µ–∫—É—â–µ–º WorkDay
      if (_selectedWorkDay?.isToday == true) {
        final updated = _selectedWorkDay!.copyWith(track: track, user: workDay.user);
        _updateWorkDay(updated);
      }
    });

    return true;
  }

  /// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
  Future<void> finishWorkDay(WorkDay workDay) async {
    await _trackingService.stopTracking();
    
    final updatedWorkDay = workDay.copyWith(
      status: WorkDayStatus.completed,
      endTime: DateTime.now(),
      track: _activeTrack, user: workDay.user,
    );
    
    _updateWorkDay(updatedWorkDay);
    _activeTrack = null;
  }

  /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥
  Future<void> pauseTracking() async {
    _trackingService.pauseTracking();
  }

  /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏–Ω–≥
  Future<void> resumeTracking() async {
    _trackingService.resumeTracking();
  }

  void _updateWorkDay(WorkDay updatedWorkDay) {
    final index = _workDays.indexWhere((wd) => wd.id == updatedWorkDay.id);
    if (index != -1) {
      _workDays[index] = updatedWorkDay;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω
      if (_selectedWorkDay?.id == updatedWorkDay.id) {
        _selectedWorkDay = updatedWorkDay;
      }
      
      notifyListeners();
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> loadWorkDays() async {
    print('üìÖ WorkDayProvider: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏...');
    final session = AppSessionService.currentSession;
    if (session == null) {
      print('‚ùå WorkDayProvider: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
      _workDays = [];
      notifyListeners();
      return;
    }
    final user = session.appUser;
    print('üìä WorkDayProvider: –ó–∞–≥—Ä—É–∂–∞–µ–º WorkDay –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.fullName}');
    try {
      final workDays = await _getWorkDaysForUser(user);
      _workDays = workDays;
      print('‚úÖ WorkDayProvider: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_workDays.length} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π');
    } catch (e) {
      print('‚ùå WorkDayProvider: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: $e');
      _workDays = [];
    }
    notifyListeners();
  }
}
