import 'package:fieldforce/app/domain/usecases/get_current_app_session_usecase.dart';
import 'package:fieldforce/features/authentication/domain/entities/session_state.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/navigation_user.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/user_track.dart';
import 'package:fieldforce/features/navigation/tracking/domain/services/location_tracking_service_base.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:get_it/get_it.dart';

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è GPS —Ç—Ä–µ–∫–∏–Ω–≥–∞
class AppLifecycleManager with WidgetsBindingObserver {
  static const String _tag = 'AppLifecycle';
  
  final LocationTrackingServiceBase _trackingService;
  final GetCurrentAppSessionUseCase _sessionUsecase;
  
  bool _isInitialized = false;
  bool _wasTrackingBeforePause = false;

  AppLifecycleManager({
    LocationTrackingServiceBase? trackingService,
    GetCurrentAppSessionUseCase? sessionUsecase,
  }) : _trackingService = trackingService ?? GetIt.instance<LocationTrackingServiceBase>(),
       _sessionUsecase = sessionUsecase ?? GetIt.instance<GetCurrentAppSessionUseCase>();

  Future<void> initialize() async {
    if (_isInitialized) return;
    
    WidgetsBinding.instance.addObserver(this);
    await _restoreActiveTrackingIfNeeded();
    _isInitialized = true;
  }

  void dispose() {
    if (_isInitialized) {
      WidgetsBinding.instance.removeObserver(this);
      _isInitialized = false;
    }
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    switch (state) {
      case AppLifecycleState.resumed:
        _onAppResumed();
        break;
      case AppLifecycleState.paused:
        _onAppPaused();
        break;
      case AppLifecycleState.detached:
        _onAppDetached();
        break;
      case AppLifecycleState.inactive:
        break;
      case AppLifecycleState.hidden:
        _log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ, —Ç—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ');
        break;
    }
  }

  Future<void> _onAppResumed() async {
    _log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    if (_wasTrackingBeforePause && !_trackingService.isTracking) {
      await _restoreActiveTrackingIfNeeded();
    }
    
    _wasTrackingBeforePause = false;
  }

  Future<void> _onAppPaused() async {
    _log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ');
    
    _wasTrackingBeforePause = _trackingService.isTracking;
    
    if (_trackingService.isTracking) {
      _log('–¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
    }
  }

  Future<void> _onAppDetached() async {
    _log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è');
    
    if (_trackingService.isTracking) {
      _log('–ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      await _trackingService.stopTracking();
    }
  }

  Future<void> _restoreActiveTrackingIfNeeded() async {
    try {
      final sessionResult = await _sessionUsecase.getSessionState();

      await sessionResult.fold(
        (failure) async {
          _log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${failure.message}');
        },
        (sessionState) async {
          await sessionState.when(
            onNotFound: () async {
              _log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            },
            onFound: (userSession) async {
              _log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${userSession.externalId}');
              _log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
            },
          );
        },
      );
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
    }
  }

  Future<bool> startWorkDayTracking({
    required NavigationUser user,
    String? routeId,
  }) async {
    if (_trackingService.isTracking) {
      _log('–¢—Ä–µ–∫–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω');
      return true;
    }

    try {
      final success = await _trackingService.startTracking(user);

      if (success) {
        print('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–∏–Ω–≥ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –Ω–∞—á–∞—Ç');
      } else {
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–∏–Ω–≥');
      }

      return success;
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
      return false;
    }
  }

  Future<bool> stopWorkDayTracking() async {
    if (!_trackingService.isTracking) {
      _log('–¢—Ä–µ–∫–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
      return true;
    }

    try {
      await _trackingService.stopTracking();
      _log('–¢—Ä–µ–∫–∏–Ω–≥ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω');
      return true;
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞: $e');
      return false;
    }
  }

  Future<bool> shouldAutoStartTracking() async {
    try {
      final sessionResult = await _sessionUsecase.getSessionState();

      return await sessionResult.fold(
        (failure) async {
          _log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${failure.message}');
          return false;
        },
        (sessionState) async {
          return await sessionState.when(
            onNotFound: () async {
              return false;
            },
            onFound: (userSession) async {
              _log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userSession.externalId}');
              return false;
            },
          );
        },
      );
    } catch (e) {
      _log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞: $e');
      return false;
    }
  }

  bool get isTracking => _trackingService.isTracking;
  UserTrack? get currentTrack => _trackingService.currentTrack;

  void _log(String message) {
    if (kDebugMode) {
      print('üîÑ [$_tag] $message');
    }
  }
}
