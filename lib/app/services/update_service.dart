import 'dart:io';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:app_installer/app_installer.dart';
import 'package:logging/logging.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:version/version.dart';
import '../config/app_config.dart';

/// –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
/// - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
/// - –°–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º  
/// - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ APK –Ω–∞ Android
/// - –ü–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ pubspec.yaml
class UpdateService {
  static final Logger _logger = Logger('UpdateService');
  
  // URL —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π - –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –¥–ª—è –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
  static String get updateUrl => AppConfig.updateServerUrl;

  static late PackageInfo _packageInfo;
  static Version? _currentVersion;
  static late Dio _dio;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ - –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static Future<void> initialize() async {
    _packageInfo = await PackageInfo.fromPlatform();
    _currentVersion = Version.parse(_packageInfo.version);
    _dio = Dio();
    
    _logger.info('üöÄ UpdateService initialized');
    _logger.info('üì± Current version: ${_packageInfo.version}');
    _logger.info('üîó Update URL: $updateUrl');
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
  static Future<void> checkForUpdatesIfEnabled(BuildContext context) async {
    if (!AppConfig.checkForUpdates) {
      _logger.info('‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }

    if (_currentVersion == null) {
      _logger.warning('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
      await initialize();
      if (!context.mounted) {
        _logger.fine('–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
        return;
      }
    }

    await _checkForUpdates(context);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
  static Future<void> checkForUpdatesManually(BuildContext context) async {
    if (_currentVersion == null) {
      await initialize();
      if (!context.mounted) {
        _logger.fine('–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)');
        return;
      }
    }
    await _checkForUpdates(context);
  }

  static Future<void> _checkForUpdates(BuildContext context) async {
    _logger.info('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    final navigator = Navigator.of(context, rootNavigator: true);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (dialogContext) => const AlertDialog(
        title: Text('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π'),
        content: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(),
            SizedBox(width: 20),
            Text('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...'),
          ],
        ),
      ),
    );

    try {
      final updateInfo = await _fetchUpdateInfo();
      if (navigator.mounted) {
        navigator.pop();
      }

      if (!navigator.mounted) {
        return;
      }

      if (updateInfo != null) {
        _logger.info('‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${updateInfo.version}');
        _showUpdateDialog(navigator.context, updateInfo);
      } else {
        _logger.info('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        _showNoUpdatesDialog(navigator.context);
      }
    } catch (e, stackTrace) {
      if (navigator.mounted) {
        navigator.pop();
      }
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π', e, stackTrace);
      if (navigator.mounted) {
        _showErrorDialog(navigator.context, e.toString());
      }
    }
  }

  static Future<UpdateInfo?> _fetchUpdateInfo() async {
    try {
      _logger.info('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞: $updateUrl');
      
      final response = await _dio.get(
        updateUrl,
        options: Options(
          sendTimeout: const Duration(seconds: 10),
          receiveTimeout: const Duration(seconds: 10),
        ),
      );

      if (response.statusCode == 200) {
        final data = response.data;
        _logger.fine('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: $data');
        
        final updateInfo = UpdateInfo.fromJson(data);
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏
        if (updateInfo.version > _currentVersion!) {
          _logger.info('üÜï –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${_currentVersion!} -> ${updateInfo.version}');
          return updateInfo;
        } else {
          _logger.info('‚úÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: ${_currentVersion!}');
          return null;
        }
      } else {
        throw Exception('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥: ${response.statusCode}');
      }
    } catch (e) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: $e');
      rethrow;
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
  static void _showUpdateDialog(BuildContext context, UpdateInfo updateInfo) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(
              Icons.system_update,
              color: updateInfo.isRequired ? Colors.red : Colors.blue,
            ),
            const SizedBox(width: 10),
            Text(updateInfo.isRequired ? '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${updateInfo.version}',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Text(
              '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${_currentVersion!}',
              style: const TextStyle(color: Colors.grey),
            ),
            const SizedBox(height: 12),
            if (updateInfo.changelog.isNotEmpty) ...[
              const Text(
                '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 4),
              Text(updateInfo.changelog),
              const SizedBox(height: 12),
            ],
            if (updateInfo.isRequired)
              const Text(
                '‚ö†Ô∏è –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.',
                style: TextStyle(color: Colors.red, fontSize: 12),
              ),
          ],
        ),
        actions: [
          if (!updateInfo.isRequired)
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–ü–æ–∑–∂–µ'),
            ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _startDownload(context, updateInfo);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: updateInfo.isRequired ? Colors.red : null,
            ),
            child: Text(Platform.isAndroid ? '–°–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–°–∫–∞—á–∞—Ç—å'),
          ),
        ],
      ),
    );
  }

  /// –ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  static Future<void> _startDownload(BuildContext context, UpdateInfo updateInfo) async {
    if (Platform.isAndroid && updateInfo.downloadUrl.endsWith('.apk')) {
      // Android APK - —Å–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      await _downloadAndInstallApk(context, updateInfo);
    } else {
      // Windows/iOS/–¥—Ä—É–≥–∏–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      await _openDownloadLink(updateInfo.downloadUrl);
    }
  }

  /// –°–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å APK –Ω–∞ Android
  static Future<void> _downloadAndInstallApk(BuildContext context, UpdateInfo updateInfo) async {
    final navigator = Navigator.of(context, rootNavigator: true);
    final progressNotifier = ValueNotifier<double>(0.0);
    var dialogDismissed = false;

    try {
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (dialogContext) => AlertDialog(
          title: const Text('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
          content: ValueListenableBuilder<double>(
            valueListenable: progressNotifier,
            builder: (_, value, _) => Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                LinearProgressIndicator(value: value.clamp(0.0, 1.0)),
                const SizedBox(height: 16),
                Text('${(value * 100).toInt()}%'),
              ],
            ),
          ),
        ),
      );

      final dir = await getExternalStorageDirectory();
      if (dir == null) {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      }

      final fileName = 'fieldforce-${updateInfo.version}.apk';
      final filePath = '${dir.path}/$fileName';

      _logger.info('üì• –°–∫–∞—á–∏–≤–∞–µ–º APK: ${updateInfo.downloadUrl} -> $filePath');

      await _dio.download(
        updateInfo.downloadUrl,
        filePath,
        onReceiveProgress: (received, total) {
          if (total <= 0 || dialogDismissed) {
            return;
          }
          progressNotifier.value = received / total;
        },
      );

      if (navigator.mounted) {
        dialogDismissed = true;
        navigator.pop();
      }

      _logger.info('‚úÖ APK —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      _logger.info('üì≤ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APK...');
      await AppInstaller.installApk(filePath);
      _logger.info('‚úÖ APK —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞');

    } catch (e, stackTrace) {
      dialogDismissed = true;
      if (navigator.mounted) {
        navigator.pop();
      }
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–µ APK', e, stackTrace);
      if (navigator.mounted) {
        _showErrorDialog(navigator.context, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: $e');
      }
    } finally {
      progressNotifier.dispose();
    }
  }


  /// –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  static Future<void> _openDownloadLink(String downloadUrl) async {
    try {
      _logger.info('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: $downloadUrl');
      
      final uri = Uri.parse(downloadUrl);
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri, mode: LaunchMode.externalApplication);
        _logger.info('‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
      } else {
        _logger.warning('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É: $downloadUrl');
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
      }
    } catch (e) {
      _logger.severe('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏: $e');
      rethrow;
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç"
  static void _showNoUpdatesDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.check_circle, color: Colors.green),
            SizedBox(width: 10),
            Text('–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç'),
          ],
        ),
        content: Text(
          '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${_currentVersion!}',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –æ—à–∏–±–∫–∏
  static void _showErrorDialog(BuildContext context, String error) {
    String userFriendlyMessage;

    if (error.contains('DioException')) {
      if (error.contains('CONNECT_TIMEOUT') || error.contains('RECEIVE_TIMEOUT')) {
        userFriendlyMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      } else if (error.contains('CONNECTION_ERROR')) {
        userFriendlyMessage = '–°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else {
        userFriendlyMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.';
      }
    } else if (error.contains('FormatException')) {
      userFriendlyMessage = '–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.';
    } else {
      userFriendlyMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.error, color: Colors.red),
            SizedBox(width: 10),
            Text('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(userFriendlyMessage),
            const SizedBox(height: 12),
            const Text(
              '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:',
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
            ),
            const SizedBox(height: 4),
            Text(
              error,
              style: const TextStyle(fontSize: 10, color: Colors.grey),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
}

/// –ú–æ–¥–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
class UpdateInfo {
  final Version version;
  final String changelog;
  final String downloadUrl;
  final bool isRequired;
  final Version? minSupportedVersion;

  UpdateInfo({
    required this.version,
    required this.changelog,
    required this.downloadUrl,
    this.isRequired = false,
    this.minSupportedVersion,
  });

  factory UpdateInfo.fromJson(Map<String, dynamic> json) {
    return UpdateInfo(
      version: Version.parse(json['version']),
      changelog: json['changelog'] ?? '',
      downloadUrl: json['download_url'],
      isRequired: json['required'] ?? false,
      minSupportedVersion: json['min_supported_version'] != null
          ? Version.parse(json['min_supported_version'])
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'version': version.toString(),
      'changelog': changelog,
      'download_url': downloadUrl,
      'required': isRequired,
      'min_supported_version': minSupportedVersion?.toString(),
    };
  }
}