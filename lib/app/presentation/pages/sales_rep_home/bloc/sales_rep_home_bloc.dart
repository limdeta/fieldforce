import 'dart:async';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:get_it/get_it.dart';
import 'package:latlong2/latlong.dart';
import 'package:fieldforce/features/shop/domain/entities/route.dart' as shop;
import 'package:fieldforce/features/shop/domain/repositories/route_repository.dart';
import 'package:fieldforce/app/services/app_session_service.dart';
import 'package:fieldforce/app/providers/selected_route_provider.dart';
import 'package:fieldforce/features/navigation/tracking/presentation/providers/user_tracks_provider.dart';
import 'package:fieldforce/features/navigation/map/domain/entities/map_point.dart';
import 'package:fieldforce/features/navigation/path_predictor/osrm_path_prediction_service.dart';
import 'package:fieldforce/features/shop/domain/entities/point_of_interest.dart';
import 'sales_rep_home_event.dart';
import 'sales_rep_home_state.dart';

/// BLoC –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
/// 
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É:
/// - –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// - –í—ã–±–æ—Ä –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
/// - –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
/// - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
class SalesRepHomeBloc extends Bloc<SalesRepHomeEvent, SalesRepHomeState> {
  final RouteRepository _routeRepository = GetIt.instance<RouteRepository>();
  final SelectedRouteProvider _selectedRouteProvider = GetIt.instance<SelectedRouteProvider>();
  final UserTracksProvider _userTracksProvider = GetIt.instance<UserTracksProvider>();

  StreamSubscription<List<shop.Route>>? _routesSubscription;
  StreamSubscription? _selectedRouteSubscription;

  SalesRepHomeBloc() : super(const SalesRepHomeInitial()) {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    on<SalesRepHomeInitializeEvent>(_onInitialize);
    on<LoadUserRoutesEvent>(_onLoadUserRoutes);
    on<SelectRouteEvent>(_onSelectRoute);
    on<ToggleRoutePanelEvent>(_onToggleRoutePanel);
    on<BuildRouteEvent>(_onBuildRoute);
    on<RoutesUpdatedEvent>(_onRoutesUpdated);
    on<SyncTracksWithRouteEvent>(_onSyncTracksWithRoute);
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BLoC
  Future<void> _onInitialize(
    SalesRepHomeInitializeEvent event,
    Emitter<SalesRepHomeState> emit,
  ) async {
    emit(const SalesRepHomeLoading(message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...'));

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final sessionResult = await AppSessionService.getCurrentAppSession();
      if (sessionResult.isLeft()) {
        emit(const SalesRepHomeError(
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          canRetry: true,
        ));
        return;
      }

      final session = sessionResult.fold((l) => null, (r) => r);
      if (session == null) {
        emit(const SalesRepHomeError(
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏',
          canRetry: true,
        ));
        return;
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
      if (event.preselectedRoute != null) {
        await _selectedRouteProvider.setSelectedRoute(event.preselectedRoute!);
        add(SyncTracksWithRouteEvent(event.preselectedRoute!));
      } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await _userTracksProvider.loadUserTracks(session.appUser);
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
      _setupRouteStreamListener(session);
      _setupSelectedRouteListener();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
      add(const LoadUserRoutesEvent());

    } catch (e) {
      emit(SalesRepHomeError(
        message: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e',
        canRetry: true,
      ));
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _onLoadUserRoutes(
    LoadUserRoutesEvent event,
    Emitter<SalesRepHomeState> emit,
  ) async {
    try {
      final sessionResult = await AppSessionService.getCurrentAppSession();
      final session = sessionResult.fold((l) => throw Exception('No session'), (r) => r);
      
      if (session == null) {
        throw Exception('Session is null');
      }

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      // –î–∞–ª–µ–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è updates –∏–∑ stream
      emit(const SalesRepHomeLoading(message: '–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...'));
      
    } catch (e) {
      emit(SalesRepHomeError(
        message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: $e',
        canRetry: true,
      ));
    }
  }

  /// –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
  Future<void> _onSelectRoute(
    SelectRouteEvent event,
    Emitter<SalesRepHomeState> emit,
  ) async {
    try {
      await _selectedRouteProvider.setSelectedRoute(event.route);
      add(SyncTracksWithRouteEvent(event.route));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
      if (state is SalesRepHomeLoaded) {
        final currentState = state as SalesRepHomeLoaded;
        emit(currentState.copyWith(currentRoute: event.route));
      }
    } catch (e) {
      emit(SalesRepHomeError(
        message: '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞: $e',
        currentRoute: (state is SalesRepHomeLoaded) ? (state as SalesRepHomeLoaded).currentRoute : null,
      ));
    }
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  void _onToggleRoutePanel(
    ToggleRoutePanelEvent event,
    Emitter<SalesRepHomeState> emit,
  ) {
    if (state is SalesRepHomeLoaded) {
      final currentState = state as SalesRepHomeLoaded;
      emit(currentState.copyWith(showRoutePanel: !currentState.showRoutePanel));
    }
  }

  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  Future<void> _onBuildRoute(
    BuildRouteEvent event,
    Emitter<SalesRepHomeState> emit,
  ) async {
    if (state is! SalesRepHomeLoaded) return;
    
    final currentState = state as SalesRepHomeLoaded;
    final currentRoute = currentState.currentRoute;
    
    if (currentRoute == null) return;

    print('üöÄ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞—á–∞—Ç–æ –¥–ª—è ${currentRoute.pointsOfInterest.length} —Ç–æ—á–µ–∫');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    emit(currentState.copyWith(isBuildingRoute: true));

    try {
      final pathPredictionService = GetIt.instance<OsrmPathPredictionService>();
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ç–æ—á–∫—É (–∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞)
      int lastCompletedIndex = -1;
      for (int i = 0; i < currentRoute.pointsOfInterest.length; i++) {
        if (currentRoute.pointsOfInterest[i].status == VisitStatus.completed) {
          lastCompletedIndex = i;
        }
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π
      // –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
      final startIndex = lastCompletedIndex >= 0 ? lastCompletedIndex : 0;
      final routePoints = currentRoute.pointsOfInterest.sublist(startIndex);
      
      if (routePoints.length < 2) {
        print('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2, –µ—Å—Ç—å ${routePoints.length})');
        emit(currentState.copyWith(isBuildingRoute: false));
        return;
      }

      print('üéØ –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç —Ç–æ—á–∫–∏ ${startIndex + 1} –¥–æ –∫–æ–Ω—Ü–∞: ${routePoints.length} —Ç–æ—á–µ–∫');

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ MapPoint –¥–ª—è OSRM —Å–µ—Ä–≤–∏—Å–∞
      final mapPoints = routePoints.map((poi) => MapPoint(
        latitude: poi.coordinates.latitude,
        longitude: poi.coordinates.longitude,
      )).toList();

      // –í—ã–∑—ã–≤–∞–µ–º OSRM —Å–µ—Ä–≤–∏—Å
      final result = await pathPredictionService.predictRouteGeometry(mapPoints);
      
      if (result.routePoints.isNotEmpty) {
        final polylinePoints = result.routePoints.map((point) => 
          LatLng(point.latitude, point.longitude)
        ).toList();
        
        print('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${polylinePoints.length} —Ç–æ—á–µ–∫');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤–æ–π –ø–æ–ª–∏–ª–∏–Ω–∏–µ–π
        emit(currentState.copyWith(
          isBuildingRoute: false,
          routePolylinePoints: polylinePoints,
        ));
      } else {
        print('‚ùå OSRM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
        emit(currentState.copyWith(isBuildingRoute: false));
        emit(SalesRepHomeError(
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç: —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
          currentRoute: currentRoute,
        ));
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      emit(currentState.copyWith(isBuildingRoute: false));
      emit(SalesRepHomeError(
        message: '–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e',
        currentRoute: currentRoute,
      ));
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–æ—Ç stream)
  void _onRoutesUpdated(
    RoutesUpdatedEvent event,
    Emitter<SalesRepHomeState> emit,
  ) {
    if (event.routes.isEmpty) {
      emit(const SalesRepHomeLoaded(
        currentRoute: null,
        availableRoutes: [],
      ));
      return;
    }

    shop.Route? routeToDisplay;
    
    // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (_selectedRouteProvider.selectedRoute == null) {
      routeToDisplay = _findCurrentRoute(event.routes);
      if (routeToDisplay != null) {
        _selectedRouteProvider.setSelectedRoute(routeToDisplay);
      }
    } else {
      routeToDisplay = _selectedRouteProvider.selectedRoute;
    }

    emit(SalesRepHomeLoaded(
      currentRoute: routeToDisplay,
      availableRoutes: event.routes,
      showRoutePanel: state is SalesRepHomeLoaded ? (state as SalesRepHomeLoaded).showRoutePanel : true,
      isBuildingRoute: state is SalesRepHomeLoaded ? (state as SalesRepHomeLoaded).isBuildingRoute : false,
    ));
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–æ–≤ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
  Future<void> _onSyncTracksWithRoute(
    SyncTracksWithRouteEvent event,
    Emitter<SalesRepHomeState> emit,
  ) async {
    try {
      final sessionResult = await AppSessionService.getCurrentAppSession();
      final session = sessionResult.fold((l) => null, (r) => r);
      
      if (session != null) {
        final routeDate = event.route.startTime ?? DateTime.now();
        await _userTracksProvider.loadUserTracksForDate(session.appUser, routeDate);
        
        print('‚úÖ –¢—Ä–µ–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º: ${event.route.name}');
      }
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–∫–æ–≤: $e');
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è stream –º–∞—Ä—à—Ä—É—Ç–æ–≤
  void _setupRouteStreamListener(session) {
    _routesSubscription?.cancel();
    _routesSubscription = _routeRepository
        .watchEmployeeRoutes(session.appUser.employee)
        .listen(
          (routes) => add(RoutesUpdatedEvent(routes)),
          onError: (error) {
            add(LoadUserRoutesEvent()); // Retry —á–µ—Ä–µ–∑ event
            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: $error');
          },
        );
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  void _setupSelectedRouteListener() {
    _selectedRouteSubscription?.cancel();
    _selectedRouteProvider.addListener(() {
      final selectedRoute = _selectedRouteProvider.selectedRoute;
      if (selectedRoute != null) {
        add(SyncTracksWithRouteEvent(selectedRoute));
      }
    });
  }

  /// –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π)
  shop.Route? _findCurrentRoute(List<shop.Route> routes) {
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    var activeRoute = routes.where((r) => r.status == shop.RouteStatus.active).firstOrNull;
    if (activeRoute != null) return activeRoute;
    
    // –ò—â–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
    final today = DateTime.now();
    var todayRoute = routes.where((r) {
      if (r.startTime == null) return false;
      return r.startTime!.year == today.year &&
             r.startTime!.month == today.month &&
             r.startTime!.day == today.day;
    }).firstOrNull;
    
    if (todayRoute != null) return todayRoute;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    return routes.isNotEmpty ? routes.first : null;
  }

  @override
  Future<void> close() {
    _routesSubscription?.cancel();
    _selectedRouteSubscription?.cancel();
    return super.close();
  }
}
