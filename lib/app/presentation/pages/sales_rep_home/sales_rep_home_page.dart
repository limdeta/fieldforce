import 'package:fieldforce/app/presentation/pages/route_detail_page.dart';
import 'package:fieldforce/app/presentation/pages/sales_rep_home/bloc/work_day_bloc.dart';
import 'package:fieldforce/app/services/app_session_service.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/navigation_user.dart';
import 'package:fieldforce/features/navigation/tracking/presentation/bloc/user_tracks_bloc.dart';
import 'package:fieldforce/app/presentation/widgets/app_tracking_button.dart';
import 'package:fieldforce/app/presentation/widgets/combined_map_widget.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fieldforce/app/domain/entities/route.dart' as shop;
import 'package:fieldforce/features/navigation/tracking/domain/services/gps_data_manager.dart';
import 'package:latlong2/latlong.dart';
import 'bloc/sales_rep_home_bloc.dart';
import 'bloc/sales_rep_home_event.dart' as home_events;
import 'bloc/sales_rep_home_state.dart';
import 'bloc/working_day_mode_bloc.dart';
import 'bloc/working_day_coordinator_bloc.dart';
import 'bloc/selected_route_bloc.dart';

/// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —Å BLoC –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
class SalesRepHomePage extends StatelessWidget {
  final shop.Route? selectedRoute;
  final GpsDataManager gpsDataManager;

  const SalesRepHomePage({
    super.key,
    this.selectedRoute,
    required this.gpsDataManager,
  });

  @override
  Widget build(BuildContext context) {
    // –ß–∏—Ç–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–∞
    final args = ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>?;
    final selectedRouteFromArgs = args?['selectedRoute'] as shop.Route?;
    final routeToUse = selectedRouteFromArgs ?? selectedRoute;

    return MultiBlocProvider(
      providers: [
        // –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏
        BlocProvider<SelectedRouteBloc>(
          create: (context) => SelectedRouteBloc()..add(LoadInitialRouteEvent()),
        ),
        BlocProvider<SalesRepHomeBloc>(
          create: (context) => SalesRepHomeBloc()
            ..add(home_events.SalesRepHomeInitializeEvent(preselectedRoute: routeToUse)),
        ),
        BlocProvider<UserTracksBloc>(
          create: (context) => UserTracksBloc(),
        ),
        BlocProvider<WorkDayBloc>(
          create: (context) => WorkDayBloc()..add(LoadWorkDaysEvent()),
        ),
        // –ù–æ–≤—ã–µ –±–ª–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏
        BlocProvider<WorkingDayModeBloc>(
          create: (context) => WorkingDayModeBloc(),
        ),
        BlocProvider<WorkingDayCoordinatorBloc>(
          create: (context) => WorkingDayCoordinatorBloc()..add(InitializeCoordinatorEvent()),
        ),
      ],
      child: SalesRepHomeView(gpsDataManager: gpsDataManager),
    );
  }
}

class SalesRepHomeView extends StatefulWidget {
  final GpsDataManager gpsDataManager;
  const SalesRepHomeView({super.key, required this.gpsDataManager});

  @override
  State<SalesRepHomeView> createState() => _SalesRepHomeViewState();
}

class _SalesRepHomeViewState extends State<SalesRepHomeView> {
  NavigationUser? _user;
  bool _initialized = false;
  DateTime? _lastLoadedDate; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –¥–∞—Ç—ã

  @override
  void initState() {
    super.initState();
    _initializeUser();
  }

  Future<void> _initializeUser() async {
    final sessionResult = await AppSessionService.getCurrentAppSession();
    final session = sessionResult.fold((l) => null, (r) => r);
    if (session != null && !_initialized) {
      setState(() {
        _user = session.appUser;
        _initialized = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: MultiBlocListener(
        listeners: [
          // –°–ª—É—à–∞–µ–º –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
          BlocListener<SelectedRouteBloc, SelectedRouteState>(
            listener: (context, state) {
              if (state is SelectedRouteLoaded) {
                print('[UI] Route selected: ${state.selectedRoute.name}');
                // –£–≤–µ–¥–æ–º–ª—è–µ–º SalesRepHomeBloc –æ –≤—ã–±–æ—Ä–µ –º–∞—Ä—à—Ä—É—Ç–∞
                context.read<SalesRepHomeBloc>().add(home_events.SelectRouteEvent(state.selectedRoute));
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                context.read<WorkDayBloc>().add(LoadWorkDaysEvent());
              }
            },
          ),
          // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
          BlocListener<WorkDayBloc, WorkDayState>(
            listener: (context, state) {
              if (state is WorkDayLoaded && state.selectedWorkDay != null) {
                print('[UI] WorkDay loaded: id=${state.selectedWorkDay!.id}');
                if (_user != null) {
                  final date = state.selectedWorkDay!.date;
                  final normalizedDate = DateTime(date.year, date.month, date.day);
                  final normalizedLastDate = _lastLoadedDate != null 
                      ? DateTime(_lastLoadedDate!.year, _lastLoadedDate!.month, _lastLoadedDate!.day)
                      : null;
                  
                  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–Ω—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                  if (normalizedLastDate == null || normalizedDate != normalizedLastDate) {
                    print('[UI] Date changed from ${normalizedLastDate} to ${normalizedDate}, loading track');
                    _lastLoadedDate = date;
                    context.read<UserTracksBloc>().add(LoadUserTrackForDateEvent(_user!, date));
                  } else {
                    print('[UI] Same date ${normalizedDate}, skipping track reload');
                  }
                }
              }
            },
            // –í–ê–ñ–ù–û: –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è selectedWorkDay, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è activeTrack
            listenWhen: (previous, current) {
              if (previous is WorkDayLoaded && current is WorkDayLoaded) {
                // –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è selectedWorkDay, –∞ –Ω–µ activeTrack
                return previous.selectedWorkDay?.id != current.selectedWorkDay?.id;
              }
              return true; // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–ª—É—à–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            },
          ),
          // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
          BlocListener<UserTracksBloc, UserTracksState>(
            listener: (context, state) {
              if (state is UserTracksLoaded && state.activeTrack != null) {
                print('[UI] Track loaded: id=${state.activeTrack!.id}');
                // –£–≤–µ–¥–æ–º–ª—è–µ–º SalesRepHomeBloc –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞
                context.read<SalesRepHomeBloc>().add(home_events.ActiveTrackUpdatedEvent(state.activeTrack!));
              }
            },
          ),
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
          BlocListener<SalesRepHomeBloc, SalesRepHomeState>(
            listener: (context, state) {
              if (state is SalesRepHomeError) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(state.message),
                    backgroundColor: Colors.red,
                    action: state.canRetry
                        ? SnackBarAction(
                            label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
                            onPressed: () {
                              context.read<SalesRepHomeBloc>().add(
                                const home_events.SalesRepHomeInitializeEvent(),
                              );
                            },
                          )
                        : null,
                  ),
                );
              }
            },
          ),
        ],
        child: BlocBuilder<SalesRepHomeBloc, SalesRepHomeState>(
          builder: (context, state) {
            return Stack(
              children: [
                // –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
                _buildMapArea(context, state),

                // –ö–Ω–æ–ø–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞
                if (state is SalesRepHomeLoaded)
                  Positioned(
                    top: MediaQuery.of(context).padding.top + 70,
                    right: 16,
                    child: const AppTrackingButton(),
                  ),

                // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
                if (state is SalesRepHomeLoaded && state.currentRoute != null)
                  _buildTopPanel(context, state),

                // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                if (state is SalesRepHomeLoaded &&
                    state.currentRoute != null &&
                    state.showRoutePanel)
                  _buildBottomPanel(context, state),

                // Overlay –∑–∞–≥—Ä—É–∑–∫–∏
                if (state is SalesRepHomeLoading)
                  _buildLoadingOverlay(state.message),
              ],
            );
          },
        ),
      ),
    );
  }

  /// –ö–∞—Ä—Ç–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º –∏ —Ç—Ä–µ–∫–∞–º–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
  Widget _buildMapArea(BuildContext context, SalesRepHomeState state) {
    return BlocBuilder<SalesRepHomeBloc, SalesRepHomeState>(
      builder: (context, blocState) {
        print('üèóÔøΩÔøΩÔøΩ MapArea builder: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${blocState.runtimeType}');

        if (blocState is SalesRepHomeLoaded) {
          final route = blocState.currentRoute;
          final track = blocState.activeTrack;
          final routePolylinePoints = blocState.routePolylinePoints;

          if (track != null) {
            print('üó∫Ô∏è MapArea: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–∫ ${track.id} (${track.totalPoints} —Ç–æ—á–µ–∫)');
          }

          return CombinedMapWidget(
            route: route,
            track: track,
            onTap: (point) {
              print('–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É: ${point.latitude}, ${point.longitude}');
            },
            routePolylinePoints: routePolylinePoints,
          );
        }

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç—É
        return CombinedMapWidget(
          route: null,
          track: null,
          onTap: (point) {},
          routePolylinePoints: const [],
        );
      },
    );
  }

  /// –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –º–µ–Ω—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ä—à—Ä—É—Ç–µ
  Widget _buildTopPanel(BuildContext context, SalesRepHomeLoaded state) {
    final route = state.currentRoute!;

    return Positioned(
      top: MediaQuery.of(context).padding.top,
      left: 0,
      right: 0,
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.1),
              offset: const Offset(0, 2),
              blurRadius: 4,
            ),
          ],
        ),
        child: Row(
          children: [
            // –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
            Container(
              width: 60,
              height: 60,
              decoration: const BoxDecoration(color: Colors.blue),
              child: IconButton(
                onPressed: () => Navigator.pushNamed(context, '/menu'),
                icon: const Icon(Icons.menu, color: Colors.white, size: 24),
              ),
            ),

            // –ò–Ω—ÑÔøΩÔøΩ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
            Expanded(
              child: GestureDetector(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => RouteDetailPage(route: route),
                    ),
                  );
                },
                child: Container(
                  height: 60,
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        route.name,
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                      Row(
                        children: [
                          Container(
                            width: 8,
                            height: 8,
                            decoration: BoxDecoration(
                              color: _getRouteStatusColor(route.status),
                              shape: BoxShape.circle,
                            ),
                          ),
                          const SizedBox(width: 4),
                          Text(
                            _getRouteStatusText(route.status),
                            style: TextStyle(
                              color: Colors.grey.shade600,
                              fontSize: 12,
                            ),
                          ),
                          const Spacer(),
                          Text(
                            '${_getCompletedCount(route)}/${route.pointsOfInterest.length}',
                            style: TextStyle(
                              color: Colors.grey.shade600,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ),

            // –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å
            Container(
              width: 50,
              height: 60,
              decoration: BoxDecoration(
                color: Colors.grey.shade100,
                border: Border(
                  left: BorderSide(color: Colors.grey.shade300),
                ),
              ),
              child: IconButton(
                icon: Icon(
                  state.showRoutePanel
                      ? Icons.keyboard_arrow_up
                      : Icons.keyboard_arrow_down,
                  color: Colors.grey.shade700,
                ),
                onPressed: () {
                  context.read<SalesRepHomeBloc>().add(
                    const home_events.ToggleRoutePanelEvent(),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
  Widget _buildBottomPanel(BuildContext context, SalesRepHomeLoaded state) {
    return Positioned(
      bottom: 0,
      left: 0,
      right: 0,
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white,
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.1),
              offset: const Offset(0, -2),
              blurRadius: 4,
            ),
          ],
        ),
        child: SafeArea(
          child: ElevatedButton(
            onPressed: state.isBuildingRoute
                ? null
                : () {
                    context.read<SalesRepHomeBloc>().add(
                      const home_events.BuildRouteEvent(),
                    );
                  },
            style: ElevatedButton.styleFrom(
              minimumSize: const Size.fromHeight(48),
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
            ),
            child: state.isBuildingRoute
                ? const SizedBox(
                    height: 20,
                    width: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  )
                : const Text(
                    '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç',
                    style: TextStyle(fontSize: 16),
                  ),
          ),
        ),
      ),
    );
  }

  /// Overlay –∑–∞–≥—Ä—É–∑–∫–∏
  Widget _buildLoadingOverlay(String? message) {
    return Container(
      color: Colors.black.withValues(alpha: 0.3),
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
            ),
            const SizedBox(height: 16),
            Text(
              message ?? '–ó–∞–≥—Ä—É–∑–∫–∞...',
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
  Color _getRouteStatusColor(shop.RouteStatus status) {
    switch (status) {
      case shop.RouteStatus.planned:
        return Colors.blue;
      case shop.RouteStatus.active:
        return Colors.orange;
      case shop.RouteStatus.completed:
        return Colors.green;
      case shop.RouteStatus.cancelled:
        return Colors.red;
      case shop.RouteStatus.paused:
        return Colors.grey;
    }
  }

  String _getRouteStatusText(shop.RouteStatus status) {
    switch (status) {
      case shop.RouteStatus.planned:
        return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω';
      case shop.RouteStatus.active:
        return '–ê–∫—Ç–∏–≤–Ω—ã–π';
      case shop.RouteStatus.completed:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      case shop.RouteStatus.cancelled:
        return '–û—Ç–º–µ–Ω–µ–Ω';
      case shop.RouteStatus.paused:
        return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    }
  }

  int _getCompletedCount(shop.Route route) {
    return route.pointsOfInterest
        .where((point) => point.isVisited)
        .length;
  }
}
