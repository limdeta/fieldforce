import 'dart:io';
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'package:sqlite3_flutter_libs/sqlite3_flutter_libs.dart';
import 'package:sqlite3/sqlite3.dart';

import 'tables/user_table.dart';
import 'tables/employee_table.dart';
import 'tables/route_table.dart';
import 'tables/point_of_interest_table.dart';
import 'tables/trading_point_table.dart';
import 'tables/trading_point_entity_table.dart';
import 'tables/employee_trading_point_assignment_table.dart';
import 'tables/user_track_table.dart';
import 'tables/compact_track_table.dart';
import 'tables/app_user_table.dart';
import 'tables/work_day_table.dart';
import 'tables/category_table.dart';
import 'tables/product_table.dart';
import 'tables/order_table.dart';
import 'tables/order_line_table.dart';
import 'tables/stock_item_table.dart';
import 'migrations/stock_item_indexes.dart';

part 'app_database.g.dart';

@DriftDatabase(tables: [
  Users,
  Employees,
  Routes,
  PointsOfInterest,
  TradingPoints,
  TradingPointEntities,
  EmployeeTradingPointAssignments,
  UserTracks,
  CompactTracks,
  AppUsers,
  WorkDays,
  Categories,
  Products,
  Orders,
  OrderLines,
  StockItems,
])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection('app_database.db'));
  AppDatabase.withFile(String dbFileName) : super(_openConnection(dbFileName));

  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  AppDatabase.forTesting(DatabaseConnection super.connection);

  @override
  int get schemaVersion => 8;

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
  // TODO –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å
  Future<void> upsertTradingPoint(TradingPointEntitiesCompanion companion) async {

    if (companion.externalId.present) {
      final existing = await getTradingPointByExternalId(companion.externalId.value);
      
      if (existing != null) {
        await (update(tradingPointEntities)
          ..where((tp) => tp.externalId.equals(companion.externalId.value))
        ).write(companion);
      } else {
        await into(tradingPointEntities).insert(companion);
      }
    } else {
      await into(tradingPointEntities).insert(companion);
    }
  }

  Future<TradingPointEntity?> getTradingPointByExternalId(String externalId) async {
    final query = select(tradingPointEntities)
      ..where((tp) => tp.externalId.equals(externalId));
    return await query.getSingleOrNull();
  }

  @override
  MigrationStrategy get migration => MigrationStrategy(
    onCreate: (Migrator m) async {
      await m.createAll();
      // –í–∫–ª—é—á–∞–µ–º foreign key constraints
      await customStatement('PRAGMA foreign_keys = ON');
    },
    onUpgrade: (Migrator m, int from, int to) async {
      // –í–∫–ª—é—á–∞–µ–º foreign key constraints –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      await customStatement('PRAGMA foreign_keys = ON');
      
      if (from < 2) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
        await m.createTable(employeeTradingPointAssignments);
      }

      if (from < 3) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await m.createTable(categories);
      }

      if (from < 4) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        await m.createTable(products);
      }

      if (from < 5) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
        await m.createTable(orders);
        await m.createTable(orderLines);
      }

      if (from < 6) {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ order_lines: –∑–∞–º–µ–Ω—è–µ–º productId –Ω–∞ stockItemId –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ productId
          final result = await customSelect("PRAGMA table_info(order_lines)").get();
          final hasProductId = result.any((row) => row.data['name'] == 'productId');
          
          if (hasProductId) {
            await customStatement('ALTER TABLE order_lines RENAME COLUMN productId TO stockItemId');
          }
        } catch (e) {
          // –ö–æ–ª–æ–Ω–∫–∞ productId –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
          print('–ú–∏–≥—Ä–∞—Ü–∏—è v6: –∫–æ–ª–æ–Ω–∫–∞ productId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        }
      }

      if (from < 7) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ —Ü–µ–Ω
        await m.createTable(stockItems);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for (final indexSql in StockItemIndexes.createIndexes) {
          await customStatement(indexSql);
        }
      }

      if (from < 8) {
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Foreign Key –≤ orders: outlet_id —Ç–µ–ø–µ—Ä—å —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ trading_point_entities
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã orders
        try {
          final result = await customSelect("SELECT name FROM sqlite_master WHERE type='table' AND name='orders'").get();
          if (result.isNotEmpty) {
            // –¢–∞–±–ª–∏—Ü–∞ orders —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ Foreign Key
            await customStatement('ALTER TABLE orders RENAME TO orders_old');
            await m.createTable(orders);
            
            // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–æ–≤—É—é
            await customStatement('''
              INSERT INTO orders (id, creator_id, outlet_id, state, payment_type, payment_details, 
                                 payment_is_cash, payment_is_card, payment_is_credit, comment, name, 
                                 is_pickup, approved_delivery_day, approved_assembly_day, 
                                 with_realization, created_at, updated_at)
              SELECT id, creator_id, outlet_id, state, payment_type, payment_details, 
                     payment_is_cash, payment_is_card, payment_is_credit, comment, name, 
                     is_pickup, approved_delivery_day, approved_assembly_day, 
                     with_realization, created_at, updated_at
              FROM orders_old
            ''');
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
            await customStatement('DROP TABLE orders_old');
          }
        } catch (e) {
          // –¢–∞–±–ª–∏—Ü–∞ orders –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π –±–∞–∑—ã
          print('–ú–∏–≥—Ä–∞—Ü–∏—è v8: —Ç–∞–±–ª–∏—Ü–∞ orders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
        }
      }
    },
  );
}

LazyDatabase _openConnection(String dbFileName) {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    print('=== DB FOLDER: [32m${dbFolder.path}[0m');
    final file = File(p.join(dbFolder.path, dbFileName));
    print('=== DB FILE: [32m${file.path}[0m');
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É SQLite –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
    if (Platform.isAndroid) {
      await applyWorkaroundToOpenSqlite3OnOldAndroidVersions();
    }
    sqlite3.tempDirectory = dbFolder.path;
    return NativeDatabase.createInBackground(
      file,
      logStatements: false,
    );
  });
}
