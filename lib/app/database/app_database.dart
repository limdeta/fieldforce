import 'dart:io';
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:logging/logging.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'package:sqlite3_flutter_libs/sqlite3_flutter_libs.dart';
import 'package:sqlite3/sqlite3.dart';

import 'tables/user_table.dart';
import 'tables/employee_table.dart';
import 'tables/route_table.dart';
import 'tables/point_of_interest_table.dart';
import 'tables/trading_point_table.dart';
import 'tables/trading_point_entity_table.dart';
import 'tables/employee_trading_point_assignment_table.dart';
import 'tables/user_track_table.dart';
import 'tables/compact_track_table.dart';
import 'tables/app_user_table.dart';
import 'tables/work_day_table.dart';
import 'tables/category_table.dart';
import 'tables/product_table.dart';
import 'tables/order_table.dart';
import 'tables/order_line_table.dart';
import 'tables/stock_item_table.dart';
import 'tables/warehouse_table.dart';
import 'tables/order_job_table.dart';
import 'tables/sync_log_table.dart';

part 'app_database.g.dart';

/// Logger for database operations
final Logger _dbLogger = Logger('AppDatabase');

@DriftDatabase(tables: [
  Users,
  Employees,
  Routes,
  PointsOfInterest,
  TradingPoints,
  TradingPointEntities,
  EmployeeTradingPointAssignments,
  UserTracks,
  CompactTracks,
  AppUsers,
  WorkDays,
  Categories,
  Products,
  Orders,
  OrderLines,
  StockItems,
  OrderJobs,
  Warehouses,
  SyncLogs,
])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection('app_database.db'));
  AppDatabase.withFile(String dbFileName) : super(_openConnection(dbFileName));

  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  AppDatabase.forTesting(DatabaseConnection super.connection);

  @override
  int get schemaVersion => 1;

  @override
  MigrationStrategy get migration => MigrationStrategy(
    onCreate: (Migrator m) async {
      _dbLogger.info('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ë–î –≤–µ—Ä—Å–∏–∏ $schemaVersion');
      await m.createAll();
      
      // –í–∫–ª—é—á–∞–µ–º foreign key constraints
      await customStatement('PRAGMA foreign_keys = ON');
      _dbLogger.info('‚úÖ –ë–î —Å–æ–∑–¥–∞–Ω–∞ —Å –≤–µ—Ä—Å–∏–µ–π $schemaVersion');
    },
    onUpgrade: (Migrator m, int from, int to) async {
      _dbLogger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î —Å –≤–µ—Ä—Å–∏–∏ $from –Ω–∞ $to');
      
      // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
      _dbLogger.warning('‚ö†Ô∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã)');
      
      // –û—Ç–∫–ª—é—á–∞–µ–º foreign keys –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      await customStatement('PRAGMA foreign_keys = OFF');
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
      for (final table in allTables) {
        await customStatement('DROP TABLE IF EXISTS ${table.actualTableName};');
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
      await m.createAll();
      
      // –í–∫–ª—é—á–∞–µ–º foreign keys –æ–±—Ä–∞—Ç–Ω–æ
      await customStatement('PRAGMA foreign_keys = ON');
      
      _dbLogger.info('‚úÖ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –≤–µ—Ä—Å–∏–∏ $to');
    },
    beforeOpen: (details) async {
      // –í–∫–ª—é—á–∞–µ–º foreign key constraints –¥–ª—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      await customStatement('PRAGMA foreign_keys = ON');
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ—á–Ω–æ —Å–æ–∑–¥–∞–Ω—ã
      try {
        await customStatement(
          'CREATE INDEX IF NOT EXISTS idx_sync_logs_created_at ON sync_logs(created_at DESC);',
        );
        await customStatement(
          'CREATE INDEX IF NOT EXISTS idx_sync_logs_task_created_at ON sync_logs(task, created_at DESC);',
        );
        _dbLogger.info('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è sync_logs —Å–æ–∑–¥–∞–Ω—ã');
      } catch (e) {
        _dbLogger.warning('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ sync_logs: $e');
      }
      
      if (details.hadUpgrade) {
        _dbLogger.info('–ë–î –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –≤–µ—Ä—Å–∏–∏ ${details.versionBefore} –Ω–∞ ${details.versionNow}');
      } else if (details.wasCreated) {
        _dbLogger.info('–ë–î —Å–æ–∑–¥–∞–Ω–∞ —Å –≤–µ—Ä—Å–∏–µ–π ${details.versionNow}');
      }
    },
  );

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
  // TODO –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å
  Future<void> upsertTradingPoint(TradingPointEntitiesCompanion companion) async {

    if (companion.externalId.present) {
      final existing = await getTradingPointByExternalId(companion.externalId.value);
      
      if (existing != null) {
        await (update(tradingPointEntities)
          ..where((tp) => tp.externalId.equals(companion.externalId.value))
        ).write(companion);
      } else {
        await into(tradingPointEntities).insert(companion);
      }
    } else {
      await into(tradingPointEntities).insert(companion);
    }
  }

  Future<TradingPointEntity?> getTradingPointByExternalId(String externalId) async {
    final query = select(tradingPointEntities)
      ..where((tp) => tp.externalId.equals(externalId));
    return await query.getSingleOrNull();
  }
}

LazyDatabase _openConnection(String dbFileName) {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    _dbLogger.info('=== DB FOLDER: ${dbFolder.path}');
    final file = File(p.join(dbFolder.path, dbFileName));
    _dbLogger.info('=== DB FILE: ${file.path}');
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É SQLite –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
    if (Platform.isAndroid) {
      await applyWorkaroundToOpenSqlite3OnOldAndroidVersions();
    }
    sqlite3.tempDirectory = dbFolder.path;
    return NativeDatabase.createInBackground(
      file,
      logStatements: false,
      setup: (database) {
        // –í–∫–ª—é—á–∞–µ–º foreign key constraints –¥–ª—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        database.execute('PRAGMA foreign_keys = ON');
      },
    );
  });
}
