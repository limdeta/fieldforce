import 'dart:convert';
import 'package:fieldforce/features/shop/domain/repositories/category_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/product_repository.dart';
import 'package:get_it/get_it.dart';
import 'package:drift/drift.dart';
import 'package:logging/logging.dart';
import 'package:fieldforce/shared/either.dart';
import 'package:fieldforce/shared/failures.dart';
import 'package:fieldforce/app/database/app_database.dart';
import 'package:fieldforce/features/shop/domain/entities/category.dart' as tree_category;
import 'package:fieldforce/features/shop/domain/entities/product.dart' as product_entity;

class DriftCategoryRepository implements CategoryRepository {
  final AppDatabase _database = GetIt.instance<AppDatabase>();
  static final Logger _logger = Logger('DriftCategoryRepository');

  @override
  Future<Either<Failure, List<tree_category.Category>>> getAllCategories() async {
    try {
      final entities = await _database.select(_database.categories).get();
            final categories = <tree_category.Category>[];

      for (final entity in entities) {
        final categoryJson = jsonDecode(entity.rawJson) as Map<String, dynamic>;
        final category = tree_category.Category.fromJson(categoryJson);
        categories.add(category);
      }

      // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∏–∑ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
      final tree = _buildCategoryTree(categories);
      return Right(tree);
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e'));
    }
  }

  /// –°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
  List<tree_category.Category> _buildCategoryTree(List<tree_category.Category> categories) {
    final categoryMap = <int, tree_category.Category>{};
    final rootCategories = <tree_category.Category>[];
    final processedIds = <int>{}; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —É–¥–∞–ª—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã
    for (final category in categories) {
      if (!processedIds.contains(category.id)) {
        categoryMap[category.id] = category;
        processedIds.add(category.id);
      }
    }

    // –ó–∞—Ç–µ–º —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
    for (final category in categoryMap.values) {
      if (category.lvl == 1) {
        // –ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if (!rootCategories.any((root) => root.id == category.id)) {
          rootCategories.add(category);
        }
      } else {
        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ —Ä–µ–±–µ–Ω–∫–∞
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º nested set –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
        try {
          final parent = categoryMap.values.firstWhere(
            (c) => c.lft < category.lft && c.rgt > category.rgt && c.lvl == category.lvl - 1,
          );
          if (!parent.children.any((child) => child.id == category.id)) {
            parent.children.add(category);
          }
        } catch (e) {
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ nested set, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ parentId –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
          // –ù–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤—É—é
          if (!rootCategories.any((root) => root.id == category.id)) {
            rootCategories.add(category);
          }
        }
      }
    }

    // for (final root in rootCategories) {
    //   _printCategoryTree(root, 0);
    // }

    return rootCategories;
  }

  @override
  Future<Either<Failure, tree_category.Category?>> getCategoryById(int id) async {
    try {
      final entity = await (_database.select(_database.categories)
        ..where((tbl) => tbl.categoryId.equals(id))
      ).getSingleOrNull();

      if (entity == null) return const Right(null);

      final categoryJson = jsonDecode(entity.rawJson) as Map<String, dynamic>;
      final category = tree_category.Category.fromJson(categoryJson);
      return Right(category);
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> saveCategories(List<tree_category.Category> categories) async {
    try {
      await _database.transaction(() async {
        await _database.delete(_database.categories).go();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ID –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        final savedIds = <int>{};

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
        for (final category in categories) {
          if (!savedIds.contains(category.id)) {
            await _saveCategoryRecursive(category, null, savedIds);
            savedIds.add(category.id);
          }
        }
      });
      return const Right(null);
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e'));
    }
  }

  Future<void> _saveCategoryRecursive(tree_category.Category category, int? parentId, Set<int> savedIds) async {
    final companion = CategoriesCompanion(
      name: Value(category.name),
      categoryId: Value(category.id),
      lft: Value(category.lft),
      lvl: Value(category.lvl),
      rgt: Value(category.rgt),
      description: Value(category.description),
      query: Value(category.query),
      count: Value(category.count),
      parentId: Value(parentId),
      rawJson: Value(jsonEncode(category.toJson())),
    );

    final insertedId = await _database.into(_database.categories).insert(companion);

    for (final child in category.children) {
      if (!savedIds.contains(child.id)) {
        await _saveCategoryRecursive(child, insertedId, savedIds);
        savedIds.add(child.id);
      }
    }
  }

  @override
  Future<Either<Failure, void>> updateCategory(tree_category.Category category) async {
    try {
      final companion = CategoriesCompanion(
        name: Value(category.name),
        lft: Value(category.lft),
        lvl: Value(category.lvl),
        rgt: Value(category.rgt),
        description: Value(category.description),
        query: Value(category.query),
        count: Value(category.count),
        rawJson: Value(jsonEncode(category.toJson())),
      );

      await (_database.update(_database.categories)
        ..where((tbl) => tbl.categoryId.equals(category.id))
      ).write(companion);

      return const Right(null);
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> deleteCategory(int id) async {
    try {
      await (_database.delete(_database.categories)
        ..where((tbl) => tbl.categoryId.equals(id))
      ).go();
      return const Right(null);
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  @override
  Future<Either<Failure, List<tree_category.Category>>> searchCategories(String query) async {
    try {
      final entities = await (_database.select(_database.categories)
        ..where((tbl) => tbl.name.contains(query))
      ).get();

      final categories = entities.map((entity) {
        final categoryJson = jsonDecode(entity.rawJson) as Map<String, dynamic>;
        return tree_category.Category.fromJson(categoryJson);
      }).toList();

      return Right(categories);
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e'));
    }
  }

  @override
  Future<Either<Failure, List<tree_category.Category>>> getSubcategories(int parentId) async {
    try {
      final entities = await (_database.select(_database.categories)
        ..where((tbl) => tbl.parentId.equals(parentId))
      ).get();

      final categories = entities.map((entity) {
        final categoryJson = jsonDecode(entity.rawJson) as Map<String, dynamic>;
        return tree_category.Category.fromJson(categoryJson);
      }).toList();

      return Right(categories);
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e'));
    }
  }

  @override
  Future<Either<Failure, List<tree_category.Category>>> getAllDescendants(int categoryId) async {
    try {
      _logger.info('üîç getAllDescendants: categoryId=$categoryId');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ—ë lft –∏ rgt
      final parentEntity = await (_database.select(_database.categories)
        ..where((tbl) => tbl.categoryId.equals(categoryId))
      ).getSingleOrNull();

      _logger.fine('üîç getAllDescendants: parentEntity = ${parentEntity != null ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}');
      
      if (parentEntity == null) {
        _logger.warning('‚ö†Ô∏è getAllDescendants: –∫–∞—Ç–µ–≥–æ—Ä–∏—è $categoryId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return Right([]);
      }

      final parentJson = jsonDecode(parentEntity.rawJson) as Map<String, dynamic>;
      final parentCategory = tree_category.Category.fromJson(parentJson);

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –ø–æ nested set: lft > parent.lft AND rgt < parent.rgt
      final entities = await (_database.select(_database.categories)
        ..where((tbl) => tbl.lft.isBiggerThanValue(parentCategory.lft) & tbl.rgt.isSmallerThanValue(parentCategory.rgt))
      ).get();

      final categories = entities.map((entity) {
        final categoryJson = jsonDecode(entity.rawJson) as Map<String, dynamic>;
        return tree_category.Category.fromJson(categoryJson);
      }).toList();

      _logger.info('‚úÖ getAllDescendants: –Ω–∞–π–¥–µ–Ω–æ ${categories.length} –ø–æ—Ç–æ–º–∫–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $categoryId');
      return Right(categories);
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–º–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  @override
  Future<Either<Failure, List<tree_category.Category>>> getAllAncestors(int categoryId) async {
    try {
      final ancestors = <tree_category.Category>[];
      var currentId = categoryId;

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏
      while (true) {
        final entity = await (_database.select(_database.categories)
          ..where((tbl) => tbl.categoryId.equals(currentId))
        ).getSingleOrNull();

        if (entity == null) break;

        // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (lvl == 1), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
        if (entity.lvl == 1) break;

        // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ parentId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (entity.parentId == null) break;

        final parentEntity = await (_database.select(_database.categories)
          ..where((tbl) => tbl.categoryId.equals(entity.parentId!))
        ).getSingleOrNull();

        if (parentEntity == null) break;

        final parentJson = jsonDecode(parentEntity.rawJson) as Map<String, dynamic>;
        final parentCategory = tree_category.Category.fromJson(parentJson);

        ancestors.add(parentCategory);
        currentId = parentCategory.id;
      }

      return Right(ancestors);
    } catch (e) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> updateCategoryCounts() async {
    try {
      _logger.info('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ count –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞
      final allCategoriesResult = await getAllCategories();
      if (allCategoriesResult.isLeft()) {
        return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π'));
      }

      final allCategories = allCategoriesResult.getOrElse(() => []);
      return await _updateCategoryCountsInternal(allCategories);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è count', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è count –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> updateCategoryCountsWithCategories(List<tree_category.Category> categories) async {
    try {
      _logger.info('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ count –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      return await _updateCategoryCountsInternal(categories);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è count', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è count –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e'));
    }
  }

  Future<Either<Failure, void>> _updateCategoryCountsInternal(List<tree_category.Category> allCategories) async {
    final flatCategories = _flattenCategories(allCategories);
    _logger.info('–ù–∞–π–¥–µ–Ω–æ ${flatCategories.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ count
    final productRepository = GetIt.instance<ProductRepository>();
    final allProductsResult = await productRepository.getAllProducts();
    if (allProductsResult.isLeft()) {
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤'));
    }

    final allProducts = allProductsResult.getOrElse(() => []);
    _logger.info('–ü–æ–ª—É—á–µ–Ω–æ ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ count');

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º count –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏
    final categoryCounts = _calculateCategoryCounts(allCategories, allProducts);

    // –û–±–Ω–æ–≤–ª—è–µ–º count –≤ –æ–±—ä–µ–∫—Ç–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI)
    _updateCategoriesCount(allCategories, categoryCounts);

    // –û–±–Ω–æ–≤–ª—è–µ–º count –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    for (final category in flatCategories) {
      final count = categoryCounts[category.id] ?? 0;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∫ –ø–æ–ª–µ count, —Ç–∞–∫ –∏ rawJson —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      final updatedJson = category.toJson();
      updatedJson['count'] = count;

      await (_database.update(_database.categories)
        ..where((tbl) => tbl.categoryId.equals(category.id))
      ).write(CategoriesCompanion(
        count: Value(count),
        rawJson: Value(jsonEncode(updatedJson)),
      ));

      // _logger.info('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.name} (id: ${category.id}): –æ–±–Ω–æ–≤–ª–µ–Ω–æ count = $count');
    }

    _logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ count –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    return const Right(null);
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç count –≤ –æ–±—ä–µ–∫—Ç–∞—Ö –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ mutable)
  void _updateCategoriesCount(List<tree_category.Category> categories, Map<int, int> categoryCounts) {
    for (final category in categories) {
      _updateCategoryCountRecursive(category, categoryCounts);
    }
  }

  void _updateCategoryCountRecursive(tree_category.Category category, Map<int, int> categoryCounts) {
    category.count = categoryCounts[category.id] ?? 0;

    for (final child in category.children) {
      _updateCategoryCountRecursive(child, categoryCounts);
    }
  }

  /// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏
  Map<int, int> _calculateCategoryCounts(List<tree_category.Category> categories, List<product_entity.Product> products) {
    final counts = <int, int>{};

    final allCategories = _flattenCategories(categories);

    for (final category in allCategories) {
      final categoryProducts = _findProductsInCategoryAndDescendants(products, category);
      counts[category.id] = categoryProducts.length;
    }

    return counts;
  }

  List<product_entity.Product> _findProductsInCategoryAndDescendants(List<product_entity.Product> products, tree_category.Category category) {
    final result = <product_entity.Product>[];
    final categoryIds = {category.id};

    for (final descendant in category.getAllDescendants()) {
      categoryIds.add(descendant.id);
    }

    // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    for (final product in products) {
      final productCategoryIds = product.categoriesInstock.map((c) => c.id).toSet();
      if (productCategoryIds.intersection(categoryIds).isNotEmpty) {
        result.add(product);
      }
    }

    return result;
  }

  List<tree_category.Category> _flattenCategories(List<tree_category.Category> categories) {
    final result = <tree_category.Category>[];
    final seenIds = <int>{};

    void traverse(tree_category.Category category) {
      if (!seenIds.contains(category.id)) {
        seenIds.add(category.id);
        result.add(category);
      }
      for (final child in category.children) {
        traverse(child);
      }
    }

    for (final category in categories) {
      traverse(category);
    }

    return result;
  }
}