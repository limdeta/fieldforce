// lib/app/database/repositories/stock_item_repository_drift.dart

import 'package:fieldforce/features/shop/domain/entities/stock_item.dart';
import 'package:fieldforce/features/shop/domain/repositories/stock_item_repository.dart';
import 'package:fieldforce/app/database/mappers/stock_item_mapper.dart';
import 'package:get_it/get_it.dart';
import 'package:drift/drift.dart';
import 'package:fieldforce/shared/either.dart';
import 'package:fieldforce/shared/failures.dart';
import 'package:fieldforce/app/database/app_database.dart';
import 'package:logging/logging.dart';

class DriftStockItemRepository implements StockItemRepository {
  static final Logger _logger = Logger('DriftStockItemRepository');
  final AppDatabase _database = GetIt.instance<AppDatabase>();

  @override
  Future<Either<Failure, List<StockItem>>> getStockItemsByProductCode(int productCode) async {
    try {
      final entities = await (_database.select(_database.stockItems)
        ..where((tbl) => tbl.productCode.equals(productCode))
      ).get();

      final stockItems = StockItemMapper.fromDataList(entities);
      return Right(stockItems);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ $productCode', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: $e'));
    }
  }

  @override
  Future<Either<Failure, List<StockItem>>> getStockItemsByVendorId(String vendorId) async {
    try {
      final entities = await (_database.select(_database.stockItems)
        ..where((tbl) => tbl.warehouseVendorId.equals(vendorId))
      ).get();

      final stockItems = StockItemMapper.fromDataList(entities);
      return Right(stockItems);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ $vendorId', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: $e'));
    }
  }

  @override
  Future<Either<Failure, List<StockItem>>> getAvailableStockItems({
    String? vendorId,
    int? warehouseId,
  }) async {
    try {
      final query = _database.select(_database.stockItems)
        ..where((tbl) => tbl.stock.isBiggerThanValue(0));
      
      if (vendorId != null) {
        query.where((tbl) => tbl.warehouseVendorId.equals(vendorId));
      }
      
      if (warehouseId != null) {
        query.where((tbl) => tbl.warehouseId.equals(warehouseId));
      }

      final entities = await query.get();
      final stockItems = StockItemMapper.fromDataList(entities);
      return Right(stockItems);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: $e'));
    }
  }

  @override
  Future<Either<Failure, StockItem?>> getStockItem(int productCode, int warehouseId) async {
    try {
      final entity = await (_database.select(_database.stockItems)
        ..where((tbl) => tbl.productCode.equals(productCode) & tbl.warehouseId.equals(warehouseId))
      ).getSingleOrNull();

      if (entity == null) return const Right(null);

      final stockItem = StockItemMapper.fromData(entity);
      return Right(stockItem);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ $productCode –Ω–∞ —Å–∫–ª–∞–¥–µ $warehouseId', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> saveStockItems(List<StockItem> stockItems) async {
    try {
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      _logger.info('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${stockItems.length} –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤');
      
      final itemsWithStock = stockItems.where((item) => item.stock > 0).toList();
      _logger.info('üíæ –°—Ä–µ–¥–∏ –Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å stock > 0: ${itemsWithStock.length}');
      
      if (stockItems.isNotEmpty) {
        final firstItem = stockItems.first;
        _logger.info('üíæ –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: productCode=${firstItem.productCode}, stock=${firstItem.stock}, warehouseId=${firstItem.warehouseId}');
      }
      
      if (itemsWithStock.isNotEmpty) {
        final firstWithStock = itemsWithStock.first;
        _logger.info('üíæ –ü–µ—Ä–≤—ã–π —Å stock > 0: productCode=${firstWithStock.productCode}, stock=${firstWithStock.stock}, warehouseId=${firstWithStock.warehouseId}');
      }
      
      int savedCount = 0;
      int skippedCount = 0;
      
      await _database.transaction(() async {
        for (final stockItem in stockItems) {
          final wasSaved = await _saveStockItem(stockItem);
          if (wasSaved) {
            savedCount++;
          } else {
            skippedCount++;
          }
        }
      });
      
      _logger.info('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount} (–Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤)');
      return const Right(null);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: $e'));
    }
  }

  Future<bool> _saveStockItem(StockItem stockItem) async {
    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    final productExists = await (_database.select(_database.products)
      ..where((tbl) => tbl.code.equals(stockItem.productCode))
    ).getSingleOrNull();
    
    if (productExists == null) {
      _logger.warning('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å StockItem –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–æ–¥–æ–º ${stockItem.productCode}');
      return false; // –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ StockItem —Å —Ç–∞–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π productCode + warehouseId
    final existing = await (_database.select(_database.stockItems)
      ..where((tbl) => 
        tbl.productCode.equals(stockItem.productCode) & 
        tbl.warehouseId.equals(stockItem.warehouseId)
      )
    ).getSingleOrNull();
    
    final companion = StockItemMapper.toCompanion(stockItem, excludeId: true);
    
    if (existing != null) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π StockItem
      await (_database.update(_database.stockItems)
        ..where((tbl) => 
          tbl.productCode.equals(stockItem.productCode) & 
          tbl.warehouseId.equals(stockItem.warehouseId)
        )
      ).write(companion);
      _logger.fine('–û–±–Ω–æ–≤–ª–µ–Ω StockItem –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${stockItem.productCode}, —Å–∫–ª–∞–¥ ${stockItem.warehouseId}');
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π StockItem
      await _database.into(_database.stockItems).insert(companion);
      _logger.fine('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π StockItem –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${stockItem.productCode}, —Å–∫–ª–∞–¥ ${stockItem.warehouseId}');
    }
    
    return true; // –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
  }

  @override
  Future<Either<Failure, void>> batchUpdateStock(List<StockUpdate> updates) async {
    try {
      await _database.transaction(() async {
        for (final update in updates) {
          await (_database.update(_database.stockItems)
            ..where((tbl) => 
              tbl.productCode.equals(update.productCode) & 
              tbl.warehouseId.equals(update.warehouseId)
            )
          ).write(StockItemMapper.toStockUpdateCompanion(update));
        }
      });
      
      _logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: ${updates.length}');
      return const Right(null);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> batchUpdatePrices(List<PriceUpdate> updates) async {
    try {
      await _database.transaction(() async {
        for (final update in updates) {
          await (_database.update(_database.stockItems)
            ..where((tbl) => 
              tbl.productCode.equals(update.productCode) & 
              tbl.warehouseId.equals(update.warehouseId)
            )
          ).write(StockItemMapper.toPriceUpdateCompanion(update));
        }
      });
      
      _logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: ${updates.length}');
      return const Right(null);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> deleteStockItemsForWarehouse(int warehouseId) async {
    try {
      final deletedCount = await (_database.delete(_database.stockItems)
        ..where((tbl) => tbl.warehouseId.equals(warehouseId))
      ).go();
      
      _logger.info('–£–¥–∞–ª–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞ $warehouseId: $deletedCount');
      return const Right(null);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞ $warehouseId', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: $e'));
    }
  }

  // –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–ø–µ—Ä—å –≤—ã–Ω–µ—Å–µ–Ω –≤ StockItemMapper –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞

  @override
  Future<Either<Failure, StockItem>> getById(int stockItemId) async {
    try {
      final entity = await (_database.select(_database.stockItems)
        ..where((tbl) => tbl.id.equals(stockItemId))
      ).getSingle();

      final stockItem = StockItemMapper.fromData(entity);
      return Right(stockItem);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ ID $stockItemId', e, st);
      return Left(DatabaseFailure('–û—Å—Ç–∞—Ç–æ–∫ —Å ID $stockItemId –Ω–µ –Ω–∞–π–¥–µ–Ω: $e'));
    }
  }

  @override
  Future<Either<Failure, void>> clearAllStockItems() async {
    try {
      await _database.delete(_database.stockItems).go();
      _logger.info('–í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã');
      return const Right(null);
    } catch (e, st) {
      _logger.severe('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤', e, st);
      return Left(DatabaseFailure('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: $e'));
    }
  }
}