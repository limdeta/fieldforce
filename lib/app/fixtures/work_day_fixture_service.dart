import 'package:fieldforce/app/domain/work_day.dart';
import 'package:fieldforce/app/domain/app_user.dart';
import 'package:fieldforce/features/shop/domain/entities/route.dart' as shop;
import 'package:fieldforce/features/navigation/tracking/data/fixtures/track_fixtures.dart';
import 'package:fieldforce/features/navigation/tracking/domain/entities/user_track.dart';
import 'package:fieldforce/features/shop/domain/repositories/route_repository.dart';
import 'package:get_it/get_it.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä WorkDay
/// 
/// –°–æ–∑–¥–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã "—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å" –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç:
/// - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// - –î–∞—Ç—É
/// - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç 
/// - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
class WorkDayFixtureService {
  final RouteRepository _routeRepository;
  
  WorkDayFixtureService(this._routeRepository);

  /// –°–æ–∑–¥–∞–µ—Ç WorkDay —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
  /// 
  /// –°–æ–∑–¥–∞–µ—Ç:
  /// - –í—á–µ—Ä–∞—à–Ω–∏–π WorkDay: –µ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫
  /// - –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay: –µ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç, —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ + –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥
  /// - –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π WorkDay: —Ç–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç, –±–µ–∑ —Ç—Ä–µ–∫–∞
  Future<List<WorkDay>> createWorkDaysForSalesRep(AppUser salesRepAppUser) async {
    print('üîß –°–æ–∑–¥–∞–µ–º WorkDay —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è ${salesRepAppUser.fullName}');
    
    final workDays = <WorkDay>[];
    final now = DateTime.now();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ, –±–µ–∑ stream)
    final routes = await _routeRepository.getEmployeeRoutes(salesRepAppUser.employee);
    
    if (routes.isEmpty) {
      print('‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${salesRepAppUser.fullName} –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è WorkDay');
      return workDays;
    }

    // 1. –í–ß–ï–†–ê–®–ù–ò–ô WorkDay - –µ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫
    final yesterdayDate = DateTime(now.year, now.month, now.day - 1);
    final yesterdayRoute = routes.firstWhere(
      (route) => route.name.contains('2 —Å–µ–Ω—Ç—è–±—Ä—è'), 
      orElse: () => routes.first,
    );
    
    print('üéØ –°–æ–∑–¥–∞–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π WorkDay –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ "${yesterdayRoute.name}"');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    final yesterdayTrack = await TrackFixtures.createCurrentDayTrack(
      user: salesRepAppUser.employee,
      route: yesterdayRoute,
    );
    
    final yesterdayWorkDay = WorkDay(
      id: DateTime.now().millisecondsSinceEpoch - 1000, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      userId: salesRepAppUser.employee.id,
      date: yesterdayDate,
      plannedRoute: yesterdayRoute,
      actualTrack: yesterdayTrack,
      status: WorkDayStatus.completed,
      startTime: DateTime(yesterdayDate.year, yesterdayDate.month, yesterdayDate.day, 9, 0),
      endTime: DateTime(yesterdayDate.year, yesterdayDate.month, yesterdayDate.day, 18, 0),
    );
    
    workDays.add(yesterdayWorkDay);
    print('‚úÖ –í—á–µ—Ä–∞—à–Ω–∏–π WorkDay —Å–æ–∑–¥–∞–Ω: ${yesterdayTrack?.totalPoints ?? 0} —Ç–æ—á–µ–∫');

    // 2. –°–ï–ì–û–î–ù–Ø–®–ù–ò–ô WorkDay - –µ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç, —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫
    final todayDate = DateTime(now.year, now.month, now.day);
    final todayRoute = routes.firstWhere(
      (route) => route.name.contains('3 —Å–µ–Ω—Ç—è–±—Ä—è') || route.name.contains('–¢–µ–∫—É—â–∏–π'),
      orElse: () => routes.last,
    );
    
    print('üéØ –°–æ–∑–¥–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ "${todayRoute.name}"');
    
    // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç—Ä–µ–∫ —Å–æ–∑–¥–∞—Å—Ç—Å—è —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π GPS —Ç—Ä–µ–∫–∏–Ω–≥
    // –ó–¥–µ—Å—å –º—ã —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ WorkDay —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    final todayWorkDay = WorkDay(
      id: DateTime.now().millisecondsSinceEpoch,
      userId: salesRepAppUser.employee.id,
      date: todayDate,
      plannedRoute: todayRoute,
      actualTrack: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥
      status: WorkDayStatus.active,
      startTime: DateTime(todayDate.year, todayDate.month, todayDate.day, 9, 0),
    );
    
    workDays.add(todayWorkDay);
    print('‚úÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞');

    // 3. –ó–ê–í–¢–†–ê–®–ù–ò–ô WorkDay - —Ç–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç, –±–µ–∑ —Ç—Ä–µ–∫–∞
    final tomorrowDate = DateTime(now.year, now.month, now.day + 1);
    final tomorrowRoute = routes.firstWhere(
      (route) => route.name.contains('4 —Å–µ–Ω—Ç—è–±—Ä—è'),
      orElse: () => routes.first,
    );
    
    print('üéØ –°–æ–∑–¥–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π WorkDay –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ "${tomorrowRoute.name}"');
    
    final tomorrowWorkDay = WorkDay(
      id: DateTime.now().millisecondsSinceEpoch + 1000,
      userId: salesRepAppUser.employee.id,
      date: tomorrowDate,
      plannedRoute: tomorrowRoute,
      actualTrack: null, // –ù–µ—Ç —Ç—Ä–µ–∫–∞ - –¥–µ–Ω—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è
      status: WorkDayStatus.planned,
    );
    
    workDays.add(tomorrowWorkDay);
    print('‚úÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π WorkDay —Å–æ–∑–¥–∞–Ω (—Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω)');

    print('‚úÖ WorkDay —Ñ–∏–∫—Å—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã: ${workDays.length} –¥–Ω–µ–π');
    return workDays;
  }

  /// –°–æ–∑–¥–∞–µ—Ç WorkDay –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –∏ –º–∞—Ä—à—Ä—É—Ç–∞
  Future<WorkDay> createWorkDayForDate({
    required AppUser salesRepAppUser,
    required DateTime date,
    required shop.Route plannedRoute,
    UserTrack? actualTrack,
    WorkDayStatus status = WorkDayStatus.planned,
  }) async {
    return WorkDay(
      id: DateTime.now().millisecondsSinceEpoch,
      userId: salesRepAppUser.employee.id,
      date: date,
      plannedRoute: plannedRoute,
      actualTrack: actualTrack,
      status: status,
    );
  }
}

/// Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WorkDayFixtureService
class WorkDayFixtureServiceFactory {
  static WorkDayFixtureService create() {
    final routeRepository = GetIt.instance<RouteRepository>();
    return WorkDayFixtureService(routeRepository);
  }
}
