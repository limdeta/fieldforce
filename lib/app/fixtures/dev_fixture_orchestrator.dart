import 'package:fieldforce/app/domain/entities/app_user.dart';
import 'package:fieldforce/app/domain/usecases/create_work_day_usecase.dart';
import 'package:fieldforce/app/fixtures/route_fixture_service.dart';
import 'package:fieldforce/app/fixtures/user_fixture.dart';
import 'package:fieldforce/features/navigation/tracking/data/fixtures/track_fixtures.dart';
import 'package:fieldforce/features/shop/data/fixtures/trading_points_fixture_service.dart';
import 'package:fieldforce/features/shop/data/fixtures/category_fixture_service.dart';
import 'package:fieldforce/features/shop/data/fixtures/product_fixture_service.dart';
import 'package:fieldforce/features/shop/data/fixtures/order_fixture_service.dart';
import 'package:fieldforce/features/shop/domain/entities/trading_point.dart';
import 'package:fieldforce/features/shop/domain/repositories/category_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/product_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/trading_point_repository.dart';
import 'package:fieldforce/features/shop/domain/repositories/employee_repository.dart';
import 'package:fieldforce/app/database/app_database.dart';
import 'package:fieldforce/shared/either.dart';
import 'package:flutter/cupertino.dart';
import 'package:get_it/get_it.dart';

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö dev —Ñ–∏–∫—Å—Ç—É—Ä
class DevFixtureOrchestrator {
  final UserFixture _userFixture;
  final RouteFixtureService _routeFixtureService;
  final TradingPointsFixtureService _tradingPointsFixture;
  final CategoryFixtureService _categoryFixture;
  final ProductFixtureService _productFixture;
  final OrderFixtureService _orderFixture;
  final CreateWorkDayUseCase _createWorkDayUseCase;

  DevFixtureOrchestrator(
      this. _userFixture,
      this._routeFixtureService,
      this._tradingPointsFixture,
      this._categoryFixture,
      this._productFixture,
      this._orderFixture,
      this._createWorkDayUseCase,
      );

  /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä dev –¥–∞–Ω–Ω—ã—Ö
  Future<void> createFullDevDataset() async {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ assets
    await Future.delayed(const Duration(milliseconds: 100));

    await _clearAllData();
    final user = await _userFixture.getBasicUser(userData: _userFixture.saddam);
    await createScenarioWithUser(user);
    print("–ó–∞–≥—Ä—É–∑–∏–ª –≤—Å–µ dev —Ñ–∏–∫—Å—Ç—É—Ä—ã");
  }

  Future<void> _clearAllData() async {
    final database = GetIt.instance<AppDatabase>();
    await database.customStatement('PRAGMA foreign_keys = OFF');
    for (final table in database.allTables) {
      await database.delete(table).go();
    }
    await database.customStatement('PRAGMA foreign_keys = ON');
  }

  Future<void> createScenarioWithUser(AppUser user) async {
  try {
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
      await _tradingPointsFixture.assignTradingPointsToEmployee(user.employee);

      // 0. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
      await _categoryFixture.loadCategories(fixtureType: FixtureType.full);

      // 0.1. –ü—Ä–æ–¥—É–∫—Ç—ã
      final productsResult = await _productFixture.loadProducts(ProductFixtureType.full);
      if (productsResult.isLeft()) {
        throw StateError('Failed to load products: ${productsResult.fold((l) => l, (r) => '')}');
      }
      final products = productsResult.fold((l) => throw StateError(l.toString()), (r) => r);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      final productRepository = GetIt.instance<ProductRepository>();
      await productRepository.saveProducts(products);

      // 1. –ú–∞—Ä—à—Ä—É—Ç—ã
      final yesterdayRoute = await unwrapOrThrow(
          _routeFixtureService.createYesterdayRoute(user.employee),
          'Yesterday Route creation failed'
      );

      final todayRoute = await unwrapOrThrow(
          _routeFixtureService.createTodayRoute(user.employee),
          'Today Route creation failed'
      );

      // 2. –¢—Ä–µ–∫–∏
      final todayTrack = await TrackFixtures.createTodayTrack(
          user: user, route: todayRoute
      );

      // 3. WorkDay
      _createWorkDayUseCase.call(
        user: user,
        route: yesterdayRoute,
        track: null,
        date: DateTime.now().subtract(const Duration(days: 1)),
      );

      _createWorkDayUseCase.call(
        user: user,
        track: todayTrack,
        route: todayRoute,
        date: DateTime.now(),
      );

      // 4. –ó–∞–∫–∞–∑—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ ID
      final employeeRepository = GetIt.instance<EmployeeRepository>();
      final tradingPointRepository = GetIt.instance<TradingPointRepository>();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID
      final employeeResult = await employeeRepository.getById(user.employee.id);
      final employee = employeeResult.fold(
        (failure) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤: $failure');
          return user.employee; // fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É
        },
        (emp) => emp, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –±–∞–∑—ã
      );
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –∏–∑ –±–∞–∑—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ ID
      final tradingPointsResult = await tradingPointRepository.getEmployeePoints(employee);
      final tradingPoints = tradingPointsResult.fold(
        (failure) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤: $failure');
          return <TradingPoint>[];
        },
        (points) => points,
      );
      
      if (tradingPoints.isNotEmpty) {
        debugPrint('üîç –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID: ${employee.id}, —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: ${tradingPoints.map((tp) => tp.id).join(", ")}');
        await _orderFixture.createFixtureOrders(
          employee: employee,
          tradingPoints: tradingPoints,
        );
      } else {
        debugPrint('‚ùå –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      final categoryRepository = GetIt.instance<CategoryRepository>();
      await categoryRepository.updateCategoryCounts();
    } catch (e, st) {
      FlutterError.reportError(FlutterErrorDetails(
        exception: e,
        stack: st,
        library: 'DevFixtureOrchestrator',
        context: ErrorDescription('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
      ));
      rethrow;
    }
  }
}

