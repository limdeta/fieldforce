import 'package:fieldforce/features/authentication/domain/entities/user.dart';
import 'package:fieldforce/features/authentication/data/fixtures/user_fixture_service.dart';
import 'package:fieldforce/features/shop/data/fixtures/route_fixture_service.dart';
import 'package:fieldforce/features/shop/data/fixtures/trading_points_fixture_service.dart';
import 'package:fieldforce/features/shop/domain/repositories/trading_point_repository.dart';
import 'package:fieldforce/features/navigation/tracking/data/fixtures/track_fixtures.dart';
import 'package:fieldforce/app/database/app_database.dart';
import 'package:fieldforce/app/domain/app_user.dart';
import 'package:fieldforce/app/fixtures/app_user_fixture_service.dart';
import 'package:get_it/get_it.dart';
import 'package:fieldforce/features/shop/domain/repositories/route_repository.dart';

/// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö AppUser-–æ–≤ –ø–æ —Ä–æ–ª—è–º
class DevAppUsers {
  final AppUser admin;
  final AppUser manager;
  final List<AppUser> salesReps;

  const DevAppUsers({
    required this.admin,
    required this.manager,
    required this.salesReps,
  });
  
  factory DevAppUsers.empty() {
    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ AppUser –¥–ª—è fallback —Å–ª—É—á–∞–µ–≤
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    throw UnimplementedError('Empty DevAppUsers creation not implemented - only for error handling');
  }
}

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö dev —Ñ–∏–∫—Å—Ç—É—Ä
/// 
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
/// 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏)
/// 2. –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π
/// 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
/// 
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
class DevFixtureOrchestrator {
  final UserFixtureService _userFixtureService;
  final AppUserFixtureService _appUserFixtureService;
  final RouteFixtureService _routeFixtureService;
  final TradingPointsFixtureService _tradingPointsService;
  
  DevFixtureOrchestrator(
    this._userFixtureService,
    this._appUserFixtureService,
    this._routeFixtureService,
    this._tradingPointsService,
  );

  /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä dev –¥–∞–Ω–Ω—ã—Ö
  Future<DevFixturesResult> createFullDevDataset() async {
    // print('üöÄ ===== –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø DEV –î–ê–ù–ù–´–• =====');
    // print('üïí –í—Ä–µ–º—è: ${DateTime.now()}');
    
    try {
      await _clearAllData();
      await _tradingPointsService.createBaseTradingPoints();
      
      final appUsers = await _createAppUsers();
      await _createRoutesForSalesReps(appUsers);
      await _createTestTracks(appUsers);

      print('‚úÖ ===== DEV –î–ê–ù–ù–´–ï –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û =====');
      return DevFixturesResult(
        appUsers: appUsers,
        success: true,
        message: '–í—Å–µ dev —Ñ–∏–∫—Å—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      );
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è dev –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  Future<DevAppUsers> createAppUsersOnly() async {
    return await _createAppUsers();
  }

  Future<void> createRoutesForExistingAppUsers(List<AppUser> salesReps) async {
    await _createRoutesForSalesReps(DevAppUsers(
      admin: _createEmptyAppUser(),
      manager: _createEmptyAppUser(),
      salesReps: salesReps,
    ));
  }

  AppUser _createEmptyAppUser() {
    // –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π AppUser –¥–ª—è fallback —Å–ª—É—á–∞–µ–≤
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    throw UnimplementedError('Empty AppUser creation not implemented');
  }

  Future<void> _clearAllData() async {
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print('üßπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      final database = GetIt.instance<AppDatabase>();
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç
      await database.customStatement('SELECT 1');
      print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // –ü–æ–∫–∞ –Ω–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
      print('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
    
    print('üßπ Dev –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—á–∏—â–µ–Ω—ã');
  }

  Future<DevAppUsers> _createAppUsers() async {

    
    // 1. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (User —Å—É—â–Ω–æ—Å—Ç–∏)
    final admin = await _userFixtureService.createAdmin();
    final manager = await _userFixtureService.createManager();
    final salesReps = <User>[];
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ sales rep –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
    final salesRep1 = await _userFixtureService.createSalesRep(
      name: '–ê–ª–µ–∫—Å–µ–π –¢–æ—Ä–≥–æ–≤—ã–π',
      email: 'salesrep1@fieldforce.dev',
      phone: '+7-999-111-2233',
    );
    salesReps.add(salesRep1);

    // 2. –°–æ–∑–¥–∞–µ–º AppUser –¥–ª—è –∫–∞–∂–¥–æ–≥–æ User (User -> Employee -> AppUser)
    final allUsers = [admin, manager, ...salesReps];
    final appUsers = await _appUserFixtureService.createAppUsersForAuthUsers(allUsers);

    // 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º AppUsers –ø–æ —Ä–æ–ª—è–º
    final adminAppUser = appUsers.firstWhere((au) => au.authUser.role == UserRole.admin);
    final managerAppUser = appUsers.firstWhere((au) => au.authUser.role == UserRole.manager);
    final salesRepAppUsers = appUsers.where((au) => au.authUser.role == UserRole.user).toList();

    return DevAppUsers(
      admin: adminAppUser,
      manager: managerAppUser,
      salesReps: salesRepAppUsers,
    );
  }

  /// –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π
  Future<void> _createRoutesForSalesReps(DevAppUsers appUsers) async {
    for (final salesRepAppUser in appUsers.salesReps) {
      await _routeFixtureService.createDevFixtures(salesRepAppUser.employee);
      
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –∫ —ç—Ç–æ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
      await _assignTradingPointsToEmployee(salesRepAppUser.employee);
    }
  }
  
  /// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
  Future<void> _assignTradingPointsToEmployee(employee) async {
    try {
      final tradingPointsService = TradingPointsFixtureService();
      final tradingPoints = await tradingPointsService.createBaseTradingPoints();
      final tradingPointRepository = GetIt.instance<TradingPointRepository>();
      
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
      int successCount = 0;
      for (final tradingPoint in tradingPoints) {
        final result = await tradingPointRepository.assignToEmployee(tradingPoint, employee);
        result.fold(
          (failure) => print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å ${tradingPoint.name}: ${failure.message}'),
          (_) => successCount++,
        );
      }

    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: $e');
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –º–∞—Ä—à—Ä—É—Ç–∞–º
  /// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ GPS –¥–∞–Ω–Ω—ã–º–∏,
  /// –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É –∏–∑ _createTodayRoute
  /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
  Future<void> _createTestTracks(DevAppUsers appUsers) async {
    // print('ÔøΩÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    final routeRepository = GetIt.instance<RouteRepository>();
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π
    for (final salesRepAppUser in appUsers.salesReps) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Employee (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å)
        final routes = await routeRepository.getEmployeeRoutes(salesRepAppUser.employee);
        
        if (routes.isEmpty) {
          print('‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${salesRepAppUser.fullName} –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤');
          continue;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        final todayRoute = routes.first;
        
        try {
          // print('üó∫Ô∏è –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ "${todayRoute.name}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${salesRepAppUser.fullName}');
          
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ 
          final userTrack = await TrackFixtures.createCurrentDayTrack(
            user: salesRepAppUser.employee, // Employee —Ä–µ–∞–ª–∏–∑—É–µ—Ç NavigationUser
            route: todayRoute,
          );
          
          if (userTrack != null) {
          } else {
            print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${salesRepAppUser.fullName}');
          }
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞ –¥–ª—è ${salesRepAppUser.fullName}: $e');
        }
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è ${salesRepAppUser.fullName}: $e');
      }
    }
  }
}

class DevFixturesResult {
  final DevAppUsers appUsers;
  final bool success;
  final String message;

  DevFixturesResult({
    required this.appUsers,
    required this.success,
    required this.message,
  });
}

/// Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DevFixtureOrchestrator
class DevFixtureOrchestratorFactory {
  static DevFixtureOrchestrator create() {
    final userFixtureService = UserFixtureServiceFactory.create();
    final appUserFixtureService = AppUserFixtureServiceFactory.create();
    final routeFixtureService = RouteFixtureServiceFactory.create();
    final tradingPointsService = TradingPointsFixtureServiceFactory.create();
    
    return DevFixtureOrchestrator(
      userFixtureService,
      appUserFixtureService,
      routeFixtureService,
      tradingPointsService,
    );
  }
}
