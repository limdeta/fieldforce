import 'package:flutter_test/flutter_test.dart';
import 'package:fieldforce/app/domain/work_day.dart';

/// –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –≤ WorkDay
/// 
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏" –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
void main() {
  group('WorkDay Track Display Logic', () {
    test('–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º WorkDay', () {
      print('üß™ === –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ ===');
      
      // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ WorkDay –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π
      final now = DateTime.now();
      final yesterday = DateTime(now.year, now.month, now.day - 1);
      final today = DateTime(now.year, now.month, now.day);
      final tomorrow = DateTime(now.year, now.month, now.day + 1);
      
      // –°–æ–∑–¥–∞–µ–º WorkDay –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
      final yesterdayWorkDay = WorkDay(
        id: 1,
        userId: 123,
        date: yesterday,
        status: WorkDayStatus.completed,
      );
      
      final todayWorkDay = WorkDay(
        id: 2,
        userId: 123,
        date: today,
        status: WorkDayStatus.active,
      );
      
      final tomorrowWorkDay = WorkDay(
        id: 3,
        userId: 123,
        date: tomorrow,
        status: WorkDayStatus.planned,
      );
      
      print('‚úÖ –°–æ–∑–¥–∞–Ω—ã WorkDay –¥–ª—è —Ç—Ä–µ—Ö –¥–Ω–µ–π');
      
      // 2. –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –õ–æ–≥–∏–∫–∞ isToday
      print('üìÖ === –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò isToday ===');
      
      expect(yesterdayWorkDay.isToday, isFalse, 
        reason: '–í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      expect(todayWorkDay.isToday, isTrue, 
        reason: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      expect(tomorrowWorkDay.isToday, isFalse, 
        reason: '–ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      
      print('‚úÖ –í—á–µ—Ä–∞: isToday = ${yesterdayWorkDay.isToday}');
      print('‚úÖ –°–µ–≥–æ–¥–Ω—è: isToday = ${todayWorkDay.isToday}');
      print('‚úÖ –ó–∞–≤—Ç—Ä–∞: isToday = ${tomorrowWorkDay.isToday}');
      
      // 3. –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¢–†–ï–ö–û–í (–∫–∞–∫ –≤ sales_rep_home_page.dart)
      print('üó∫Ô∏è === –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ===');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final hasActiveTrack = true; // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: workDayProvider.activeTrack != null
      
      // –õ–æ–≥–∏–∫–∞ –∏–∑ UI:
      // if (selectedWorkDay.isToday && workDayProvider.activeTrack != null) {
      //   trackToShow = workDayProvider.activeTrack;
      // } else {
      //   trackToShow = selectedWorkDay.actualTrack;
      // }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
      final workDays = [yesterdayWorkDay, todayWorkDay, tomorrowWorkDay];
      int daysShowingActiveTrack = 0;
      
      for (final workDay in workDays) {
        final shouldShowActiveTrack = workDay.isToday && hasActiveTrack;
        
        if (shouldShowActiveTrack) {
          daysShowingActiveTrack++;
          print('‚úÖ ${_getDayName(workDay)}: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ê–ö–¢–ò–í–ù–´–ô —Ç—Ä–µ–∫');
        } else {
          print('‚úÖ ${_getDayName(workDay)}: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º actualTrack –∏–ª–∏ null');
        }
      }
      
      // –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º –¥–Ω–µ (—Å–µ–≥–æ–¥–Ω—è)
      expect(daysShowingActiveTrack, equals(1), 
        reason: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ');
      
      // 4. –ü–†–û–í–ï–†–ö–ê: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏"
      print('üïí === –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï "–ü–£–¢–ï–®–ï–°–¢–í–ò–ô –í–û –í–†–ï–ú–ï–ù–ò" ===');
      
      // –í—á–µ—Ä–∞: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final yesterdayShowsActive = yesterdayWorkDay.isToday && hasActiveTrack;
      expect(yesterdayShowsActive, isFalse, 
        reason: '–ù–∞ –≤—á–µ—Ä–∞—à–Ω–µ–º –¥–Ω–µ –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      // –°–µ–≥–æ–¥–Ω—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final todayShowsActive = todayWorkDay.isToday && hasActiveTrack;
      expect(todayShowsActive, isTrue, 
        reason: '–ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      // –ó–∞–≤—Ç—Ä–∞: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final tomorrowShowsActive = tomorrowWorkDay.isToday && hasActiveTrack;
      expect(tomorrowShowsActive, isFalse, 
        reason: '–ù–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      print('‚úÖ "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏" –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã');
      
      print('üéâ === –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ===');
    });

    test('–ø—Ä–æ–≤–µ—Ä–∫–∞ isToday –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–Ω—è', () {
      print('üß™ === –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ isToday –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è ===');
      
      final now = DateTime.now();
      
      // –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
      final morningToday = DateTime(now.year, now.month, now.day, 6, 0);
      final eveningToday = DateTime(now.year, now.month, now.day, 23, 59);
      
      // –î—Ä—É–≥–∏–µ –¥–Ω–∏
      final yesterday = DateTime(now.year, now.month, now.day - 1, 12, 0);
      final tomorrow = DateTime(now.year, now.month, now.day + 1, 12, 0);
      
      final workDays = [
        WorkDay(id: 1, userId: 1, date: morningToday, status: WorkDayStatus.active),
        WorkDay(id: 2, userId: 1, date: eveningToday, status: WorkDayStatus.active),
        WorkDay(id: 3, userId: 1, date: yesterday, status: WorkDayStatus.completed),
        WorkDay(id: 4, userId: 1, date: tomorrow, status: WorkDayStatus.planned),
      ];
      
      final results = [
        workDays[0].isToday, // —É—Ç—Ä–æ —Å–µ–≥–æ–¥–Ω—è
        workDays[1].isToday, // –≤–µ—á–µ—Ä —Å–µ–≥–æ–¥–Ω—è
        workDays[2].isToday, // –≤—á–µ—Ä–∞
        workDays[3].isToday, // –∑–∞–≤—Ç—Ä–∞
      ];
      
      expect(results, equals([true, true, false, false]), 
        reason: '–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ WorkDay –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å isToday = true');
      
      print('‚úÖ –£—Ç—Ä–æ —Å–µ–≥–æ–¥–Ω—è: isToday = ${results[0]}');
      print('‚úÖ –í–µ—á–µ—Ä —Å–µ–≥–æ–¥–Ω—è: isToday = ${results[1]}');
      print('‚úÖ –í—á–µ—Ä–∞: isToday = ${results[2]}');
      print('‚úÖ –ó–∞–≤—Ç—Ä–∞: isToday = ${results[3]}');
      
      print('‚úÖ isToday –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    });

    test('—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TDD –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è —Ñ–∏–∫—Å—Ç—É—Ä', () {
      print('üß™ === –¢–ï–°–¢: TDD –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä ===');
      
      // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤ dev –∏ –≤ test
      
      // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      final salesRepId = 123;
      final now = DateTime.now();
      
      // WorkDay —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ dev –∏ test
      final workDays = _createWorkDaysForUser(salesRepId, now);
      
      expect(workDays.length, equals(3), 
        reason: '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 WorkDay: –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
      final yesterdayWD = workDays.firstWhere((wd) => !wd.isToday && wd.date.isBefore(now));
      final todayWD = workDays.firstWhere((wd) => wd.isToday);
      final tomorrowWD = workDays.firstWhere((wd) => !wd.isToday && wd.date.isAfter(now));
      
      expect(yesterdayWD.status, equals(WorkDayStatus.completed));
      expect(todayWD.status, equals(WorkDayStatus.active));
      expect(tomorrowWD.status, equals(WorkDayStatus.planned));
      
      print('‚úÖ WorkDay —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      print('‚úÖ –í—á–µ—Ä–∞: ${yesterdayWD.status}');
      print('‚úÖ –°–µ–≥–æ–¥–Ω—è: ${todayWD.status}');
      print('‚úÖ –ó–∞–≤—Ç—Ä–∞: ${tomorrowWD.status}');
      
      // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ dev –∏ prod
      final trackDisplayLogic = _testTrackDisplayLogic(workDays);
      expect(trackDisplayLogic['activeTrackDays'], equals(1), 
        reason: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –¥–Ω–µ');
      expect(trackDisplayLogic['todayShowsActive'], isTrue, 
        reason: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      print('‚úÖ –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞');
      
      print('üéâ === –ö–û–ù–¶–ï–ü–¶–ò–Ø TDD –†–ê–ë–û–¢–ê–ï–¢: –§–∏–∫—Å—Ç—É—Ä—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã ===');
    });
  });
}

/// –°–æ–∑–¥–∞–µ—Ç WorkDay –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤ dev –∏ –≤ test
List<WorkDay> _createWorkDaysForUser(int userId, DateTime baseDate) {
  final yesterday = DateTime(baseDate.year, baseDate.month, baseDate.day - 1);
  final today = DateTime(baseDate.year, baseDate.month, baseDate.day);
  final tomorrow = DateTime(baseDate.year, baseDate.month, baseDate.day + 1);
  
  return [
    WorkDay(
      id: yesterday.millisecondsSinceEpoch,
      userId: userId,
      date: yesterday,
      status: WorkDayStatus.completed,
    ),
    WorkDay(
      id: today.millisecondsSinceEpoch,
      userId: userId,
      date: today,
      status: WorkDayStatus.active,
    ),
    WorkDay(
      id: tomorrow.millisecondsSinceEpoch,
      userId: userId,
      date: tomorrow,
      status: WorkDayStatus.planned,
    ),
  ];
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ - –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤–µ–∑–¥–µ
Map<String, dynamic> _testTrackDisplayLogic(List<WorkDay> workDays) {
  final hasActiveTrack = true;
  int activeTrackDays = 0;
  bool todayShowsActive = false;
  
  for (final workDay in workDays) {
    final showsActive = workDay.isToday && hasActiveTrack;
    if (showsActive) {
      activeTrackDays++;
      if (workDay.isToday) todayShowsActive = true;
    }
  }
  
  return {
    'activeTrackDays': activeTrackDays,
    'todayShowsActive': todayShowsActive,
  };
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º—ã—Ö –ª–æ–≥–æ–≤
String _getDayName(WorkDay workDay) {
  if (workDay.isToday) return '–°–µ–≥–æ–¥–Ω—è';
  
  final now = DateTime.now();
  if (workDay.date.isBefore(now)) return '–í—á–µ—Ä–∞';
  if (workDay.date.isAfter(now)) return '–ó–∞–≤—Ç—Ä–∞';
  
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}
  group('WorkDay Track Display Logic', () {
    test('–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º WorkDay', () {
      print('üß™ === –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ ===');
      
      // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ WorkDay –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π
      final now = DateTime.now();
      final yesterday = DateTime(now.year, now.month, now.day - 1);
      final today = DateTime(now.year, now.month, now.day);
      final tomorrow = DateTime(now.year, now.month, now.day + 1);
      
      // –°–æ–∑–¥–∞–µ–º WorkDay –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
      final yesterdayWorkDay = WorkDay(
        id: 1,
        userId: 123,
        date: yesterday,
        status: WorkDayStatus.completed,
      );
      
      final todayWorkDay = WorkDay(
        id: 2,
        userId: 123,
        date: today,
        status: WorkDayStatus.active,
      );
      
      final tomorrowWorkDay = WorkDay(
        id: 3,
        userId: 123,
        date: tomorrow,
        status: WorkDayStatus.planned,
      );
      
      print('‚úÖ –°–æ–∑–¥–∞–Ω—ã WorkDay –¥–ª—è —Ç—Ä–µ—Ö –¥–Ω–µ–π');
      
      // 2. –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –õ–æ–≥–∏–∫–∞ isToday
      print('üìÖ === –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò isToday ===');
      
      expect(yesterdayWorkDay.isToday, isFalse, 
        reason: '–í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      expect(todayWorkDay.isToday, isTrue, 
        reason: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      expect(tomorrowWorkDay.isToday, isFalse, 
        reason: '–ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      
      print('‚úÖ –í—á–µ—Ä–∞: isToday = ${yesterdayWorkDay.isToday}');
      print('‚úÖ –°–µ–≥–æ–¥–Ω—è: isToday = ${todayWorkDay.isToday}');
      print('‚úÖ –ó–∞–≤—Ç—Ä–∞: isToday = ${tomorrowWorkDay.isToday}');
      
      // 3. –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¢–†–ï–ö–û–í (–∫–∞–∫ –≤ sales_rep_home_page.dart)
      print('üó∫Ô∏è === –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ===');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final hasActiveTrack = true; // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: workDayProvider.activeTrack != null
      
      // –õ–æ–≥–∏–∫–∞ –∏–∑ UI:
      // if (selectedWorkDay.isToday && workDayProvider.activeTrack != null) {
      //   trackToShow = workDayProvider.activeTrack;
      // } else {
      //   trackToShow = selectedWorkDay.actualTrack;
      // }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
      final workDays = [yesterdayWorkDay, todayWorkDay, tomorrowWorkDay];
      int daysShowingActiveTrack = 0;
      
      for (final workDay in workDays) {
        final shouldShowActiveTrack = workDay.isToday && hasActiveTrack;
        
        if (shouldShowActiveTrack) {
          daysShowingActiveTrack++;
          print('‚úÖ ${_getDayName(workDay)}: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ê–ö–¢–ò–í–ù–´–ô —Ç—Ä–µ–∫');
        } else {
          print('‚úÖ ${_getDayName(workDay)}: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º actualTrack –∏–ª–∏ null');
        }
      }
      
      // –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º –¥–Ω–µ (—Å–µ–≥–æ–¥–Ω—è)
      expect(daysShowingActiveTrack, equals(1), 
        reason: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ');
      
      // 4. –ü–†–û–í–ï–†–ö–ê: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏"
      print('üïí === –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï "–ü–£–¢–ï–®–ï–°–¢–í–ò–ô –í–û –í–†–ï–ú–ï–ù–ò" ===');
      
      // –í—á–µ—Ä–∞: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final yesterdayShowsActive = yesterdayWorkDay.isToday && hasActiveTrack;
      expect(yesterdayShowsActive, isFalse, 
        reason: '–ù–∞ –≤—á–µ—Ä–∞—à–Ω–µ–º –¥–Ω–µ –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      // –°–µ–≥–æ–¥–Ω—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final todayShowsActive = todayWorkDay.isToday && hasActiveTrack;
      expect(todayShowsActive, isTrue, 
        reason: '–ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      // –ó–∞–≤—Ç—Ä–∞: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final tomorrowShowsActive = tomorrowWorkDay.isToday && hasActiveTrack;
      expect(tomorrowShowsActive, isFalse, 
        reason: '–ù–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      print('‚úÖ "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏" –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã');
      
      print('üéâ === –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ===');
    });

    test('–ø—Ä–æ–≤–µ—Ä–∫–∞ isToday –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–Ω—è', () {
      print('üß™ === –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ isToday –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è ===');
      
      final now = DateTime.now();
      
      // –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
      final morningToday = DateTime(now.year, now.month, now.day, 6, 0);
      final eveningToday = DateTime(now.year, now.month, now.day, 23, 59);
      
      // –î—Ä—É–≥–∏–µ –¥–Ω–∏
      final yesterday = DateTime(now.year, now.month, now.day - 1, 12, 0);
      final tomorrow = DateTime(now.year, now.month, now.day + 1, 12, 0);
      
      final workDays = [
        WorkDay(id: 1, userId: 1, date: morningToday, status: WorkDayStatus.active),
        WorkDay(id: 2, userId: 1, date: eveningToday, status: WorkDayStatus.active),
        WorkDay(id: 3, userId: 1, date: yesterday, status: WorkDayStatus.completed),
        WorkDay(id: 4, userId: 1, date: tomorrow, status: WorkDayStatus.planned),
      ];
      
      final results = [
        workDays[0].isToday, // —É—Ç—Ä–æ —Å–µ–≥–æ–¥–Ω—è
        workDays[1].isToday, // –≤–µ—á–µ—Ä —Å–µ–≥–æ–¥–Ω—è
        workDays[2].isToday, // –≤—á–µ—Ä–∞
        workDays[3].isToday, // –∑–∞–≤—Ç—Ä–∞
      ];
      
      expect(results, equals([true, true, false, false]), 
        reason: '–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ WorkDay –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å isToday = true');
      
      print('‚úÖ –£—Ç—Ä–æ —Å–µ–≥–æ–¥–Ω—è: isToday = ${results[0]}');
      print('‚úÖ –í–µ—á–µ—Ä —Å–µ–≥–æ–¥–Ω—è: isToday = ${results[1]}');
      print('‚úÖ –í—á–µ—Ä–∞: isToday = ${results[2]}');
      print('‚úÖ –ó–∞–≤—Ç—Ä–∞: isToday = ${results[3]}');
      
      print('‚úÖ isToday –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    });

    test('—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TDD –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è —Ñ–∏–∫—Å—Ç—É—Ä', () {
      print('üß™ === –¢–ï–°–¢: TDD –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä ===');
      
      // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤ dev –∏ –≤ test
      
      // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      final salesRepId = 123;
      final now = DateTime.now();
      
      // WorkDay —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ dev –∏ test
      final workDays = _createWorkDaysForUser(salesRepId, now);
      
      expect(workDays.length, equals(3), 
        reason: '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 WorkDay: –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
      final yesterdayWD = workDays.firstWhere((wd) => !wd.isToday && wd.date.isBefore(now));
      final todayWD = workDays.firstWhere((wd) => wd.isToday);
      final tomorrowWD = workDays.firstWhere((wd) => !wd.isToday && wd.date.isAfter(now));
      
      expect(yesterdayWD.status, equals(WorkDayStatus.completed));
      expect(todayWD.status, equals(WorkDayStatus.active));
      expect(tomorrowWD.status, equals(WorkDayStatus.planned));
      
      print('‚úÖ WorkDay —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      print('‚úÖ –í—á–µ—Ä–∞: ${yesterdayWD.status}');
      print('‚úÖ –°–µ–≥–æ–¥–Ω—è: ${todayWD.status}');
      print('‚úÖ –ó–∞–≤—Ç—Ä–∞: ${tomorrowWD.status}');
      
      // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ dev –∏ prod
      final trackDisplayLogic = _testTrackDisplayLogic(workDays);
      expect(trackDisplayLogic['activeTrackDays'], equals(1), 
        reason: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –¥–Ω–µ');
      expect(trackDisplayLogic['todayShowsActive'], isTrue, 
        reason: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      print('‚úÖ –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞');
      
      print('üéâ === –ö–û–ù–¶–ï–ü–¶–ò–Ø TDD –†–ê–ë–û–¢–ê–ï–¢: –§–∏–∫—Å—Ç—É—Ä—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã ===');
    });
  });
}

/// –°–æ–∑–¥–∞–µ—Ç WorkDay –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤ dev –∏ –≤ test
List<WorkDay> _createWorkDaysForUser(int userId, DateTime baseDate) {
  final yesterday = DateTime(baseDate.year, baseDate.month, baseDate.day - 1);
  final today = DateTime(baseDate.year, baseDate.month, baseDate.day);
  final tomorrow = DateTime(baseDate.year, baseDate.month, baseDate.day + 1);
  
  return [
    WorkDay(
      id: yesterday.millisecondsSinceEpoch,
      userId: userId,
      date: yesterday,
      status: WorkDayStatus.completed,
    ),
    WorkDay(
      id: today.millisecondsSinceEpoch,
      userId: userId,
      date: today,
      status: WorkDayStatus.active,
    ),
    WorkDay(
      id: tomorrow.millisecondsSinceEpoch,
      userId: userId,
      date: tomorrow,
      status: WorkDayStatus.planned,
    ),
  ];
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ - –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤–µ–∑–¥–µ
Map<String, dynamic> _testTrackDisplayLogic(List<WorkDay> workDays) {
  final hasActiveTrack = true;
  int activeTrackDays = 0;
  bool todayShowsActive = false;
  
  for (final workDay in workDays) {
    final showsActive = workDay.isToday && hasActiveTrack;
    if (showsActive) {
      activeTrackDays++;
      if (workDay.isToday) todayShowsActive = true;
    }
  }
  
  return {
    'activeTrackDays': activeTrackDays,
    'todayShowsActive': todayShowsActive,
  };
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º—ã—Ö –ª–æ–≥–æ–≤
String _getDayName(WorkDay workDay) {
  if (workDay.isToday) return '–°–µ–≥–æ–¥–Ω—è';
  
  final now = DateTime.now();
  if (workDay.date.isBefore(now)) return '–í—á–µ—Ä–∞';
  if (workDay.date.isAfter(now)) return '–ó–∞–≤—Ç—Ä–∞';
  
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

/// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –≤ WorkDay
/// 
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É: –∫–æ–≥–¥–∞ –∏ –∫–∞–∫–æ–π —Ç—Ä–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
/// —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏" –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.
void main() {
  group('WorkDay Track Display Logic', () {
    test('–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º WorkDay', () async {
      print('üß™ === –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ ===');
      
      // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ WorkDay –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π
      final now = DateTime.now();
      final yesterday = DateTime(now.year, now.month, now.day - 1);
      final today = DateTime(now.year, now.month, now.day);
      final tomorrow = DateTime(now.year, now.month, now.day + 1);
      
      // –í—á–µ—Ä–∞—à–Ω–∏–π WorkDay —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º —Ç—Ä–µ–∫–æ–º
      final yesterdayWorkDay = WorkDay(
        id: 1,
        userId: 123,
        date: yesterday,
        plannedRoute: null,
        actualTrack: _createCompletedTrack(50), // 50 —Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
        status: WorkDayStatus.completed,
      );
      
      // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay —Å —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —Ç—Ä–µ–∫–æ–º
      final todayWorkDay = WorkDay(
        id: 2,
        userId: 123,
        date: today,
        plannedRoute: null,
        actualTrack: _createCompletedTrack(25), // 25 —Ç–æ—á–µ–∫ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
        status: WorkDayStatus.active,
      );
      
      // –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π WorkDay –±–µ–∑ —Ç—Ä–µ–∫–∞
      final tomorrowWorkDay = WorkDay(
        id: 3,
        userId: 123,
        date: tomorrow,
        plannedRoute: null,
        actualTrack: null,
        status: WorkDayStatus.planned,
      );
      
      // 2. –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ (—Ç–µ–∫—É—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
      final activeTrack = _createActiveTrack(35); // 35 —Ç–æ—á–µ–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
      
      print('‚úÖ –°–æ–∑–¥–∞–Ω—ã WorkDay –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      // 3. –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
      print('üó∫Ô∏è === –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ===');
      
      // –õ–æ–≥–∏–∫–∞ –∏–∑ sales_rep_home_page.dart:
      // if (selectedWorkDay.isToday && workDayProvider.activeTrack != null) {
      //   trackToShow = workDayProvider.activeTrack;
      // } else {
      //   trackToShow = selectedWorkDay.actualTrack;
      // }
      
      // –í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final yesterdayTrackToShow = _getTrackToShow(yesterdayWorkDay, activeTrack);
      expect(yesterdayTrackToShow, equals(yesterdayWorkDay.actualTrack), 
        reason: '–ù–∞ –≤—á–µ—Ä–∞—à–Ω–µ–º –¥–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ actualTrack');
      expect(yesterdayTrackToShow, isNot(equals(activeTrack)), 
        reason: '–ù–∞ –≤—á–µ—Ä–∞—à–Ω–µ–º –¥–Ω–µ –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      expect(yesterdayTrackToShow?.totalPoints, equals(50), 
        reason: '–í—á–µ—Ä–∞—à–Ω–∏–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 50 —Ç–æ—á–µ–∫');
      print('‚úÖ –í—á–µ—Ä–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ (${yesterdayTrackToShow?.totalPoints} —Ç–æ—á–µ–∫)');
      
      // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final todayTrackToShow = _getTrackToShow(todayWorkDay, activeTrack);
      expect(todayTrackToShow, equals(activeTrack), 
        reason: '–ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      expect(todayTrackToShow.totalPoints, equals(35), 
        reason: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 35 —Ç–æ—á–µ–∫');
      print('‚úÖ –°–µ–≥–æ–¥–Ω—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ (${todayTrackToShow.totalPoints} —Ç–æ—á–µ–∫)');
      
      // –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
      final tomorrowTrackToShow = _getTrackToShow(tomorrowWorkDay, activeTrack);
      expect(tomorrowTrackToShow, isNull, 
        reason: '–ù–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—Ä–µ–∫–∞');
      print('‚úÖ –ó–∞–≤—Ç—Ä–∞: –Ω–∏–∫–∞–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤ (${tomorrowTrackToShow?.totalPoints ?? 0} —Ç–æ—á–µ–∫)');
      
      // 4. –ü–†–û–í–ï–†–ö–ê: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏"
      print('üïí === –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï "–ü–£–¢–ï–®–ï–°–¢–í–ò–ô –í–û –í–†–ï–ú–ï–ù–ò" ===');
      
      expect(yesterdayWorkDay.isToday, isFalse, 
        reason: '–í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      expect(todayWorkDay.isToday, isTrue, 
        reason: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      expect(tomorrowWorkDay.isToday, isFalse, 
        reason: '–ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      
      // –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ
      final daysShowingActiveTrack = [yesterdayWorkDay, todayWorkDay, tomorrowWorkDay]
          .where((workDay) => _getTrackToShow(workDay, activeTrack) == activeTrack)
          .length;
      
      expect(daysShowingActiveTrack, equals(1), 
        reason: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –¥–Ω–µ (—Å–µ–≥–æ–¥–Ω—è)');
      
      print('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ');
      
      // 5. –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
      print('üìç === –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ù–û–ô –ß–ê–°–¢–ò ===');
      
      expect(todayWorkDay.actualTrack, isNotNull, 
        reason: '–£ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å');
      expect(todayWorkDay.actualTrack!.totalPoints, equals(25), 
        reason: '–ü—Ä–æ–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 25 —Ç–æ—á–µ–∫');
      
      // –ù–∞ –∫–∞—Ä—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ (35 —Ç–æ—á–µ–∫), –Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å (25 —Ç–æ—á–µ–∫) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
      expect(todayTrackToShow.totalPoints, greaterThan(todayWorkDay.actualTrack!.totalPoints), 
        reason: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ —á–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å');
      
      print('‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å (25 —Ç–æ—á–µ–∫) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ actualTrack');
      print('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ (35 —Ç–æ—á–µ–∫) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ');
      
      print('üéâ === –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ===');
    });

    test('–ø—Ä–æ–≤–µ—Ä–∫–∞ isToday –ª–æ–≥–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç', () {
      print('üß™ === –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ isToday ===');
      
      final now = DateTime.now();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è
      final morningToday = DateTime(now.year, now.month, now.day, 6, 0); // 6:00
      final eveningToday = DateTime(now.year, now.month, now.day, 23, 59); // 23:59
      final yesterday = DateTime(now.year, now.month, now.day - 1, 12, 0); // –í—á–µ—Ä–∞ –≤ –ø–æ–ª–¥–µ–Ω—å
      final tomorrow = DateTime(now.year, now.month, now.day + 1, 12, 0); // –ó–∞–≤—Ç—Ä–∞ –≤ –ø–æ–ª–¥–µ–Ω—å
      
      final morningWorkDay = WorkDay(id: 1, userId: 1, date: morningToday, status: WorkDayStatus.active);
      final eveningWorkDay = WorkDay(id: 2, userId: 1, date: eveningToday, status: WorkDayStatus.active);
      final yesterdayWorkDay = WorkDay(id: 3, userId: 1, date: yesterday, status: WorkDayStatus.completed);
      final tomorrowWorkDay = WorkDay(id: 4, userId: 1, date: tomorrow, status: WorkDayStatus.planned);
      
      expect(morningWorkDay.isToday, isTrue, reason: '–£—Ç—Ä–æ —Å–µ–≥–æ–¥–Ω—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      expect(eveningWorkDay.isToday, isTrue, reason: '–í–µ—á–µ—Ä —Å–µ–≥–æ–¥–Ω—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      expect(yesterdayWorkDay.isToday, isFalse, reason: '–í—á–µ—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      expect(tomorrowWorkDay.isToday, isFalse, reason: '–ó–∞–≤—Ç—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "—Å–µ–≥–æ–¥–Ω—è"');
      
      print('‚úÖ isToday –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω –¥–Ω—è');
    });
  });
}

/// –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫–æ–π —Ç—Ä–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å - –¢–û–ß–ù–û –∫–∞–∫ –≤ sales_rep_home_page.dart
UserTrack? _getTrackToShow(WorkDay selectedWorkDay, UserTrack? activeTrack) {
  if (selectedWorkDay.isToday && activeTrack != null) {
    return activeTrack; // –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ
  } else {
    return selectedWorkDay.actualTrack; // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫ –∏–ª–∏ null
  }
}

/// –°–æ–∑–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
UserTrack _createCompletedTrack(int pointsCount) {
  return UserTrack(
    id: DateTime.now().millisecondsSinceEpoch,
    user: null,
    routeId: 'test_route',
    status: UserTrackStatus.completed,
    trackPoints: _createTestPoints(pointsCount),
    createdAt: DateTime.now().subtract(const Duration(hours: 8)),
    updatedAt: DateTime.now().subtract(const Duration(hours: 1)),
  );
}

/// –°–æ–∑–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
UserTrack _createActiveTrack(int pointsCount) {
  return UserTrack(
    id: DateTime.now().millisecondsSinceEpoch + 1000,
    user: null,
    routeId: 'test_route',
    status: UserTrackStatus.active,
    trackPoints: _createTestPoints(pointsCount),
    createdAt: DateTime.now().subtract(const Duration(hours: 2)),
    updatedAt: DateTime.now(),
  );
}

/// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Ç—Ä–µ–∫–∞
List<UserTrackPoint> _createTestPoints(int count) {
  final points = <UserTrackPoint>[];
  final baseTime = DateTime.now().subtract(Duration(minutes: count));
  
  for (int i = 0; i < count; i++) {
    points.add(UserTrackPoint(
      id: '$i',
      userTrackId: 'test_track',
      latitude: 43.1158 + (i * 0.001), // –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ + –¥–≤–∏–∂–µ–Ω–∏–µ
      longitude: 131.8858 + (i * 0.001),
      timestamp: baseTime.add(Duration(minutes: i)),
      accuracy: 5.0,
      altitude: 0,
      heading: 0,
      speed: 1.0,
    ));
  }
  
  return points;
}

/// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è WorkDay –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
/// 
/// –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É: –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–æ –¥–∞—Ç–∞–º.
/// –¶–µ–ª—å: —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ,
/// –∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–∫–∏ - —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞—Ç–∞—Ö.
void main() {
  group('WorkDay Integration - Track Display Logic', () {
    setUpAll(() async {
      await setupTestServiceLocator();
    });

    tearDownAll(() async {
      await GetIt.instance.reset();
    });

    test('—Ç—Ä–µ–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ –¥–∞—Ç–∞–º - –Ω–µ—Ç "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏"', () async {
      print('üß™ === –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–æ –¥–∞—Ç–∞–º ===');
      
      // 1. SETUP: –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä dev –¥–∞–Ω–Ω—ã—Ö
      final orchestrator = DevFixtureOrchestratorFactory.create();
      final result = await orchestrator.createFullDevDataset();
      
      expect(result.success, isTrue, reason: 'Dev –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è');
      expect(result.appUsers.salesReps.isNotEmpty, isTrue, reason: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å');
      
      final salesRep = result.appUsers.salesReps.first;
      print('‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${salesRep.fullName}');
      
      // 2. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final session = AppSession(appUser: salesRep);
      AppSessionService.setCurrentSession(session);
      
      // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WorkDayProvider
      final workDayProvider = WorkDayProvider();
      await workDayProvider.loadWorkDays();
      
      expect(workDayProvider.workDays.length, equals(3), 
        reason: '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 WorkDay: –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞');
      
      final yesterdayWorkDay = workDayProvider.workDays
          .where((wd) => !wd.isToday && wd.date.isBefore(DateTime.now()))
          .first;
      final todayWorkDay = workDayProvider.workDays
          .where((wd) => wd.isToday)
          .first;
      final tomorrowWorkDay = workDayProvider.workDays
          .where((wd) => !wd.isToday && wd.date.isAfter(DateTime.now()))
          .first;
      
      print('üìÖ –í—á–µ—Ä–∞: ${yesterdayWorkDay.date} (${yesterdayWorkDay.status})');
      print('üìÖ –°–µ–≥–æ–¥–Ω—è: ${todayWorkDay.date} (${todayWorkDay.status})');
      print('üìÖ –ó–∞–≤—Ç—Ä–∞: ${tomorrowWorkDay.date} (${tomorrowWorkDay.status})');
      
      // 4. –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
      print('üó∫Ô∏è === –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ===');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
      final mockActiveTrack = _createMockActiveTrack(salesRep.employee.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
      for (final workDay in [yesterdayWorkDay, todayWorkDay, tomorrowWorkDay]) {
        workDayProvider.selectWorkDay(workDay);
        
        // –≠—Ç–æ –ª–æ–≥–∏–∫–∞ –∏–∑ sales_rep_home_page.dart
        UserTrack? trackToShow;
        if (workDay.isToday && mockActiveTrack != null) {
          trackToShow = mockActiveTrack; // –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ
        } else {
          trackToShow = workDay.actualTrack; // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫ –∏–ª–∏ null
        }
        
        if (workDay.isToday) {
          expect(trackToShow, equals(mockActiveTrack), 
            reason: '–ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
          print('‚úÖ –°–µ–≥–æ–¥–Ω—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ (${trackToShow?.totalPoints ?? 0} —Ç–æ—á–µ–∫)');
        } else if (workDay == yesterdayWorkDay) {
          expect(trackToShow, equals(workDay.actualTrack), 
            reason: '–ù–∞ –≤—á–µ—Ä–∞—à–Ω–µ–º –¥–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫');
          expect(trackToShow, isNot(equals(mockActiveTrack)), 
            reason: '–ù–∞ –≤—á–µ—Ä–∞—à–Ω–µ–º –¥–Ω–µ –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
          print('‚úÖ –í—á–µ—Ä–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫ (${trackToShow?.totalPoints ?? 0} —Ç–æ—á–µ–∫)');
        } else {
          expect(trackToShow, isNull, 
            reason: '–ù–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—Ä–µ–∫–∞');
          print('‚úÖ –ó–∞–≤—Ç—Ä–∞: –Ω–∏–∫–∞–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤');
        }
      }
      
      print('üéâ === –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏" –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã ===');
    });

    test('WorkDayProvider –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç—Ä–µ–∫–æ–º', () async {
      print('üß™ === –¢–ï–°–¢: –°–≤—è–∑—å WorkDayProvider —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç—Ä–µ–∫–æ–º ===');
      
      // –°–æ–∑–¥–∞–µ–º dev –¥–∞–Ω–Ω—ã–µ
      final orchestrator = DevFixtureOrchestratorFactory.create();
      final result = await orchestrator.createFullDevDataset();
      final salesRep = result.appUsers.salesReps.first;
      
      final session = AppSession(appUser: salesRep);
      AppSessionService.setCurrentSession(session);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      final workDayProvider = WorkDayProvider();
      await workDayProvider.loadWorkDays();
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
      final todayWorkDay = workDayProvider.todayWorkDay!;
      workDayProvider.selectWorkDay(todayWorkDay);
      
      expect(workDayProvider.selectedWorkDay, equals(todayWorkDay), 
        reason: '–í—ã–±—Ä–∞–Ω–Ω—ã–π WorkDay –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º');
      expect(todayWorkDay.isToday, isTrue, 
        reason: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ "—Å–µ–≥–æ–¥–Ω—è"');
      
      print('‚úÖ WorkDayProvider –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä–æ–º –¥–Ω–µ–π');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ activeTrack –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ trackUpdateStream
      // (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ LocationTrackingService)
      print('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, activeTrack –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ stream');
      
      print('üéâ === –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: WorkDayProvider –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ===');
    });
  });
}

/// –°–æ–∑–¥–∞–µ—Ç mock –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
UserTrack _createMockActiveTrack(int userId) {
  return UserTrack(
    id: DateTime.now().millisecondsSinceEpoch,
    userId: userId,
    routeId: 'current_route',
    status: TrackStatus.active,
    trackPoints: _createMockTrackPoints(30), // 30 —Ç–æ—á–µ–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    createdAt: DateTime.now().subtract(const Duration(hours: 2)),
    updatedAt: DateTime.now(),
  );
}

/// –°–æ–∑–¥–∞–µ—Ç mock —Ç–æ—á–∫–∏ —Ç—Ä–µ–∫–∞
List<TrackPoint> _createMockTrackPoints(int count) {
  final points = <TrackPoint>[];
  final baseTime = DateTime.now().subtract(Duration(minutes: count));
  
  for (int i = 0; i < count; i++) {
    points.add(TrackPoint(
      id: '$i',
      latitude: 43.1158 + (i * 0.001), // –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ + –Ω–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
      longitude: 131.8858 + (i * 0.001),
      timestamp: baseTime.add(Duration(minutes: i)),
      accuracy: 5.0,
    ));
  }
  
  return points;
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å –ª–æ–∫–∞—Ç–æ—Ä–∞
Future<void> setupTestServiceLocator() async {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ª–æ–∫–∞—Ç–æ—Ä –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  await setupServiceLocator();
}

/// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã WorkDay
/// 
/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π:
/// 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–≤—É–º—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ (–≤—á–µ—Ä–∞—à–Ω–∏–π + —Ç–µ–∫—É—â–∏–π)
/// 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
/// 3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ WorkDay -> Route -> Track
/// 4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω—É–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö
void main() {
  group('WorkDay Integration Tests', () {
    late DevFixtureOrchestrator orchestrator;
    late WorkDayProvider workDayProvider;

    setUpAll(() async {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º service locator
      await setupServiceLocator();
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è dev –¥–∞–Ω–Ω—ã—Ö
      orchestrator = DevFixtureOrchestratorFactory.create();
      
      // –°–æ–∑–¥–∞–µ–º WorkDayProvider
      workDayProvider = WorkDayProvider();
    });

    tearDownAll(() async {
      // –û—á–∏—â–∞–µ–º GetIt
      await GetIt.instance.reset();
    });

    test('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ dev –¥–∞–Ω–Ω—ã—Ö —Å WorkDay', () async {
      // Arrange: –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä dev –¥–∞–Ω–Ω—ã—Ö
      print('üöÄ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ dev –¥–∞–Ω–Ω—ã—Ö...');
      final result = await orchestrator.createFullDevDataset();
      
      // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
      expect(result.success, true, reason: 'Dev –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ');
      expect(result.appUsers.salesReps.isNotEmpty, true, reason: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å');
      
      final salesRep = result.appUsers.salesReps.first;
      print('‚úÖ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å: ${salesRep.fullName}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã
      final routeRepository = GetIt.instance<RouteRepository>();
      final routesStream = routeRepository.watchEmployeeRoutes(salesRep.employee);
      final routes = await routesStream.first;
      
      expect(routes.length, greaterThanOrEqualTo(2), 
        reason: '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –º–∞—Ä—à—Ä—É—Ç–∞ (–≤—á–µ—Ä–∞—à–Ω–∏–π + —Ç–µ–∫—É—â–∏–π)');
      
      print('‚úÖ –¢–µ—Å—Ç: –ù–∞–π–¥–µ–Ω–æ ${routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤');
      for (final route in routes) {
        print('   - ${route.name} (${route.status})');
      }
    });

    test('–ó–∞–≥—Ä—É–∑–∫–∞ WorkDay –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏', () async {
      // Arrange: –°–æ–∑–¥–∞–µ–º dev –¥–∞–Ω–Ω—ã–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final result = await orchestrator.createFullDevDataset();
      final salesRep = result.appUsers.salesReps.first;
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      AppSessionService.setCurrentSession(AppSession(
        appUser: salesRep,
        securitySession: null, // –î–ª—è —Ç–µ—Å—Ç–∞
        createdAt: DateTime.now(),
        appSettings: {},
      ));
      expect(AppSessionService.currentSession, isNotNull, 
        reason: '–°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞');
      
      // Act: –ó–∞–≥—Ä—É–∂–∞–µ–º WorkDay —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      await workDayProvider.loadWorkDays();
      
      // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ WorkDay —Å–æ–∑–¥–∞–Ω—ã
      expect(workDayProvider.workDays.length, equals(3), 
        reason: '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 WorkDay (–≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞)');
      
      final todayWorkDay = workDayProvider.todayWorkDay;
      expect(todayWorkDay, isNotNull, reason: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay');
      expect(todayWorkDay!.isToday, true, reason: 'WorkDay –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π');
      
      final yesterdayDate = DateTime.now().subtract(Duration(days: 1));
      final yesterdayWorkDay = workDayProvider.getWorkDayForDate(yesterdayDate);
      expect(yesterdayWorkDay, isNotNull, reason: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—á–µ—Ä–∞—à–Ω–∏–π WorkDay');
      expect(yesterdayWorkDay!.isToday, false, reason: '–í—á–µ—Ä–∞—à–Ω–∏–π WorkDay –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º');
      
      print('‚úÖ –¢–µ—Å—Ç: WorkDay –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      print('   - –°–µ–≥–æ–¥–Ω—è: ${todayWorkDay.status}');
      print('   - –í—á–µ—Ä–∞: ${yesterdayWorkDay.status}');
    });

    test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤', () async {
      // Arrange: –°–æ–∑–¥–∞–µ–º dev –¥–∞–Ω–Ω—ã–µ
      final result = await orchestrator.createFullDevDataset();
      final salesRep = result.appUsers.salesReps.first;
      
      // Act: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      final trackRepository = GetIt.instance<UserTrackRepository>();
      final today = DateTime.now();
      final todayTracks = await trackRepository.getTracksForDate(
        salesRep.employee, 
        today
      );
      
      final yesterday = today.subtract(Duration(days: 1));
      final yesterdayTracks = await trackRepository.getTracksForDate(
        salesRep.employee, 
        yesterday
      );
      
      // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ç—Ä–µ–∫–æ–≤
      print('‚úÖ –¢–µ—Å—Ç: –¢—Ä–µ–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
      print('   - –°–µ–≥–æ–¥–Ω—è: ${todayTracks.length} —Ç—Ä–µ–∫–æ–≤');
      print('   - –í—á–µ—Ä–∞: ${yesterdayTracks.length} —Ç—Ä–µ–∫–æ–≤');
      
      // –û–∂–∏–¥–∞–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç—Ä–µ–∫ –∑–∞ –≤—á–µ—Ä–∞ (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π)
      expect(yesterdayTracks.isNotEmpty, true, 
        reason: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –∑–∞ –≤—á–µ—Ä–∞');
      
      if (yesterdayTracks.isNotEmpty) {
        final yesterdayTrack = yesterdayTracks.first;
        print('   - –í—á–µ—Ä–∞—à–Ω–∏–π —Ç—Ä–µ–∫: ${yesterdayTrack.totalPoints} —Ç–æ—á–µ–∫, —Å—Ç–∞—Ç—É—Å: ${yesterdayTrack.status}');
        expect(yesterdayTrack.status.isCompleted, true, 
          reason: '–í—á–µ—Ä–∞—à–Ω–∏–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
      
      // –î–ª—è —Å–µ–≥–æ–¥–Ω—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–µ–∫ –∏–ª–∏ –Ω–µ –±—ã—Ç—å (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞)
      if (todayTracks.isNotEmpty) {
        final todayTrack = todayTracks.first;
        print('   - –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç—Ä–µ–∫: ${todayTrack.totalPoints} —Ç–æ—á–µ–∫, —Å—Ç–∞—Ç—É—Å: ${todayTrack.status}');
      }
    });

    test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º WorkDay', () async {
      // Arrange: –°–æ–∑–¥–∞–µ–º dev –¥–∞–Ω–Ω—ã–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final result = await orchestrator.createFullDevDataset();
      final salesRep = result.appUsers.salesReps.first;
      await AppSessionService.createSession(salesRep);
      await workDayProvider.loadWorkDays();
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç LocationTrackingService)
      // workDayProvider._activeTrack = MockUserTrack(); // –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ
      
      // Act & Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
      final todayWorkDay = workDayProvider.todayWorkDay!;
      final yesterdayDate = DateTime.now().subtract(Duration(days: 1));
      final yesterdayWorkDay = workDayProvider.getWorkDayForDate(yesterdayDate)!;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay
      workDayProvider.selectWorkDay(todayWorkDay);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ selectedWorkDay = today
      expect(workDayProvider.selectedWorkDay, equals(todayWorkDay));
      expect(workDayProvider.selectedWorkDay!.isToday, true);
      
      // –í—ã–±–∏—Ä–∞–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π WorkDay  
      workDayProvider.selectWorkDay(yesterdayWorkDay);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ selectedWorkDay = yesterday
      expect(workDayProvider.selectedWorkDay, equals(yesterdayWorkDay));
      expect(workDayProvider.selectedWorkDay!.isToday, false);
      
      print('‚úÖ –¢–µ—Å—Ç: –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ WorkDay —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      print('   - –°–µ–≥–æ–¥–Ω—è.isToday = ${todayWorkDay.isToday}');
      print('   - –í—á–µ—Ä–∞.isToday = ${yesterdayWorkDay.isToday}');
    });

    test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ Route -> WorkDay -> Track', () async {
      // Arrange: –°–æ–∑–¥–∞–µ–º dev –¥–∞–Ω–Ω—ã–µ
      final result = await orchestrator.createFullDevDataset();
      final salesRep = result.appUsers.salesReps.first;
      
      // Act: –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Ç—Ä–µ–∫–∏
      final routeRepository = GetIt.instance<RouteRepository>();
      final trackRepository = GetIt.instance<UserTrackRepository>();
      
      final routes = await routeRepository.watchEmployeeRoutes(salesRep.employee).first;
      final yesterday = DateTime.now().subtract(Duration(days: 1));
      final yesterdayTracks = await trackRepository.getTracksForDate(salesRep.employee, yesterday);
      
      // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
      expect(routes.isNotEmpty, true, reason: '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã');
      
      final yesterdayRoute = routes.where((r) => r.name.contains('2 —Å–µ–Ω—Ç—è–±—Ä—è')).firstOrNull;
      expect(yesterdayRoute, isNotNull, reason: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—á–µ—Ä–∞—à–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç');
      
      if (yesterdayTracks.isNotEmpty && yesterdayRoute != null) {
        final yesterdayTrack = yesterdayTracks.first;
        
        // –í –∏–¥–µ–∞–ª–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç—Ä–µ–∫ —Å–≤—è–∑–∞–Ω —Å –º–∞—Ä—à—Ä—É—Ç–æ–º
        // –ù–æ –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
        expect(yesterdayTrack.userId, equals(salesRep.employee.id));
        expect(yesterdayRoute.pointsOfInterest.isNotEmpty, true);
        
        print('‚úÖ –¢–µ—Å—Ç: –°–≤—è–∑—å Route-Track —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        print('   - –ú–∞—Ä—à—Ä—É—Ç: ${yesterdayRoute.name}');
        print('   - –¢—Ä–µ–∫: ${yesterdayTrack.totalPoints} —Ç–æ—á–µ–∫');
        print('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${salesRep.fullName}');
      }
    });
  });
}

extension on List<dynamic> {
  dynamic get firstOrNull => isEmpty ? null : first;
}
