import 'package:flutter_test/flutter_test.dart';
import 'package:fieldforce/app/domain/work_day.dart';

/// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –≤ WorkDay
/// 
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
/// "–¢—Ä–µ–∫ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç.
/// –Ø –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Ç—Ä–µ–∫–∞ –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–µ–º –º–∞—Ä—à—Ä—É—Ç–µ –Ω–æ –æ–Ω–∞ –∏–¥—ë—Ç."
/// 
/// –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏" –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.
void main() {
  group('WorkDay Track Display Logic Integration Test', () {
    test('–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º WorkDay', () {
      print('üß™ === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ ===');
      print('üéØ –¶–µ–ª—å: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏" –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤');
      
      // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ WorkDay –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π
      final now = DateTime.now();
      final yesterday = DateTime(now.year, now.month, now.day - 1);
      final today = DateTime(now.year, now.month, now.day);
      final tomorrow = DateTime(now.year, now.month, now.day + 1);
      
      final workDays = [
        // –í—á–µ—Ä–∞—à–Ω–∏–π WorkDay - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        WorkDay(
          id: 1,
          userId: 123,
          date: yesterday,
          status: WorkDayStatus.completed,
        ),
        
        // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay - –∞–∫—Ç–∏–≤–Ω—ã–π
        WorkDay(
          id: 2,
          userId: 123,
          date: today,
          status: WorkDayStatus.active,
        ),
        
        // –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π WorkDay - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        WorkDay(
          id: 3,
          userId: 123,
          date: tomorrow,
          status: WorkDayStatus.planned,
        ),
      ];
      
      print('‚úÖ –°–æ–∑–¥–∞–Ω—ã WorkDay: –≤—á–µ—Ä–∞ (–∑–∞–≤–µ—Ä—à–µ–Ω), —Å–µ–≥–æ–¥–Ω—è (–∞–∫—Ç–∏–≤–µ–Ω), –∑–∞–≤—Ç—Ä–∞ (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω)');
      
      // 2. –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –õ–æ–≥–∏–∫–∞ isToday –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      print('üìÖ === –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò isToday ===');
      
      final yesterdayWD = workDays[0];
      final todayWD = workDays[1];
      final tomorrowWD = workDays[2];
      
      expect(yesterdayWD.isToday, isFalse, 
        reason: '–í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –ù–ï –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ "—Å–µ–≥–æ–¥–Ω—è"');
      expect(todayWD.isToday, isTrue, 
        reason: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ "—Å–µ–≥–æ–¥–Ω—è"');
      expect(tomorrowWD.isToday, isFalse, 
        reason: '–ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –ù–ï –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ "—Å–µ–≥–æ–¥–Ω—è"');
      
      print('‚úÖ isToday –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: –≤—á–µ—Ä–∞=${yesterdayWD.isToday}, —Å–µ–≥–æ–¥–Ω—è=${todayWD.isToday}, –∑–∞–≤—Ç—Ä–∞=${tomorrowWD.isToday}');
      
      // 3. –ò–ú–ò–¢–ò–†–£–ï–ú –õ–û–ì–ò–ö–£ –ò–ó sales_rep_home_page.dart
      print('üó∫Ô∏è === –ò–ú–ò–¢–ê–¶–ò–Ø –õ–û–ì–ò–ö–ò UI ===');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ (–∫–∞–∫ workDayProvider.activeTrack != null)
      final hasActiveTrack = true;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ sales_rep_home_page.dart –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è:
      // if (selectedWorkDay.isToday && workDayProvider.activeTrack != null) {
      //   trackToShow = workDayProvider.activeTrack;
      // } else {
      //   trackToShow = selectedWorkDay.actualTrack;
      // }
      
      final trackDisplayResults = <String, bool>{};
      
      for (final workDay in workDays) {
        final shouldShowActiveTrack = workDay.isToday && hasActiveTrack;
        final dayName = _getDayName(workDay);
        
        trackDisplayResults[dayName] = shouldShowActiveTrack;
        
        if (shouldShowActiveTrack) {
          print('‚úÖ $dayName: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ê–ö–¢–ò–í–ù–´–ô —Ç—Ä–µ–∫ ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û');
        } else {
          print('‚úÖ $dayName: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º actualTrack –∏–ª–∏ null ‚Üê –ü–†–ê–í–ò–õ–¨–ù–û');
        }
      }
      
      // 4. –ö–õ–Æ–ß–ï–í–´–ï –ü–†–û–í–ï–†–ö–ò: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏"
      print('üïí === –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø "–ü–£–¢–ï–®–ï–°–¢–í–ò–ô –í–û –í–†–ï–ú–ï–ù–ò" ===');
      
      // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫
      final daysShowingActiveTrack = trackDisplayResults.values.where((shows) => shows).length;
      expect(daysShowingActiveTrack, equals(1), 
        reason: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –û–î–ù–û–ú –¥–Ω–µ');
      
      // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
      expect(trackDisplayResults['–í—á–µ—Ä–∞'], isFalse, 
        reason: '–ù–∞ –í–ß–ï–†–ê–®–ù–ï–ú –¥–Ω–µ –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      expect(trackDisplayResults['–°–µ–≥–æ–¥–Ω—è'], isTrue, 
        reason: '–ù–∞ –°–ï–ì–û–î–ù–Ø–®–ù–ï–ú –¥–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      expect(trackDisplayResults['–ó–∞–≤—Ç—Ä–∞'], isFalse, 
        reason: '–ù–∞ –ó–ê–í–¢–†–ê–®–ù–ï–ú –¥–Ω–µ –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      print('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ');
      print('‚úÖ "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏" —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã');
      
      // 5. –ü–†–û–í–ï–†–ö–ê –°–¶–ï–ù–ê–†–ò–Ø –ò–ó –ü–†–û–ë–õ–ï–ú–´
      print('üêõ === –ü–†–û–í–ï–†–ö–ê –°–¶–ï–ù–ê–†–ò–Ø –ò–ó –ü–†–û–ë–õ–ï–ú–´ ===');
      print('–°—Ü–µ–Ω–∞—Ä–∏–π: "–Ø –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –±—ã–ª–æ —Ç—Ä–µ–∫–∞');
      print('–∏ —è –≤–∏–∂—É —á—Ç–æ —Ç–∞–º —Ä–∏—Å—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Ä–∏—Å–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ"');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
      final selectedWorkDay = yesterdayWD;
      final shouldShowActiveOnYesterday = selectedWorkDay.isToday && hasActiveTrack;
      
      expect(shouldShowActiveOnYesterday, isFalse, 
        reason: '–ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ù–ï –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è');
      
      print('‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–µ–º –º–∞—Ä—à—Ä—É—Ç–µ');
      
      print('üéâ === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù ===');
      print('üéØ –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      print('üö´ "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏" –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã');
    });

    test('–ø—Ä–æ–≤–µ—Ä–∫–∞ isToday –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤—Ä–µ–º–µ–Ω–∏', () {
      print('üß™ === –¢–ï–°–¢: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ isToday ===');
      
      final now = DateTime.now();
      
      // –°–æ–∑–¥–∞–µ–º WorkDay –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
      final testCases = [
        {
          'name': '–ù–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è (00:00)',
          'date': DateTime(now.year, now.month, now.day, 0, 0),
          'expectedIsToday': true,
        },
        {
          'name': '–ö–æ–Ω–µ—Ü —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è (23:59)',
          'date': DateTime(now.year, now.month, now.day, 23, 59),
          'expectedIsToday': true,
        },
        {
          'name': '–í—á–µ—Ä–∞ –≤ –ø–æ–ª–¥–µ–Ω—å',
          'date': DateTime(now.year, now.month, now.day - 1, 12, 0),
          'expectedIsToday': false,
        },
        {
          'name': '–ó–∞–≤—Ç—Ä–∞ –≤ –ø–æ–ª–¥–µ–Ω—å',
          'date': DateTime(now.year, now.month, now.day + 1, 12, 0),
          'expectedIsToday': false,
        },
      ];
      
      for (final testCase in testCases) {
        final workDay = WorkDay(
          id: DateTime.now().millisecondsSinceEpoch,
          userId: 1,
          date: testCase['date'] as DateTime,
          status: WorkDayStatus.active,
        );
        
        final actualIsToday = workDay.isToday;
        final expectedIsToday = testCase['expectedIsToday'] as bool;
        
        expect(actualIsToday, equals(expectedIsToday), 
          reason: '${testCase['name']}: isToday –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å $expectedIsToday');
        
        print('‚úÖ ${testCase['name']}: isToday = $actualIsToday');
      }
      
      print('‚úÖ isToday –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤');
    });

    test('—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä', () {
      print('üß™ === –¢–ï–°–¢: –ö–æ–Ω—Ü–µ–ø—Ü–∏—è TDD —Å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏ ===');
      print('üéØ –¶–µ–ª—å: –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è dev –∏ test –æ–¥–∏–Ω–∞–∫–æ–≤–æ');
      
      // 1. –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏ –≤ dev –∏ –≤ test
      final salesRepId = 12345;
      final baseDate = DateTime.now();
      
      final workDays = createWorkDaysForUser(salesRepId, baseDate);
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      expect(workDays.length, equals(3), 
        reason: '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 3 WorkDay');
      
      final yesterdayWD = workDays.firstWhere((wd) => !wd.isToday && wd.date.isBefore(baseDate));
      final todayWD = workDays.firstWhere((wd) => wd.isToday);
      final tomorrowWD = workDays.firstWhere((wd) => !wd.isToday && wd.date.isAfter(baseDate));
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–æ–≤
      expect(yesterdayWD.status, equals(WorkDayStatus.completed), 
        reason: '–í—á–µ—Ä–∞—à–Ω–∏–π WorkDay –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω');
      expect(todayWD.status, equals(WorkDayStatus.active), 
        reason: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω');
      expect(tomorrowWD.status, equals(WorkDayStatus.planned), 
        reason: '–ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π WorkDay –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω');
      
      // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      final trackLogicResults = testTrackDisplayLogic(workDays);
      
      expect(trackLogicResults['daysWithActiveTrack'], equals(1), 
        reason: '–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      expect(trackLogicResults['todayShowsActive'], isTrue, 
        reason: '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      expect(trackLogicResults['yesterdayShowsActive'], isFalse, 
        reason: '–í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      expect(trackLogicResults['tomorrowShowsActive'], isFalse, 
        reason: '–ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫');
      
      print('‚úÖ –§–∏–∫—Å—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã: ${workDays.length} WorkDay');
      print('‚úÖ –°—Ç–∞—Ç—É—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: –≤—á–µ—Ä–∞=${yesterdayWD.status}, —Å–µ–≥–æ–¥–Ω—è=${todayWD.status}, –∑–∞–≤—Ç—Ä–∞=${tomorrowWD.status}');
      print('‚úÖ –õ–æ–≥–∏–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
      
      print('üéâ === –ö–û–ù–¶–ï–ü–¶–ò–Ø TDD –†–ê–ë–û–¢–ê–ï–¢ ===');
      print('üí° –≠—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è createWorkDaysForUser() –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ dev —Ñ–∏–∫—Å—Ç—É—Ä–∞—Ö');
    });
  });
}

/// –°–æ–∑–¥–∞–µ—Ç WorkDay –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è dev –∏ test
/// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ dev —Ñ–∏–∫—Å—Ç—É—Ä–∞—Ö –∏ —Ç–µ—Å—Ç–∞—Ö
List<WorkDay> createWorkDaysForUser(int userId, DateTime baseDate) {
  final yesterday = DateTime(baseDate.year, baseDate.month, baseDate.day - 1);
  final today = DateTime(baseDate.year, baseDate.month, baseDate.day);
  final tomorrow = DateTime(baseDate.year, baseDate.month, baseDate.day + 1);
  
  return [
    // –í—á–µ—Ä–∞—à–Ω–∏–π WorkDay - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    WorkDay(
      id: yesterday.millisecondsSinceEpoch,
      userId: userId,
      date: yesterday,
      status: WorkDayStatus.completed,
    ),
    
    // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π WorkDay - –∞–∫—Ç–∏–≤–Ω—ã–π
    WorkDay(
      id: today.millisecondsSinceEpoch,
      userId: userId,
      date: today,
      status: WorkDayStatus.active,
    ),
    
    // –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π WorkDay - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    WorkDay(
      id: tomorrow.millisecondsSinceEpoch,
      userId: userId,
      date: tomorrow,
      status: WorkDayStatus.planned,
    ),
  ];
}

/// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ - –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è
/// –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ UI –∏ —Ç–µ—Å—Ç–∞—Ö
Map<String, dynamic> testTrackDisplayLogic(List<WorkDay> workDays) {
  final hasActiveTrack = true; // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
  
  int daysWithActiveTrack = 0;
  bool todayShowsActive = false;
  bool yesterdayShowsActive = false;
  bool tomorrowShowsActive = false;
  
  for (final workDay in workDays) {
    // –õ–æ–≥–∏–∫–∞ –∏–∑ sales_rep_home_page.dart:
    // if (selectedWorkDay.isToday && workDayProvider.activeTrack != null) {
    //   trackToShow = workDayProvider.activeTrack;
    // } else {
    //   trackToShow = selectedWorkDay.actualTrack;
    // }
    final showsActiveTrack = workDay.isToday && hasActiveTrack;
    
    if (showsActiveTrack) {
      daysWithActiveTrack++;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —ç—Ç–æ –¥–µ–Ω—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final now = DateTime.now();
    if (workDay.isToday) {
      todayShowsActive = showsActiveTrack;
    } else if (workDay.date.isBefore(now)) {
      yesterdayShowsActive = showsActiveTrack;
    } else if (workDay.date.isAfter(now)) {
      tomorrowShowsActive = showsActiveTrack;
    }
  }
  
  return {
    'daysWithActiveTrack': daysWithActiveTrack,
    'todayShowsActive': todayShowsActive,
    'yesterdayShowsActive': yesterdayShowsActive,
    'tomorrowShowsActive': tomorrowShowsActive,
  };
}

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–Ω—è—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤
String _getDayName(WorkDay workDay) {
  if (workDay.isToday) return '–°–µ–≥–æ–¥–Ω—è';
  
  final now = DateTime.now();
  if (workDay.date.isBefore(now)) return '–í—á–µ—Ä–∞';
  if (workDay.date.isAfter(now)) return '–ó–∞–≤—Ç—Ä–∞';
  
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å';
}
