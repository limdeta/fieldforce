// Mocks generated by Mockito 5.4.6 from annotations
// in fieldforce/test/features/authentication/domain/authentication_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fieldforce/features/authentication/domain/entities/user.dart'
    as _i6;
import 'package:fieldforce/features/authentication/domain/entities/user_session.dart'
    as _i9;
import 'package:fieldforce/features/authentication/domain/repositories/session_repository.dart'
    as _i8;
import 'package:fieldforce/features/authentication/domain/repositories/user_repository.dart'
    as _i3;
import 'package:fieldforce/features/authentication/domain/services/i_auth_api_service.dart'
    as _i10;
import 'package:fieldforce/features/authentication/domain/value_objects/phone_number.dart'
    as _i7;
import 'package:fieldforce/shared/either.dart' as _i2;
import 'package:fieldforce/shared/failures.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> getUserByPhoneNumber(
    _i7.PhoneNumber? phoneNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserByPhoneNumber, [phoneNumber]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
              _FakeEither_0<_i5.Failure, _i6.User>(
                this,
                Invocation.method(#getUserByPhoneNumber, [phoneNumber]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> createUser(_i6.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [user]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
              _FakeEither_0<_i5.Failure, _i6.User>(
                this,
                Invocation.method(#createUser, [user]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> saveUser(_i6.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
              _FakeEither_0<_i5.Failure, _i6.User>(
                this,
                Invocation.method(#saveUser, [user]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> getUserByExternalId(
    String? externalId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserByExternalId, [externalId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
              _FakeEither_0<_i5.Failure, _i6.User>(
                this,
                Invocation.method(#getUserByExternalId, [externalId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> getUserByInternalId(
    int? internalId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserByInternalId, [internalId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
              _FakeEither_0<_i5.Failure, _i6.User>(
                this,
                Invocation.method(#getUserByInternalId, [internalId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.User>>> getAllUsers() =>
      (super.noSuchMethod(
            Invocation.method(#getAllUsers, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.User>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.User>>(
                    this,
                    Invocation.method(#getAllUsers, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.User>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteUser(String? externalId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [externalId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteUser, [externalId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> userExists(String? externalId) =>
      (super.noSuchMethod(
            Invocation.method(#userExists, [externalId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#userExists, [externalId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [SessionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionRepository extends _i1.Mock implements _i8.SessionRepository {
  MockSessionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, _i9.UserSession?>>
  getCurrentSession() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentSession, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.AuthFailure, _i9.UserSession?>>.value(
                  _FakeEither_0<_i5.AuthFailure, _i9.UserSession?>(
                    this,
                    Invocation.method(#getCurrentSession, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.AuthFailure, _i9.UserSession?>>);

  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, void>> saveSession(
    _i9.UserSession? session,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveSession, [session]),
            returnValue: _i4.Future<_i2.Either<_i5.AuthFailure, void>>.value(
              _FakeEither_0<_i5.AuthFailure, void>(
                this,
                Invocation.method(#saveSession, [session]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.AuthFailure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, void>> clearSession() =>
      (super.noSuchMethod(
            Invocation.method(#clearSession, []),
            returnValue: _i4.Future<_i2.Either<_i5.AuthFailure, void>>.value(
              _FakeEither_0<_i5.AuthFailure, void>(
                this,
                Invocation.method(#clearSession, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.AuthFailure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, bool>> hasValidSession() =>
      (super.noSuchMethod(
            Invocation.method(#hasValidSession, []),
            returnValue: _i4.Future<_i2.Either<_i5.AuthFailure, bool>>.value(
              _FakeEither_0<_i5.AuthFailure, bool>(
                this,
                Invocation.method(#hasValidSession, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.AuthFailure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, void>> refreshSession() =>
      (super.noSuchMethod(
            Invocation.method(#refreshSession, []),
            returnValue: _i4.Future<_i2.Either<_i5.AuthFailure, void>>.value(
              _FakeEither_0<_i5.AuthFailure, void>(
                this,
                Invocation.method(#refreshSession, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.AuthFailure, void>>);
}

/// A class which mocks [IAuthApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthApiService extends _i1.Mock implements _i10.IAuthApiService {
  MockIAuthApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.AuthApiResult>> authenticate(
    _i7.PhoneNumber? phoneNumber,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#authenticate, [phoneNumber, password]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i10.AuthApiResult>>.value(
                  _FakeEither_0<_i5.Failure, _i10.AuthApiResult>(
                    this,
                    Invocation.method(#authenticate, [phoneNumber, password]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i10.AuthApiResult>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>> getUserInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getUserInfo, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>.value(
                  _FakeEither_0<_i5.Failure, Map<String, dynamic>>(
                    this,
                    Invocation.method(#getUserInfo, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>>>);
}
