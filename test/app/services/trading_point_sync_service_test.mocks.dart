// Mocks generated by Mockito 5.4.6 from annotations
// in fieldforce/test/app/services/trading_point_sync_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fieldforce/app/domain/entities/app_user.dart' as _i10;
import 'package:fieldforce/app/domain/repositories/app_user_repository.dart'
    as _i9;
import 'package:fieldforce/app/services/session_manager.dart' as _i12;
import 'package:fieldforce/features/authentication/domain/entities/user.dart'
    as _i11;
import 'package:fieldforce/features/shop/domain/entities/employee.dart' as _i8;
import 'package:fieldforce/features/shop/domain/entities/trading_point.dart'
    as _i7;
import 'package:fieldforce/features/shop/domain/repositories/trading_point_repository.dart'
    as _i4;
import 'package:fieldforce/shared/either.dart' as _i2;
import 'package:fieldforce/shared/failures.dart' as _i6;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClient_1 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TradingPointRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTradingPointRepository extends _i1.Mock
    implements _i4.TradingPointRepository {
  MockTradingPointRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.TradingPoint>>> getEmployeePoints(
    _i8.Employee? employee,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getEmployeePoints, [employee]),
            returnValue:
                _i5.Future<
                  _i2.Either<_i6.Failure, List<_i7.TradingPoint>>
                >.value(
                  _FakeEither_0<_i6.Failure, List<_i7.TradingPoint>>(
                    this,
                    Invocation.method(#getEmployeePoints, [employee]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, List<_i7.TradingPoint>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.TradingPoint?>> getById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.TradingPoint?>>.value(
                  _FakeEither_0<_i6.Failure, _i7.TradingPoint?>(
                    this,
                    Invocation.method(#getById, [id]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.TradingPoint?>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.TradingPoint?>> getByExternalId(
    String? externalId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getByExternalId, [externalId]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.TradingPoint?>>.value(
                  _FakeEither_0<_i6.Failure, _i7.TradingPoint?>(
                    this,
                    Invocation.method(#getByExternalId, [externalId]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.TradingPoint?>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.TradingPoint>> save(
    _i7.TradingPoint? tradingPoint,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#save, [tradingPoint]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.TradingPoint>>.value(
                  _FakeEither_0<_i6.Failure, _i7.TradingPoint>(
                    this,
                    Invocation.method(#save, [tradingPoint]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.TradingPoint>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> assignToEmployee(
    _i7.TradingPoint? tradingPoint,
    _i8.Employee? employee,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#assignToEmployee, [tradingPoint, employee]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#assignToEmployee, [tradingPoint, employee]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> unassignFromEmployee(
    _i7.TradingPoint? tradingPoint,
    _i8.Employee? employee,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#unassignFromEmployee, [tradingPoint, employee]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#unassignFromEmployee, [
                  tradingPoint,
                  employee,
                ]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.TradingPoint>>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue:
                _i5.Future<
                  _i2.Either<_i6.Failure, List<_i7.TradingPoint>>
                >.value(
                  _FakeEither_0<_i6.Failure, List<_i7.TradingPoint>>(
                    this,
                    Invocation.method(#getAll, []),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, List<_i7.TradingPoint>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.TradingPoint>>> searchByName(
    String? query,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchByName, [query]),
            returnValue:
                _i5.Future<
                  _i2.Either<_i6.Failure, List<_i7.TradingPoint>>
                >.value(
                  _FakeEither_0<_i6.Failure, List<_i7.TradingPoint>>(
                    this,
                    Invocation.method(#searchByName, [query]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, List<_i7.TradingPoint>>>);
}

/// A class which mocks [AppUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppUserRepository extends _i1.Mock implements _i9.AppUserRepository {
  MockAppUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>> getAppUserByEmployeeId(
    int? employeeId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAppUserByEmployeeId, [employeeId]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>>.value(
                  _FakeEither_0<_i6.Failure, _i10.AppUser>(
                    this,
                    Invocation.method(#getAppUserByEmployeeId, [employeeId]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>> getAppUserByUserId(
    int? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAppUserByUserId, [userId]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>>.value(
                  _FakeEither_0<_i6.Failure, _i10.AppUser>(
                    this,
                    Invocation.method(#getAppUserByUserId, [userId]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser?>> getAppUserByExternalId(
    String? externalId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAppUserByExternalId, [externalId]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser?>>.value(
                  _FakeEither_0<_i6.Failure, _i10.AppUser?>(
                    this,
                    Invocation.method(#getAppUserByExternalId, [externalId]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser?>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>> createAppUser(
    _i8.Employee? employee,
    _i11.User? user,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createAppUser, [employee, user]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>>.value(
                  _FakeEither_0<_i6.Failure, _i10.AppUser>(
                    this,
                    Invocation.method(#createAppUser, [employee, user]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>> updateAppUser(
    _i10.AppUser? appUser,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAppUser, [appUser]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>>.value(
                  _FakeEither_0<_i6.Failure, _i10.AppUser>(
                    this,
                    Invocation.method(#updateAppUser, [appUser]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i10.AppUser>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> appUserExists(int? employeeId) =>
      (super.noSuchMethod(
            Invocation.method(#appUserExists, [employeeId]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
              _FakeEither_0<_i6.Failure, bool>(
                this,
                Invocation.method(#appUserExists, [employeeId]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, void>> deleteAppUser(int? employeeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAppUser, [employeeId]),
            returnValue: _i5.Future<_i2.Either<_i6.Failure, void>>.value(
              _FakeEither_0<_i6.Failure, void>(
                this,
                Invocation.method(#deleteAppUser, [employeeId]),
              ),
            ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, void>>);
}

/// A class which mocks [SessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionManager extends _i1.Mock implements _i12.SessionManager {
  MockSessionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Client> getSessionClient() =>
      (super.noSuchMethod(
            Invocation.method(#getSessionClient, []),
            returnValue: _i5.Future<_i3.Client>.value(
              _FakeClient_1(this, Invocation.method(#getSessionClient, [])),
            ),
          )
          as _i5.Future<_i3.Client>);

  @override
  _i5.Future<void> saveSessionCookie(_i3.Response? response) =>
      (super.noSuchMethod(
            Invocation.method(#saveSessionCookie, [response]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<Map<String, String>> getSessionHeaders() =>
      (super.noSuchMethod(
            Invocation.method(#getSessionHeaders, []),
            returnValue: _i5.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i5.Future<Map<String, String>>);

  @override
  _i5.Future<bool> hasActiveSession() =>
      (super.noSuchMethod(
            Invocation.method(#hasActiveSession, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> clearSession() =>
      (super.noSuchMethod(
            Invocation.method(#clearSession, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
